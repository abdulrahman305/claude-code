<?xml version="1.0" encoding="UTF-8" ?>
<testsuites name="vitest tests" tests="1703" failures="37" errors="0" time="30.8863511">
    <testsuite name="src/gemini.test.tsx" timestamp="2025-09-23T13:52:09.488Z" hostname="WIN-33AANMPCPKN" tests="9" failures="0" errors="0" skipped="0" time="0.559093">
        <testcase classname="src/gemini.test.tsx" name="gemini.tsx main function &gt; verifies that we dont load the config before relaunchAppInChildProcess" time="0.523746">
            <system-err>
No input provided via stdin. Input can be provided by piping data into gemini or using the --prompt option.

            </system-err>
        </testcase>
        <testcase classname="src/gemini.test.tsx" name="gemini.tsx main function &gt; should log unhandled promise rejections and open debug console on first error" time="0.0126889">
        </testcase>
        <testcase classname="src/gemini.test.tsx" name="gemini.tsx main function kitty protocol &gt; should call setRawMode and detectAndEnableKittyProtocol when isInteractive is true" time="0.0051258">
        </testcase>
        <testcase classname="src/gemini.test.tsx" name="validateDnsResolutionOrder &gt; should return &quot;ipv4first&quot; when the input is &quot;ipv4first&quot;" time="0.0004126">
        </testcase>
        <testcase classname="src/gemini.test.tsx" name="validateDnsResolutionOrder &gt; should return &quot;verbatim&quot; when the input is &quot;verbatim&quot;" time="0.0003667">
        </testcase>
        <testcase classname="src/gemini.test.tsx" name="validateDnsResolutionOrder &gt; should return the default &quot;ipv4first&quot; when the input is undefined" time="0.0001697">
        </testcase>
        <testcase classname="src/gemini.test.tsx" name="validateDnsResolutionOrder &gt; should return the default &quot;ipv4first&quot; and log a warning for an invalid string" time="0.0002867">
        </testcase>
        <testcase classname="src/gemini.test.tsx" name="startInteractiveUI &gt; should render the UI with proper React context and exitOnCtrlC disabled" time="0.000925">
        </testcase>
        <testcase classname="src/gemini.test.tsx" name="startInteractiveUI &gt; should perform all startup tasks in correct order" time="0.0073311">
        </testcase>
    </testsuite>
    <testsuite name="src/nonInteractiveCli.test.ts" timestamp="2025-09-23T13:52:09.492Z" hostname="WIN-33AANMPCPKN" tests="17" failures="0" errors="0" skipped="0" time="0.0510215">
        <testcase classname="src/nonInteractiveCli.test.ts" name="runNonInteractive &gt; should process input and write text output" time="0.007078">
        </testcase>
        <testcase classname="src/nonInteractiveCli.test.ts" name="runNonInteractive &gt; should handle a single tool call and respond" time="0.0020687">
        </testcase>
        <testcase classname="src/nonInteractiveCli.test.ts" name="runNonInteractive &gt; should handle error during tool execution and should send error back to the model" time="0.0014878">
        </testcase>
        <testcase classname="src/nonInteractiveCli.test.ts" name="runNonInteractive &gt; should exit with error if sendMessageStream throws initially" time="0.0033779">
        </testcase>
        <testcase classname="src/nonInteractiveCli.test.ts" name="runNonInteractive &gt; should not exit if a tool is not found, and should send error back to model" time="0.0015653">
        </testcase>
        <testcase classname="src/nonInteractiveCli.test.ts" name="runNonInteractive &gt; should exit when max session turns are exceeded" time="0.0023911">
        </testcase>
        <testcase classname="src/nonInteractiveCli.test.ts" name="runNonInteractive &gt; should preprocess @include commands before sending to the model" time="0.0024622">
        </testcase>
        <testcase classname="src/nonInteractiveCli.test.ts" name="runNonInteractive &gt; should process input and write JSON output with stats" time="0.0019926">
        </testcase>
        <testcase classname="src/nonInteractiveCli.test.ts" name="runNonInteractive &gt; should write JSON output with stats for tool-only commands (no text response)" time="0.0020653">
        </testcase>
        <testcase classname="src/nonInteractiveCli.test.ts" name="runNonInteractive &gt; should write JSON output with stats for empty response commands" time="0.0015486">
        </testcase>
        <testcase classname="src/nonInteractiveCli.test.ts" name="runNonInteractive &gt; should handle errors in JSON format" time="0.0046402">
        </testcase>
        <testcase classname="src/nonInteractiveCli.test.ts" name="runNonInteractive &gt; should handle FatalInputError with custom exit code in JSON format" time="0.0039075">
        </testcase>
        <testcase classname="src/nonInteractiveCli.test.ts" name="runNonInteractive &gt; should execute a slash command that returns a prompt" time="0.0065667">
        </testcase>
        <testcase classname="src/nonInteractiveCli.test.ts" name="runNonInteractive &gt; should throw FatalInputError if a command requires confirmation" time="0.0022287">
        </testcase>
        <testcase classname="src/nonInteractiveCli.test.ts" name="runNonInteractive &gt; should treat an unknown slash command as a regular prompt" time="0.0015911">
        </testcase>
        <testcase classname="src/nonInteractiveCli.test.ts" name="runNonInteractive &gt; should throw for unhandled command result types" time="0.0020408">
        </testcase>
        <testcase classname="src/nonInteractiveCli.test.ts" name="runNonInteractive &gt; should pass arguments to the slash command action" time="0.0016802">
        </testcase>
    </testsuite>
    <testsuite name="src/validateNonInterActiveAuth.test.ts" timestamp="2025-09-23T13:52:09.495Z" hostname="WIN-33AANMPCPKN" tests="16" failures="0" errors="0" skipped="0" time="0.0492171">
        <testcase classname="src/validateNonInterActiveAuth.test.ts" name="validateNonInterActiveAuth &gt; exits if no auth type is configured or env vars set" time="0.0051452">
        </testcase>
        <testcase classname="src/validateNonInterActiveAuth.test.ts" name="validateNonInterActiveAuth &gt; uses LOGIN_WITH_GOOGLE if GOOGLE_GENAI_USE_GCA is set" time="0.0050419">
        </testcase>
        <testcase classname="src/validateNonInterActiveAuth.test.ts" name="validateNonInterActiveAuth &gt; uses USE_GEMINI if GEMINI_API_KEY is set" time="0.0021501">
        </testcase>
        <testcase classname="src/validateNonInterActiveAuth.test.ts" name="validateNonInterActiveAuth &gt; uses USE_VERTEX_AI if GOOGLE_GENAI_USE_VERTEXAI is true (with GOOGLE_CLOUD_PROJECT and GOOGLE_CLOUD_LOCATION)" time="0.001551">
        </testcase>
        <testcase classname="src/validateNonInterActiveAuth.test.ts" name="validateNonInterActiveAuth &gt; uses USE_VERTEX_AI if GOOGLE_GENAI_USE_VERTEXAI is true and GOOGLE_API_KEY is set" time="0.0012046">
        </testcase>
        <testcase classname="src/validateNonInterActiveAuth.test.ts" name="validateNonInterActiveAuth &gt; uses LOGIN_WITH_GOOGLE if GOOGLE_GENAI_USE_GCA is set, even with other env vars" time="0.0012119">
        </testcase>
        <testcase classname="src/validateNonInterActiveAuth.test.ts" name="validateNonInterActiveAuth &gt; uses USE_VERTEX_AI if both GEMINI_API_KEY and GOOGLE_GENAI_USE_VERTEXAI are set" time="0.0011715">
        </testcase>
        <testcase classname="src/validateNonInterActiveAuth.test.ts" name="validateNonInterActiveAuth &gt; uses USE_GEMINI if GOOGLE_GENAI_USE_VERTEXAI is false, GEMINI_API_KEY is set, and project/location are available" time="0.0013953">
        </testcase>
        <testcase classname="src/validateNonInterActiveAuth.test.ts" name="validateNonInterActiveAuth &gt; uses configuredAuthType if provided" time="0.0017747">
        </testcase>
        <testcase classname="src/validateNonInterActiveAuth.test.ts" name="validateNonInterActiveAuth &gt; exits if validateAuthMethod returns error" time="0.0006133">
        </testcase>
        <testcase classname="src/validateNonInterActiveAuth.test.ts" name="validateNonInterActiveAuth &gt; skips validation if useExternalAuth is true" time="0.0005539">
        </testcase>
        <testcase classname="src/validateNonInterActiveAuth.test.ts" name="validateNonInterActiveAuth &gt; uses enforcedAuthType if provided" time="0.0014617">
        </testcase>
        <testcase classname="src/validateNonInterActiveAuth.test.ts" name="validateNonInterActiveAuth &gt; exits if currentAuthType does not match enforcedAuthType" time="0.0006088">
        </testcase>
        <testcase classname="src/validateNonInterActiveAuth.test.ts" name="validateNonInterActiveAuth &gt; JSON output mode &gt; prints JSON error when no auth is configured and exits with code 1" time="0.0221995">
        </testcase>
        <testcase classname="src/validateNonInterActiveAuth.test.ts" name="validateNonInterActiveAuth &gt; JSON output mode &gt; prints JSON error when enforced auth mismatches current auth and exits with code 1" time="0.0010924">
        </testcase>
        <testcase classname="src/validateNonInterActiveAuth.test.ts" name="validateNonInterActiveAuth &gt; JSON output mode &gt; prints JSON error when validateAuthMethod fails and exits with code 1" time="0.0007153">
        </testcase>
    </testsuite>
    <testsuite name="src/commands/mcp.test.ts" timestamp="2025-09-23T13:52:09.498Z" hostname="WIN-33AANMPCPKN" tests="3" failures="0" errors="0" skipped="0" time="0.0121252">
        <testcase classname="src/commands/mcp.test.ts" name="mcp command &gt; should have correct command definition" time="0.00167">
        </testcase>
        <testcase classname="src/commands/mcp.test.ts" name="mcp command &gt; should have exactly one option (help flag)" time="0.005444">
        </testcase>
        <testcase classname="src/commands/mcp.test.ts" name="mcp command &gt; should register add, remove, and list subcommands" time="0.0035174">
        </testcase>
    </testsuite>
    <testsuite name="src/config/auth.test.ts" timestamp="2025-09-23T13:52:09.498Z" hostname="WIN-33AANMPCPKN" tests="8" failures="0" errors="0" skipped="0" time="0.0067646">
        <testcase classname="src/config/auth.test.ts" name="validateAuthMethod &gt; should return null for LOGIN_WITH_GOOGLE" time="0.0021673">
        </testcase>
        <testcase classname="src/config/auth.test.ts" name="validateAuthMethod &gt; should return null for CLOUD_SHELL" time="0.0005011">
        </testcase>
        <testcase classname="src/config/auth.test.ts" name="validateAuthMethod &gt; USE_GEMINI &gt; should return null if GEMINI_API_KEY is set" time="0.0004963">
        </testcase>
        <testcase classname="src/config/auth.test.ts" name="validateAuthMethod &gt; USE_GEMINI &gt; should return an error message if GEMINI_API_KEY is not set" time="0.0005888">
        </testcase>
        <testcase classname="src/config/auth.test.ts" name="validateAuthMethod &gt; USE_VERTEX_AI &gt; should return null if GOOGLE_CLOUD_PROJECT and GOOGLE_CLOUD_LOCATION are set" time="0.0004859">
        </testcase>
        <testcase classname="src/config/auth.test.ts" name="validateAuthMethod &gt; USE_VERTEX_AI &gt; should return null if GOOGLE_API_KEY is set" time="0.0003774">
        </testcase>
        <testcase classname="src/config/auth.test.ts" name="validateAuthMethod &gt; USE_VERTEX_AI &gt; should return an error message if no required environment variables are set" time="0.0003567">
        </testcase>
        <testcase classname="src/config/auth.test.ts" name="validateAuthMethod &gt; should return an error message for an invalid auth method" time="0.0004493">
        </testcase>
    </testsuite>
    <testsuite name="src/config/config.integration.test.ts" timestamp="2025-09-23T13:52:09.500Z" hostname="WIN-33AANMPCPKN" tests="18" failures="0" errors="0" skipped="0" time="0.4062545">
        <testcase classname="src/config/config.integration.test.ts" name="Configuration Integration Tests &gt; File Filtering Configuration &gt; should load default file filtering settings" time="0.019058">
        </testcase>
        <testcase classname="src/config/config.integration.test.ts" name="Configuration Integration Tests &gt; File Filtering Configuration &gt; should load custom file filtering settings from configuration" time="0.0015029">
        </testcase>
        <testcase classname="src/config/config.integration.test.ts" name="Configuration Integration Tests &gt; File Filtering Configuration &gt; should merge user and workspace file filtering settings" time="0.0010929">
        </testcase>
        <testcase classname="src/config/config.integration.test.ts" name="Configuration Integration Tests &gt; Configuration Integration &gt; should handle partial configuration objects gracefully" time="0.0009095">
        </testcase>
        <testcase classname="src/config/config.integration.test.ts" name="Configuration Integration Tests &gt; Configuration Integration &gt; should handle empty configuration objects gracefully" time="0.0014615">
        </testcase>
        <testcase classname="src/config/config.integration.test.ts" name="Configuration Integration Tests &gt; Configuration Integration &gt; should handle missing configuration sections gracefully" time="0.0014159">
        </testcase>
        <testcase classname="src/config/config.integration.test.ts" name="Configuration Integration Tests &gt; Real-world Configuration Scenarios &gt; should handle a security-focused configuration" time="0.001361">
        </testcase>
        <testcase classname="src/config/config.integration.test.ts" name="Configuration Integration Tests &gt; Real-world Configuration Scenarios &gt; should handle a CI/CD environment configuration" time="0.0012857">
        </testcase>
        <testcase classname="src/config/config.integration.test.ts" name="Configuration Integration Tests &gt; Checkpointing Configuration &gt; should enable checkpointing when the setting is true" time="0.0377502">
        </testcase>
        <testcase classname="src/config/config.integration.test.ts" name="Configuration Integration Tests &gt; Extension Context Files &gt; should have an empty array for extension context files by default" time="0.002586">
        </testcase>
        <testcase classname="src/config/config.integration.test.ts" name="Configuration Integration Tests &gt; Extension Context Files &gt; should correctly store and return extension context file paths" time="0.0011992">
        </testcase>
        <testcase classname="src/config/config.integration.test.ts" name="Configuration Integration Tests &gt; Approval Mode Integration Tests &gt; should parse --approval-mode=auto_edit correctly through the full argument parsing flow" time="0.2213366">
        </testcase>
        <testcase classname="src/config/config.integration.test.ts" name="Configuration Integration Tests &gt; Approval Mode Integration Tests &gt; should parse --approval-mode=yolo correctly through the full argument parsing flow" time="0.0050053">
        </testcase>
        <testcase classname="src/config/config.integration.test.ts" name="Configuration Integration Tests &gt; Approval Mode Integration Tests &gt; should parse --approval-mode=default correctly through the full argument parsing flow" time="0.0067375">
        </testcase>
        <testcase classname="src/config/config.integration.test.ts" name="Configuration Integration Tests &gt; Approval Mode Integration Tests &gt; should parse legacy --yolo flag correctly" time="0.0194612">
        </testcase>
        <testcase classname="src/config/config.integration.test.ts" name="Configuration Integration Tests &gt; Approval Mode Integration Tests &gt; should reject invalid approval mode values during argument parsing" time="0.0458395">
            <system-err>
Usage: gemini [options] [command]

Gemini CLI - Launch an interactive CLI, use -p/--prompt for non-interactive mode

Commands:
  gemini [promptWords...]      Launch Gemini CLI  [default]
  gemini mcp                   Manage MCP servers
  gemini extensions &lt;command&gt;  Manage Gemini CLI extensions.

Options:
      --telemetry                 Enable telemetry? This flag specifically controls if telemetry is sent. Other --telemetry-* flags set specific values but do not enable telemetry on their own.  [deprecated: Use the &quot;telemetry.enabled&quot; setting in settings.json instead. This flag will be removed in a future version.] [boolean]
      --telemetry-target          Set the telemetry target (local or gcp). Overrides settings files.  [deprecated: Use the &quot;telemetry.target&quot; setting in settings.json instead. This flag will be removed in a future version.] [string] [choices: &quot;local&quot;, &quot;gcp&quot;]
      --telemetry-otlp-endpoint   Set the OTLP endpoint for telemetry. Overrides environment variables and settings files.  [deprecated: Use the &quot;telemetry.otlpEndpoint&quot; setting in settings.json instead. This flag will be removed in a future version.] [string]
      --telemetry-otlp-protocol   Set the OTLP protocol for telemetry (grpc or http). Overrides settings files.  [deprecated: Use the &quot;telemetry.otlpProtocol&quot; setting in settings.json instead. This flag will be removed in a future version.] [string] [choices: &quot;grpc&quot;, &quot;http&quot;]
      --telemetry-log-prompts     Enable or disable logging of user prompts for telemetry. Overrides settings files.  [deprecated: Use the &quot;telemetry.logPrompts&quot; setting in settings.json instead. This flag will be removed in a future version.] [boolean]
      --telemetry-outfile         Redirect all telemetry output to the specified file.  [deprecated: Use the &quot;telemetry.outfile&quot; setting in settings.json instead. This flag will be removed in a future version.] [string]
  -d, --debug                     Run in debug mode?  [boolean] [default: false]
      --proxy                     Proxy for gemini client, like schema://user:password@host:port  [deprecated: Use the &quot;proxy&quot; setting in settings.json instead. This flag will be removed in a future version.] [string]
  -m, --model                     Model  [string]
  -p, --prompt                    Prompt. Appended to input on stdin (if any).  [deprecated: Use the positional prompt instead. This flag will be removed in a future version.] [string]
  -i, --prompt-interactive        Execute the provided prompt and continue in interactive mode  [string]
  -s, --sandbox                   Run in sandbox?  [boolean]
      --sandbox-image             Sandbox image URI.  [deprecated: Use the &quot;tools.sandbox&quot; setting in settings.json instead. This flag will be removed in a future version.] [string]
  -a, --all-files                 Include ALL files in context?  [deprecated: Use @ includes in the application instead. This flag will be removed in a future version.] [boolean] [default: false]
      --show-memory-usage         Show memory usage in status bar  [deprecated: Use the &quot;ui.showMemoryUsage&quot; setting in settings.json instead. This flag will be removed in a future version.] [boolean] [default: false]
  -y, --yolo                      Automatically accept all actions (aka YOLO mode, see https://www.youtube.com/watch?v=xvFZjo5PgG0 for more details)?  [boolean] [default: false]
      --approval-mode             Set the approval mode: default (prompt for approval), auto_edit (auto-approve edit tools), yolo (auto-approve all tools)  [string] [choices: &quot;default&quot;, &quot;auto_edit&quot;, &quot;yolo&quot;]
  -c, --checkpointing             Enables checkpointing of file edits  [deprecated: Use the &quot;general.checkpointing.enabled&quot; setting in settings.json instead. This flag will be removed in a future version.] [boolean] [default: false]
      --experimental-acp          Starts the agent in ACP mode  [boolean]
      --allowed-mcp-server-names  Allowed MCP server names  [array]
      --allowed-tools             Tools that are allowed to run without confirmation  [array]
  -e, --extensions                A list of extensions to use. If not provided, all extensions are used.  [array]
  -l, --list-extensions           List all available extensions and exit.  [boolean]
      --include-directories       Additional directories to include in the workspace (comma-separated or multiple --include-directories)  [array]
      --screen-reader             Enable screen reader mode for accessibility.  [boolean]
  -o, --output-format             The format of the CLI output.  [string] [choices: &quot;text&quot;, &quot;json&quot;]
  -v, --version                   Show version number  [boolean]
  -h, --help                      Show help  [boolean]

Invalid values:
  Argument: approval-mode, Given: &quot;invalid_mode&quot;, Choices: &quot;default&quot;, &quot;auto_edit&quot;, &quot;yolo&quot;

            </system-err>
        </testcase>
        <testcase classname="src/config/config.integration.test.ts" name="Configuration Integration Tests &gt; Approval Mode Integration Tests &gt; should reject conflicting --yolo and --approval-mode flags" time="0.0294847">
            <system-err>
Usage: gemini [options] [command]

Gemini CLI - Launch an interactive CLI, use -p/--prompt for non-interactive mode

Commands:
  gemini [promptWords...]      Launch Gemini CLI  [default]
  gemini mcp                   Manage MCP servers
  gemini extensions &lt;command&gt;  Manage Gemini CLI extensions.

Options:
      --telemetry                 Enable telemetry? This flag specifically controls if telemetry is sent. Other --telemetry-* flags set specific values but do not enable telemetry on their own.  [deprecated: Use the &quot;telemetry.enabled&quot; setting in settings.json instead. This flag will be removed in a future version.] [boolean]
      --telemetry-target          Set the telemetry target (local or gcp). Overrides settings files.  [deprecated: Use the &quot;telemetry.target&quot; setting in settings.json instead. This flag will be removed in a future version.] [string] [choices: &quot;local&quot;, &quot;gcp&quot;]
      --telemetry-otlp-endpoint   Set the OTLP endpoint for telemetry. Overrides environment variables and settings files.  [deprecated: Use the &quot;telemetry.otlpEndpoint&quot; setting in settings.json instead. This flag will be removed in a future version.] [string]
      --telemetry-otlp-protocol   Set the OTLP protocol for telemetry (grpc or http). Overrides settings files.  [deprecated: Use the &quot;telemetry.otlpProtocol&quot; setting in settings.json instead. This flag will be removed in a future version.] [string] [choices: &quot;grpc&quot;, &quot;http&quot;]
      --telemetry-log-prompts     Enable or disable logging of user prompts for telemetry. Overrides settings files.  [deprecated: Use the &quot;telemetry.logPrompts&quot; setting in settings.json instead. This flag will be removed in a future version.] [boolean]
      --telemetry-outfile         Redirect all telemetry output to the specified file.  [deprecated: Use the &quot;telemetry.outfile&quot; setting in settings.json instead. This flag will be removed in a future version.] [string]
  -d, --debug                     Run in debug mode?  [boolean] [default: false]
      --proxy                     Proxy for gemini client, like schema://user:password@host:port  [deprecated: Use the &quot;proxy&quot; setting in settings.json instead. This flag will be removed in a future version.] [string]
  -m, --model                     Model  [string]
  -p, --prompt                    Prompt. Appended to input on stdin (if any).  [deprecated: Use the positional prompt instead. This flag will be removed in a future version.] [string]
  -i, --prompt-interactive        Execute the provided prompt and continue in interactive mode  [string]
  -s, --sandbox                   Run in sandbox?  [boolean]
      --sandbox-image             Sandbox image URI.  [deprecated: Use the &quot;tools.sandbox&quot; setting in settings.json instead. This flag will be removed in a future version.] [string]
  -a, --all-files                 Include ALL files in context?  [deprecated: Use @ includes in the application instead. This flag will be removed in a future version.] [boolean] [default: false]
      --show-memory-usage         Show memory usage in status bar  [deprecated: Use the &quot;ui.showMemoryUsage&quot; setting in settings.json instead. This flag will be removed in a future version.] [boolean] [default: false]
  -y, --yolo                      Automatically accept all actions (aka YOLO mode, see https://www.youtube.com/watch?v=xvFZjo5PgG0 for more details)?  [boolean] [default: false]
      --approval-mode             Set the approval mode: default (prompt for approval), auto_edit (auto-approve edit tools), yolo (auto-approve all tools)  [string] [choices: &quot;default&quot;, &quot;auto_edit&quot;, &quot;yolo&quot;]
  -c, --checkpointing             Enables checkpointing of file edits  [deprecated: Use the &quot;general.checkpointing.enabled&quot; setting in settings.json instead. This flag will be removed in a future version.] [boolean] [default: false]
      --experimental-acp          Starts the agent in ACP mode  [boolean]
      --allowed-mcp-server-names  Allowed MCP server names  [array]
      --allowed-tools             Tools that are allowed to run without confirmation  [array]
  -e, --extensions                A list of extensions to use. If not provided, all extensions are used.  [array]
  -l, --list-extensions           List all available extensions and exit.  [boolean]
      --include-directories       Additional directories to include in the workspace (comma-separated or multiple --include-directories)  [array]
      --screen-reader             Enable screen reader mode for accessibility.  [boolean]
  -o, --output-format             The format of the CLI output.  [string] [choices: &quot;text&quot;, &quot;json&quot;]
  -v, --version                   Show version number  [boolean]
  -h, --help                      Show help  [boolean]

Cannot use both --yolo (-y) and --approval-mode together. Use --approval-mode=yolo instead.

            </system-err>
        </testcase>
        <testcase classname="src/config/config.integration.test.ts" name="Configuration Integration Tests &gt; Approval Mode Integration Tests &gt; should handle backward compatibility with mixed scenarios" time="0.0047174">
        </testcase>
    </testsuite>
    <testsuite name="src/config/config.test.ts" timestamp="2025-09-23T13:52:09.503Z" hostname="WIN-33AANMPCPKN" tests="153" failures="0" errors="0" skipped="1" time="1.8073771">
        <testcase classname="src/config/config.test.ts" name="parseArguments &gt; should throw an error when both --prompt and --prompt-interactive are used together" time="0.0986142">
        </testcase>
        <testcase classname="src/config/config.test.ts" name="parseArguments &gt; should throw an error when using short flags -p and -i together" time="0.0114651">
        </testcase>
        <testcase classname="src/config/config.test.ts" name="parseArguments &gt; should allow --prompt without --prompt-interactive" time="0.0030788">
        </testcase>
        <testcase classname="src/config/config.test.ts" name="parseArguments &gt; should allow --prompt-interactive without --prompt" time="0.0222622">
        </testcase>
        <testcase classname="src/config/config.test.ts" name="parseArguments &gt; should allow -i flag as alias for --prompt-interactive" time="0.0054054">
        </testcase>
        <testcase classname="src/config/config.test.ts" name="parseArguments &gt; should throw an error when both --yolo and --approval-mode are used together" time="0.0671431">
        </testcase>
        <testcase classname="src/config/config.test.ts" name="parseArguments &gt; should throw an error when using short flags -y and --approval-mode together" time="0.0528953">
        </testcase>
        <testcase classname="src/config/config.test.ts" name="parseArguments &gt; should allow --approval-mode without --yolo" time="0.007075">
        </testcase>
        <testcase classname="src/config/config.test.ts" name="parseArguments &gt; should allow --yolo without --approval-mode" time="0.0381929">
        </testcase>
        <testcase classname="src/config/config.test.ts" name="parseArguments &gt; should reject invalid --approval-mode values" time="0.0112542">
        </testcase>
        <testcase classname="src/config/config.test.ts" name="parseArguments &gt; should support comma-separated values for --allowed-tools" time="0.0032391">
        </testcase>
        <testcase classname="src/config/config.test.ts" name="parseArguments &gt; should support comma-separated values for --allowed-mcp-server-names" time="0.0361924">
        </testcase>
        <testcase classname="src/config/config.test.ts" name="parseArguments &gt; should support comma-separated values for --extensions" time="0.0051857">
        </testcase>
        <testcase classname="src/config/config.test.ts" name="loadCliConfig &gt; should set showMemoryUsage to true when --show-memory-usage flag is present" time="0.0385324">
        </testcase>
        <testcase classname="src/config/config.test.ts" name="loadCliConfig &gt; should set showMemoryUsage to false when --memory flag is not present" time="0.0033082">
        </testcase>
        <testcase classname="src/config/config.test.ts" name="loadCliConfig &gt; should set showMemoryUsage to false by default from settings if CLI flag is not present" time="0.0187607">
        </testcase>
        <testcase classname="src/config/config.test.ts" name="loadCliConfig &gt; should prioritize CLI flag over settings for showMemoryUsage (CLI true, settings false)" time="0.0037567">
        </testcase>
        <testcase classname="src/config/config.test.ts" name="loadCliConfig &gt; Proxy configuration &gt; should leave proxy to empty by default" time="0.0049421">
        </testcase>
        <testcase classname="src/config/config.test.ts" name="loadCliConfig &gt; Proxy configuration &gt; should set proxy to http://localhost:7890 according to environment variable [https_proxy]" time="0.0045674">
        </testcase>
        <testcase classname="src/config/config.test.ts" name="loadCliConfig &gt; Proxy configuration &gt; should set proxy to http://localhost:7890 according to environment variable [http_proxy]" time="0.0033438">
        </testcase>
        <testcase classname="src/config/config.test.ts" name="loadCliConfig &gt; Proxy configuration &gt; should set proxy to http://localhost:7890 according to environment variable [HTTPS_PROXY]" time="0.0116779">
        </testcase>
        <testcase classname="src/config/config.test.ts" name="loadCliConfig &gt; Proxy configuration &gt; should set proxy to http://localhost:7890 according to environment variable [HTTP_PROXY]" time="0.0288429">
        </testcase>
        <testcase classname="src/config/config.test.ts" name="loadCliConfig &gt; Proxy configuration &gt; should set proxy when --proxy flag is present" time="0.0045366">
        </testcase>
        <testcase classname="src/config/config.test.ts" name="loadCliConfig &gt; Proxy configuration &gt; should prioritize CLI flag over environment variable for proxy (CLI http://localhost:7890, environment variable http://localhost:7891)" time="0.00402">
        </testcase>
        <testcase classname="src/config/config.test.ts" name="loadCliConfig telemetry &gt; should set telemetry to false by default when no flag or setting is present" time="0.0029425">
        </testcase>
        <testcase classname="src/config/config.test.ts" name="loadCliConfig telemetry &gt; should set telemetry to true when --telemetry flag is present" time="0.0383318">
        </testcase>
        <testcase classname="src/config/config.test.ts" name="loadCliConfig telemetry &gt; should set telemetry to false when --no-telemetry flag is present" time="0.0030552">
        </testcase>
        <testcase classname="src/config/config.test.ts" name="loadCliConfig telemetry &gt; should use telemetry value from settings if CLI flag is not present (settings true)" time="0.0032451">
        </testcase>
        <testcase classname="src/config/config.test.ts" name="loadCliConfig telemetry &gt; should use telemetry value from settings if CLI flag is not present (settings false)" time="0.0140832">
        </testcase>
        <testcase classname="src/config/config.test.ts" name="loadCliConfig telemetry &gt; should prioritize --telemetry CLI flag (true) over settings (false)" time="0.0144479">
        </testcase>
        <testcase classname="src/config/config.test.ts" name="loadCliConfig telemetry &gt; should prioritize --no-telemetry CLI flag (false) over settings (true)" time="0.005167">
        </testcase>
        <testcase classname="src/config/config.test.ts" name="loadCliConfig telemetry &gt; should use telemetry OTLP endpoint from settings if CLI flag is not present" time="0.0030443">
        </testcase>
        <testcase classname="src/config/config.test.ts" name="loadCliConfig telemetry &gt; should prioritize --telemetry-otlp-endpoint CLI flag over settings" time="0.0031081">
        </testcase>
        <testcase classname="src/config/config.test.ts" name="loadCliConfig telemetry &gt; should use default endpoint if no OTLP endpoint is provided via CLI or settings" time="0.0052694">
        </testcase>
        <testcase classname="src/config/config.test.ts" name="loadCliConfig telemetry &gt; should use telemetry target from settings if CLI flag is not present" time="0.0143801">
        </testcase>
        <testcase classname="src/config/config.test.ts" name="loadCliConfig telemetry &gt; should prioritize --telemetry-target CLI flag over settings" time="0.0030823">
        </testcase>
        <testcase classname="src/config/config.test.ts" name="loadCliConfig telemetry &gt; should use default target if no target is provided via CLI or settings" time="0.0022146">
        </testcase>
        <testcase classname="src/config/config.test.ts" name="loadCliConfig telemetry &gt; should use telemetry log prompts from settings if CLI flag is not present" time="0.0022195">
        </testcase>
        <testcase classname="src/config/config.test.ts" name="loadCliConfig telemetry &gt; should prioritize --telemetry-log-prompts CLI flag (true) over settings (false)" time="0.0029966">
        </testcase>
        <testcase classname="src/config/config.test.ts" name="loadCliConfig telemetry &gt; should prioritize --no-telemetry-log-prompts CLI flag (false) over settings (true)" time="0.0020896">
        </testcase>
        <testcase classname="src/config/config.test.ts" name="loadCliConfig telemetry &gt; should use default log prompts (true) if no value is provided via CLI or settings" time="0.0024493">
        </testcase>
        <testcase classname="src/config/config.test.ts" name="loadCliConfig telemetry &gt; should use telemetry OTLP protocol from settings if CLI flag is not present" time="0.0302026">
        </testcase>
        <testcase classname="src/config/config.test.ts" name="loadCliConfig telemetry &gt; should prioritize --telemetry-otlp-protocol CLI flag over settings" time="0.0039036">
        </testcase>
        <testcase classname="src/config/config.test.ts" name="loadCliConfig telemetry &gt; should use default protocol if no OTLP protocol is provided via CLI or settings" time="0.0058769">
        </testcase>
        <testcase classname="src/config/config.test.ts" name="loadCliConfig telemetry &gt; should reject invalid --telemetry-otlp-protocol values" time="0.0655232">
        </testcase>
        <testcase classname="src/config/config.test.ts" name="Hierarchical Memory Loading (config.ts) - Placeholder Suite &gt; should pass extension context file paths to loadServerHierarchicalMemory" time="0.0331315">
        </testcase>
        <testcase classname="src/config/config.test.ts" name="Hierarchical Memory Loading (config.ts) - Placeholder Suite &gt; should correctly use mocked homedir for global path" time="0">
            <skipped/>
        </testcase>
        <testcase classname="src/config/config.test.ts" name="mergeMcpServers &gt; should not modify the original settings object" time="0.0032849">
        </testcase>
        <testcase classname="src/config/config.test.ts" name="mergeExcludeTools &gt; should merge excludeTools from settings and extensions" time="0.0364401">
        </testcase>
        <testcase classname="src/config/config.test.ts" name="mergeExcludeTools &gt; should handle overlapping excludeTools between settings and extensions" time="0.0050609">
        </testcase>
        <testcase classname="src/config/config.test.ts" name="mergeExcludeTools &gt; should handle overlapping excludeTools between extensions" time="0.0230447">
        </testcase>
        <testcase classname="src/config/config.test.ts" name="mergeExcludeTools &gt; should return an empty array when no excludeTools are specified and it is interactive" time="0.0028027">
        </testcase>
        <testcase classname="src/config/config.test.ts" name="mergeExcludeTools &gt; should return default excludes when no excludeTools are specified and it is not interactive" time="0.0035196">
        </testcase>
        <testcase classname="src/config/config.test.ts" name="mergeExcludeTools &gt; should handle settings with excludeTools but no extensions" time="0.0022258">
        </testcase>
        <testcase classname="src/config/config.test.ts" name="mergeExcludeTools &gt; should handle extensions with excludeTools but no settings" time="0.0021379">
        </testcase>
        <testcase classname="src/config/config.test.ts" name="mergeExcludeTools &gt; should not modify the original settings object" time="0.003044">
        </testcase>
        <testcase classname="src/config/config.test.ts" name="Approval mode tool exclusion logic &gt; should exclude all interactive tools in non-interactive mode with default approval mode" time="0.022716">
        </testcase>
        <testcase classname="src/config/config.test.ts" name="Approval mode tool exclusion logic &gt; should exclude all interactive tools in non-interactive mode with explicit default approval mode" time="0.0027987">
        </testcase>
        <testcase classname="src/config/config.test.ts" name="Approval mode tool exclusion logic &gt; should exclude only shell tools in non-interactive mode with auto_edit approval mode" time="0.0023939">
        </testcase>
        <testcase classname="src/config/config.test.ts" name="Approval mode tool exclusion logic &gt; should exclude no interactive tools in non-interactive mode with yolo approval mode" time="0.0025481">
        </testcase>
        <testcase classname="src/config/config.test.ts" name="Approval mode tool exclusion logic &gt; should exclude no interactive tools in non-interactive mode with legacy yolo flag" time="0.0048629">
        </testcase>
        <testcase classname="src/config/config.test.ts" name="Approval mode tool exclusion logic &gt; should not exclude interactive tools in interactive mode regardless of approval mode" time="0.0587068">
        </testcase>
        <testcase classname="src/config/config.test.ts" name="Approval mode tool exclusion logic &gt; should merge approval mode exclusions with settings exclusions in auto_edit mode" time="0.002253">
        </testcase>
        <testcase classname="src/config/config.test.ts" name="Approval mode tool exclusion logic &gt; should throw an error for invalid approval mode values in loadCliConfig" time="0.0003592">
        </testcase>
        <testcase classname="src/config/config.test.ts" name="loadCliConfig with allowed-mcp-server-names &gt; should allow all MCP servers if the flag is not provided" time="0.0034385">
        </testcase>
        <testcase classname="src/config/config.test.ts" name="loadCliConfig with allowed-mcp-server-names &gt; should allow only the specified MCP server" time="0.0025533">
        </testcase>
        <testcase classname="src/config/config.test.ts" name="loadCliConfig with allowed-mcp-server-names &gt; should allow multiple specified MCP servers" time="0.0217366">
        </testcase>
        <testcase classname="src/config/config.test.ts" name="loadCliConfig with allowed-mcp-server-names &gt; should handle server names that do not exist" time="0.0024235">
        </testcase>
        <testcase classname="src/config/config.test.ts" name="loadCliConfig with allowed-mcp-server-names &gt; should allow no MCP servers if the flag is provided but empty" time="0.0021845">
        </testcase>
        <testcase classname="src/config/config.test.ts" name="loadCliConfig with allowed-mcp-server-names &gt; should read allowMCPServers from settings" time="0.0019652">
        </testcase>
        <testcase classname="src/config/config.test.ts" name="loadCliConfig with allowed-mcp-server-names &gt; should read excludeMCPServers from settings" time="0.0025041">
        </testcase>
        <testcase classname="src/config/config.test.ts" name="loadCliConfig with allowed-mcp-server-names &gt; should override allowMCPServers with excludeMCPServers if overlapping" time="0.0024331">
        </testcase>
        <testcase classname="src/config/config.test.ts" name="loadCliConfig with allowed-mcp-server-names &gt; should prioritize mcp server flag if set" time="0.0025871">
        </testcase>
        <testcase classname="src/config/config.test.ts" name="loadCliConfig with allowed-mcp-server-names &gt; should prioritize CLI flag over both allowed and excluded settings" time="0.0218941">
        </testcase>
        <testcase classname="src/config/config.test.ts" name="loadCliConfig extensions &gt; should not filter extensions if --extensions flag is not used" time="0.0028625">
        </testcase>
        <testcase classname="src/config/config.test.ts" name="loadCliConfig extensions &gt; should filter extensions if --extensions flag is used" time="0.0026035">
        </testcase>
        <testcase classname="src/config/config.test.ts" name="loadCliConfig model selection &gt; selects a model from settings.json if provided" time="0.0019339">
        </testcase>
        <testcase classname="src/config/config.test.ts" name="loadCliConfig model selection &gt; uses the default gemini model if nothing is set" time="0.0156769">
        </testcase>
        <testcase classname="src/config/config.test.ts" name="loadCliConfig model selection &gt; always prefers model from argvs" time="0.0024692">
        </testcase>
        <testcase classname="src/config/config.test.ts" name="loadCliConfig model selection &gt; selects the model from argvs if provided" time="0.0157702">
        </testcase>
        <testcase classname="src/config/config.test.ts" name="loadCliConfig model selection with model router &gt; should use auto model when useModelRouter is true and no model is provided" time="0.0024444">
        </testcase>
        <testcase classname="src/config/config.test.ts" name="loadCliConfig model selection with model router &gt; should use default model when useModelRouter is false and no model is provided" time="0.0025325">
        </testcase>
        <testcase classname="src/config/config.test.ts" name="loadCliConfig model selection with model router &gt; should prioritize argv over useModelRouter" time="0.0021766">
        </testcase>
        <testcase classname="src/config/config.test.ts" name="loadCliConfig model selection with model router &gt; should prioritize settings over useModelRouter" time="0.0061825">
        </testcase>
        <testcase classname="src/config/config.test.ts" name="loadCliConfig model selection with model router &gt; should prioritize environment variable over useModelRouter" time="0.0020293">
        </testcase>
        <testcase classname="src/config/config.test.ts" name="loadCliConfig folderTrust &gt; should be false when folderTrust is false" time="0.0020867">
        </testcase>
        <testcase classname="src/config/config.test.ts" name="loadCliConfig folderTrust &gt; should be true when folderTrust is true" time="0.0030616">
        </testcase>
        <testcase classname="src/config/config.test.ts" name="loadCliConfig folderTrust &gt; should be false by default" time="0.0195312">
        </testcase>
        <testcase classname="src/config/config.test.ts" name="loadCliConfig with includeDirectories &gt; should combine and resolve paths from settings and CLI arguments" time="0.0028478">
        </testcase>
        <testcase classname="src/config/config.test.ts" name="loadCliConfig chatCompression &gt; should pass chatCompression settings to the core config" time="0.0025454">
        </testcase>
        <testcase classname="src/config/config.test.ts" name="loadCliConfig chatCompression &gt; should have undefined chatCompression if not in settings" time="0.0032152">
        </testcase>
        <testcase classname="src/config/config.test.ts" name="loadCliConfig useRipgrep &gt; should be true by default when useRipgrep is not set in settings" time="0.0025758">
        </testcase>
        <testcase classname="src/config/config.test.ts" name="loadCliConfig useRipgrep &gt; should be false when useRipgrep is set to false in settings" time="0.0022372">
        </testcase>
        <testcase classname="src/config/config.test.ts" name="loadCliConfig useRipgrep &gt; should be true when useRipgrep is explicitly set to true in settings" time="0.0469486">
        </testcase>
        <testcase classname="src/config/config.test.ts" name="loadCliConfig useRipgrep &gt; loadCliConfig useModelRouter &gt; should be false by default when useModelRouter is not set in settings" time="0.006281">
        </testcase>
        <testcase classname="src/config/config.test.ts" name="loadCliConfig useRipgrep &gt; loadCliConfig useModelRouter &gt; should be true when useModelRouter is set to true in settings" time="0.0024613">
        </testcase>
        <testcase classname="src/config/config.test.ts" name="loadCliConfig useRipgrep &gt; loadCliConfig useModelRouter &gt; should be false when useModelRouter is explicitly set to false in settings" time="0.0028556">
        </testcase>
        <testcase classname="src/config/config.test.ts" name="screenReader configuration &gt; should use screenReader value from settings if CLI flag is not present (settings true)" time="0.0021788">
        </testcase>
        <testcase classname="src/config/config.test.ts" name="screenReader configuration &gt; should use screenReader value from settings if CLI flag is not present (settings false)" time="0.0025549">
        </testcase>
        <testcase classname="src/config/config.test.ts" name="screenReader configuration &gt; should prioritize --screen-reader CLI flag (true) over settings (false)" time="0.0241821">
        </testcase>
        <testcase classname="src/config/config.test.ts" name="screenReader configuration &gt; should be false by default when no flag or setting is present" time="0.0021465">
        </testcase>
        <testcase classname="src/config/config.test.ts" name="loadCliConfig tool exclusions &gt; should not exclude interactive tools in interactive mode without YOLO" time="0.0033399">
        </testcase>
        <testcase classname="src/config/config.test.ts" name="loadCliConfig tool exclusions &gt; should not exclude interactive tools in interactive mode with YOLO" time="0.0023714">
        </testcase>
        <testcase classname="src/config/config.test.ts" name="loadCliConfig tool exclusions &gt; should exclude interactive tools in non-interactive mode without YOLO" time="0.0021253">
        </testcase>
        <testcase classname="src/config/config.test.ts" name="loadCliConfig tool exclusions &gt; should not exclude interactive tools in non-interactive mode with YOLO" time="0.0068003">
        </testcase>
        <testcase classname="src/config/config.test.ts" name="loadCliConfig interactive &gt; should be interactive if isTTY and no prompt" time="0.0885535">
        </testcase>
        <testcase classname="src/config/config.test.ts" name="loadCliConfig interactive &gt; should be interactive if prompt-interactive is set" time="0.0024331">
        </testcase>
        <testcase classname="src/config/config.test.ts" name="loadCliConfig interactive &gt; should not be interactive if not isTTY and no prompt" time="0.0025089">
        </testcase>
        <testcase classname="src/config/config.test.ts" name="loadCliConfig interactive &gt; should not be interactive if prompt is set" time="0.0914946">
        </testcase>
        <testcase classname="src/config/config.test.ts" name="loadCliConfig interactive &gt; should not be interactive if positional prompt words are provided with other flags" time="0.0083121">
        </testcase>
        <testcase classname="src/config/config.test.ts" name="loadCliConfig interactive &gt; should not be interactive if positional prompt words are provided with multiple flags" time="0.2420539">
        </testcase>
        <testcase classname="src/config/config.test.ts" name="loadCliConfig interactive &gt; should be interactive if no positional prompt words are provided with flags" time="0.0025233">
        </testcase>
        <testcase classname="src/config/config.test.ts" name="loadCliConfig approval mode &gt; should default to DEFAULT approval mode when no flags are set" time="0.0020512">
        </testcase>
        <testcase classname="src/config/config.test.ts" name="loadCliConfig approval mode &gt; should set YOLO approval mode when --yolo flag is used" time="0.0019658">
        </testcase>
        <testcase classname="src/config/config.test.ts" name="loadCliConfig approval mode &gt; should set YOLO approval mode when -y flag is used" time="0.0020433">
        </testcase>
        <testcase classname="src/config/config.test.ts" name="loadCliConfig approval mode &gt; should set DEFAULT approval mode when --approval-mode=default" time="0.0022083">
        </testcase>
        <testcase classname="src/config/config.test.ts" name="loadCliConfig approval mode &gt; should set AUTO_EDIT approval mode when --approval-mode=auto_edit" time="0.0020118">
        </testcase>
        <testcase classname="src/config/config.test.ts" name="loadCliConfig approval mode &gt; should set YOLO approval mode when --approval-mode=yolo" time="0.0020395">
        </testcase>
        <testcase classname="src/config/config.test.ts" name="loadCliConfig approval mode &gt; should prioritize --approval-mode over --yolo when both would be valid (but validation prevents this)" time="0.0019177">
        </testcase>
        <testcase classname="src/config/config.test.ts" name="loadCliConfig approval mode &gt; should fall back to --yolo behavior when --approval-mode is not set" time="0.0020601">
        </testcase>
        <testcase classname="src/config/config.test.ts" name="loadCliConfig approval mode &gt; when folder is NOT trusted &gt; should override --approval-mode=yolo to DEFAULT" time="0.0034312">
            <system-err>
[WARN] Approval mode overridden to &quot;default&quot; because the current folder is not trusted.

            </system-err>
        </testcase>
        <testcase classname="src/config/config.test.ts" name="loadCliConfig approval mode &gt; when folder is NOT trusted &gt; should override --approval-mode=auto_edit to DEFAULT" time="0.0020484">
            <system-err>
[WARN] Approval mode overridden to &quot;default&quot; because the current folder is not trusted.

            </system-err>
        </testcase>
        <testcase classname="src/config/config.test.ts" name="loadCliConfig approval mode &gt; when folder is NOT trusted &gt; should override --yolo flag to DEFAULT" time="0.0020089">
            <system-err>
[WARN] Approval mode overridden to &quot;default&quot; because the current folder is not trusted.

            </system-err>
        </testcase>
        <testcase classname="src/config/config.test.ts" name="loadCliConfig approval mode &gt; when folder is NOT trusted &gt; should remain DEFAULT when --approval-mode=default" time="0.0020281">
        </testcase>
        <testcase classname="src/config/config.test.ts" name="loadCliConfig fileFiltering &gt; should pass &apos;disableFuzzySearch&apos; from settings to config when true" time="0.0038899">
        </testcase>
        <testcase classname="src/config/config.test.ts" name="loadCliConfig fileFiltering &gt; should pass &apos;disableFuzzySearch&apos; from settings to config when false" time="0.0215552">
        </testcase>
        <testcase classname="src/config/config.test.ts" name="loadCliConfig fileFiltering &gt; should pass &apos;respectGitIgnore&apos; from settings to config when true" time="0.0032673">
        </testcase>
        <testcase classname="src/config/config.test.ts" name="loadCliConfig fileFiltering &gt; should pass &apos;respectGitIgnore&apos; from settings to config when false" time="0.0031613">
        </testcase>
        <testcase classname="src/config/config.test.ts" name="loadCliConfig fileFiltering &gt; should pass &apos;respectGeminiIgnore&apos; from settings to config when true" time="0.0024414">
        </testcase>
        <testcase classname="src/config/config.test.ts" name="loadCliConfig fileFiltering &gt; should pass &apos;respectGeminiIgnore&apos; from settings to config when false" time="0.0020174">
        </testcase>
        <testcase classname="src/config/config.test.ts" name="loadCliConfig fileFiltering &gt; should pass &apos;enableRecursiveFileSearch&apos; from settings to config when true" time="0.0024066">
        </testcase>
        <testcase classname="src/config/config.test.ts" name="loadCliConfig fileFiltering &gt; should pass &apos;enableRecursiveFileSearch&apos; from settings to config when false" time="0.0029558">
        </testcase>
        <testcase classname="src/config/config.test.ts" name="Output format &gt; should default to TEXT" time="0.0280486">
        </testcase>
        <testcase classname="src/config/config.test.ts" name="Output format &gt; should use the format from settings" time="0.003426">
        </testcase>
        <testcase classname="src/config/config.test.ts" name="Output format &gt; should prioritize the format from argv" time="0.0020791">
        </testcase>
        <testcase classname="src/config/config.test.ts" name="Output format &gt; should error on invalid --output-format argument" time="0.0139349">
        </testcase>
        <testcase classname="src/config/config.test.ts" name="parseArguments with positional prompt &gt; should throw an error when both a positional prompt and the --prompt flag are used" time="0.0113271">
        </testcase>
        <testcase classname="src/config/config.test.ts" name="parseArguments with positional prompt &gt; should correctly parse a positional prompt" time="0.003152">
        </testcase>
        <testcase classname="src/config/config.test.ts" name="parseArguments with positional prompt &gt; should correctly parse a prompt from the --prompt flag" time="0.0042533">
        </testcase>
        <testcase classname="src/config/config.test.ts" name="Telemetry configuration via environment variables &gt; should prioritize GEMINI_TELEMETRY_ENABLED over settings" time="0.0028457">
        </testcase>
        <testcase classname="src/config/config.test.ts" name="Telemetry configuration via environment variables &gt; should prioritize GEMINI_TELEMETRY_TARGET over settings" time="0.0027131">
        </testcase>
        <testcase classname="src/config/config.test.ts" name="Telemetry configuration via environment variables &gt; should throw when GEMINI_TELEMETRY_TARGET is invalid" time="0.0029433">
        </testcase>
        <testcase classname="src/config/config.test.ts" name="Telemetry configuration via environment variables &gt; should prioritize GEMINI_TELEMETRY_OTLP_ENDPOINT over settings and default env var" time="0.0025444">
        </testcase>
        <testcase classname="src/config/config.test.ts" name="Telemetry configuration via environment variables &gt; should prioritize GEMINI_TELEMETRY_OTLP_PROTOCOL over settings" time="0.0033026">
        </testcase>
        <testcase classname="src/config/config.test.ts" name="Telemetry configuration via environment variables &gt; should prioritize GEMINI_TELEMETRY_LOG_PROMPTS over settings" time="0.0029528">
        </testcase>
        <testcase classname="src/config/config.test.ts" name="Telemetry configuration via environment variables &gt; should prioritize GEMINI_TELEMETRY_OUTFILE over settings" time="0.0025814">
        </testcase>
        <testcase classname="src/config/config.test.ts" name="Telemetry configuration via environment variables &gt; should prioritize GEMINI_TELEMETRY_USE_COLLECTOR over settings" time="0.002685">
        </testcase>
        <testcase classname="src/config/config.test.ts" name="Telemetry configuration via environment variables &gt; should use settings value when GEMINI_TELEMETRY_ENABLED is not set" time="0.0035931">
        </testcase>
        <testcase classname="src/config/config.test.ts" name="Telemetry configuration via environment variables &gt; should use settings value when GEMINI_TELEMETRY_TARGET is not set" time="0.0022849">
        </testcase>
        <testcase classname="src/config/config.test.ts" name="Telemetry configuration via environment variables &gt; should treat GEMINI_TELEMETRY_ENABLED=&apos;1&apos; as true" time="0.0029474">
        </testcase>
        <testcase classname="src/config/config.test.ts" name="Telemetry configuration via environment variables &gt; should treat GEMINI_TELEMETRY_ENABLED=&apos;0&apos; as false" time="0.0027773">
        </testcase>
        <testcase classname="src/config/config.test.ts" name="Telemetry configuration via environment variables &gt; should treat GEMINI_TELEMETRY_LOG_PROMPTS=&apos;1&apos; as true" time="0.0024726">
        </testcase>
        <testcase classname="src/config/config.test.ts" name="Telemetry configuration via environment variables &gt; should treat GEMINI_TELEMETRY_LOG_PROMPTS=&apos;false&apos; as false" time="0.0027883">
        </testcase>
    </testsuite>
    <testsuite name="src/config/extension.test.ts" timestamp="2025-09-23T13:52:09.521Z" hostname="WIN-33AANMPCPKN" tests="50" failures="0" errors="0" skipped="0" time="2.1875003">
        <testcase classname="src/config/extension.test.ts" name="extension tests &gt; loadExtensions &gt; should include extension path in loaded extension" time="0.0129287">
        </testcase>
        <testcase classname="src/config/extension.test.ts" name="extension tests &gt; loadExtensions &gt; should load context file path when GEMINI.md is present" time="0.007182">
        </testcase>
        <testcase classname="src/config/extension.test.ts" name="extension tests &gt; loadExtensions &gt; should load context file path from the extension config" time="0.0054824">
        </testcase>
        <testcase classname="src/config/extension.test.ts" name="extension tests &gt; loadExtensions &gt; should filter out disabled extensions" time="0.0423611">
        </testcase>
        <testcase classname="src/config/extension.test.ts" name="extension tests &gt; loadExtensions &gt; should hydrate variables" time="0.0053323">
        </testcase>
        <testcase classname="src/config/extension.test.ts" name="extension tests &gt; loadExtensions &gt; should load a linked extension correctly" time="0.2151558">
        </testcase>
        <testcase classname="src/config/extension.test.ts" name="extension tests &gt; loadExtensions &gt; should resolve environment variables in extension configuration" time="0.0091538">
        </testcase>
        <testcase classname="src/config/extension.test.ts" name="extension tests &gt; loadExtensions &gt; should handle missing environment variables gracefully" time="0.038516">
        </testcase>
        <testcase classname="src/config/extension.test.ts" name="extension tests &gt; loadExtensions &gt; should skip extensions with invalid JSON and log a warning" time="0.0101592">
        </testcase>
        <testcase classname="src/config/extension.test.ts" name="extension tests &gt; loadExtensions &gt; should skip extensions with missing name and log a warning" time="0.0068906">
        </testcase>
        <testcase classname="src/config/extension.test.ts" name="extension tests &gt; loadExtensions &gt; should filter trust out of mcp servers" time="0.005605">
        </testcase>
        <testcase classname="src/config/extension.test.ts" name="extension tests &gt; annotateActiveExtensions &gt; should mark all extensions as active if no enabled extensions are provided" time="0.0026234">
        </testcase>
        <testcase classname="src/config/extension.test.ts" name="extension tests &gt; annotateActiveExtensions &gt; should mark only the enabled extensions as active" time="0.0023828">
        </testcase>
        <testcase classname="src/config/extension.test.ts" name="extension tests &gt; annotateActiveExtensions &gt; should mark all extensions as inactive when &quot;none&quot; is provided" time="0.0044106">
        </testcase>
        <testcase classname="src/config/extension.test.ts" name="extension tests &gt; annotateActiveExtensions &gt; should handle case-insensitivity" time="0.0028318">
        </testcase>
        <testcase classname="src/config/extension.test.ts" name="extension tests &gt; annotateActiveExtensions &gt; should log an error for unknown extensions" time="0.0023029">
        </testcase>
        <testcase classname="src/config/extension.test.ts" name="extension tests &gt; annotateActiveExtensions &gt; autoUpdate &gt; should be false if autoUpdate is not set in install metadata" time="0.0019863">
        </testcase>
        <testcase classname="src/config/extension.test.ts" name="extension tests &gt; annotateActiveExtensions &gt; autoUpdate &gt; should be true if autoUpdate is true in install metadata" time="0.0021739">
        </testcase>
        <testcase classname="src/config/extension.test.ts" name="extension tests &gt; annotateActiveExtensions &gt; autoUpdate &gt; should respect the per-extension settings from install metadata" time="0.0343975">
        </testcase>
        <testcase classname="src/config/extension.test.ts" name="extension tests &gt; installExtension &gt; should install an extension from a local path" time="0.0430678">
        </testcase>
        <testcase classname="src/config/extension.test.ts" name="extension tests &gt; installExtension &gt; should throw an error if the extension already exists" time="0.0177388">
        </testcase>
        <testcase classname="src/config/extension.test.ts" name="extension tests &gt; installExtension &gt; should throw an error and cleanup if gemini-extension.json is missing" time="0.0887037">
        </testcase>
        <testcase classname="src/config/extension.test.ts" name="extension tests &gt; installExtension &gt; should throw an error for invalid JSON in gemini-extension.json" time="0.0586531">
        </testcase>
        <testcase classname="src/config/extension.test.ts" name="extension tests &gt; installExtension &gt; should throw an error for missing name in gemini-extension.json" time="0.0595219">
        </testcase>
        <testcase classname="src/config/extension.test.ts" name="extension tests &gt; installExtension &gt; should install an extension from a git URL" time="0.3884861">
        </testcase>
        <testcase classname="src/config/extension.test.ts" name="extension tests &gt; installExtension &gt; should install a linked extension" time="0.0122894">
        </testcase>
        <testcase classname="src/config/extension.test.ts" name="extension tests &gt; installExtension &gt; should log to clearcut on successful install" time="0.0120571">
        </testcase>
        <testcase classname="src/config/extension.test.ts" name="extension tests &gt; installExtension &gt; should show users information on their mcp server when installing" time="0.2313848">
            <system-out>
Extensions may introduce unexpected behavior.
Ensure you have investigated the extension source and trust the author.
This extension will run the following MCP servers:
  * test-server (local): node server.js
  * test-server-2 (remote): https://google.com

            </system-out>
        </testcase>
        <testcase classname="src/config/extension.test.ts" name="extension tests &gt; installExtension &gt; should continue installation if user accepts prompt for local extension with mcp servers" time="0.1686317">
            <system-out>
Extensions may introduce unexpected behavior.
Ensure you have investigated the extension source and trust the author.
This extension will run the following MCP servers:
  * test-server (local): node server.js

            </system-out>
        </testcase>
        <testcase classname="src/config/extension.test.ts" name="extension tests &gt; installExtension &gt; should cancel installation if user declines prompt for local extension with mcp servers" time="0.016254">
            <system-out>
Extensions may introduce unexpected behavior.
Ensure you have investigated the extension source and trust the author.
This extension will run the following MCP servers:
  * test-server (local): node server.js

            </system-out>
        </testcase>
        <testcase classname="src/config/extension.test.ts" name="extension tests &gt; installExtension &gt; should save the autoUpdate flag to the install metadata" time="0.0162365">
        </testcase>
        <testcase classname="src/config/extension.test.ts" name="extension tests &gt; installExtension &gt; should ignore consent flow if not required" time="0.0752857">
        </testcase>
        <testcase classname="src/config/extension.test.ts" name="extension tests &gt; uninstallExtension &gt; should uninstall an extension by name" time="0.0087548">
        </testcase>
        <testcase classname="src/config/extension.test.ts" name="extension tests &gt; uninstallExtension &gt; should uninstall an extension by name and retain existing extensions" time="0.0075995">
        </testcase>
        <testcase classname="src/config/extension.test.ts" name="extension tests &gt; uninstallExtension &gt; should throw an error if the extension does not exist" time="0.0037693">
        </testcase>
        <testcase classname="src/config/extension.test.ts" name="extension tests &gt; uninstallExtension &gt; should log uninstall event" time="0.0089982">
        </testcase>
        <testcase classname="src/config/extension.test.ts" name="extension tests &gt; uninstallExtension &gt; should uninstall an extension by its source URL" time="0.0189359">
        </testcase>
        <testcase classname="src/config/extension.test.ts" name="extension tests &gt; uninstallExtension &gt; should fail to uninstall by URL if an extension has no install metadata" time="0.0096397">
        </testcase>
        <testcase classname="src/config/extension.test.ts" name="extension tests &gt; performWorkspaceExtensionMigration &gt; folder trust &gt; refuses to install extensions from untrusted folders" time="0.0213363">
        </testcase>
        <testcase classname="src/config/extension.test.ts" name="extension tests &gt; performWorkspaceExtensionMigration &gt; folder trust &gt; does not copy extensions to the user dir" time="0.0112728">
        </testcase>
        <testcase classname="src/config/extension.test.ts" name="extension tests &gt; performWorkspaceExtensionMigration &gt; folder trust &gt; does not load any extensions in the workspace config" time="0.0090285">
        </testcase>
        <testcase classname="src/config/extension.test.ts" name="extension tests &gt; performWorkspaceExtensionMigration &gt; should install the extensions in the user directory" time="0.2829539">
        </testcase>
        <testcase classname="src/config/extension.test.ts" name="extension tests &gt; performWorkspaceExtensionMigration &gt; should return the names of failed installations" time="0.0657364">
        </testcase>
        <testcase classname="src/config/extension.test.ts" name="extension tests &gt; disableExtension &gt; should disable an extension at the user scope" time="0.0070929">
        </testcase>
        <testcase classname="src/config/extension.test.ts" name="extension tests &gt; disableExtension &gt; should disable an extension at the workspace scope" time="0.0243207">
        </testcase>
        <testcase classname="src/config/extension.test.ts" name="extension tests &gt; disableExtension &gt; should handle disabling the same extension twice" time="0.0372738">
        </testcase>
        <testcase classname="src/config/extension.test.ts" name="extension tests &gt; disableExtension &gt; should throw an error if you request system scope" time="0.0030927">
        </testcase>
        <testcase classname="src/config/extension.test.ts" name="extension tests &gt; enableExtension &gt; should enable an extension at the user scope" time="0.0105349">
        </testcase>
        <testcase classname="src/config/extension.test.ts" name="extension tests &gt; enableExtension &gt; should enable an extension at the workspace scope" time="0.0469207">
        </testcase>
        <testcase classname="src/config/extension.test.ts" name="extension tests &gt; enableExtension &gt; should log an enable event" time="0.0070579">
        </testcase>
    </testsuite>
    <testsuite name="src/config/keyBindings.test.ts" timestamp="2025-09-23T13:52:09.527Z" hostname="WIN-33AANMPCPKN" tests="3" failures="0" errors="0" skipped="0" time="0.0060078">
        <testcase classname="src/config/keyBindings.test.ts" name="keyBindings config &gt; defaultKeyBindings &gt; should have bindings for all commands" time="0.0023696">
        </testcase>
        <testcase classname="src/config/keyBindings.test.ts" name="keyBindings config &gt; defaultKeyBindings &gt; should have valid key binding structures" time="0.0023097">
        </testcase>
        <testcase classname="src/config/keyBindings.test.ts" name="keyBindings config &gt; defaultKeyBindings &gt; should export all required types" time="0.0001631">
        </testcase>
    </testsuite>
    <testsuite name="src/config/policy-engine.integration.test.ts" timestamp="2025-09-23T13:52:09.528Z" hostname="WIN-33AANMPCPKN" tests="12" failures="0" errors="0" skipped="0" time="0.0061184">
        <testcase classname="src/config/policy-engine.integration.test.ts" name="Policy Engine Integration Tests &gt; Policy configuration produces valid PolicyEngine config &gt; should create a working PolicyEngine from basic settings" time="0.0017077">
        </testcase>
        <testcase classname="src/config/policy-engine.integration.test.ts" name="Policy Engine Integration Tests &gt; Policy configuration produces valid PolicyEngine config &gt; should handle MCP server wildcard patterns correctly" time="0.0003106">
        </testcase>
        <testcase classname="src/config/policy-engine.integration.test.ts" name="Policy Engine Integration Tests &gt; Policy configuration produces valid PolicyEngine config &gt; should correctly prioritize specific tool rules over MCP server wildcards" time="0.0001352">
        </testcase>
        <testcase classname="src/config/policy-engine.integration.test.ts" name="Policy Engine Integration Tests &gt; Policy configuration produces valid PolicyEngine config &gt; should handle complex mixed configurations" time="0.0005838">
        </testcase>
        <testcase classname="src/config/policy-engine.integration.test.ts" name="Policy Engine Integration Tests &gt; Policy configuration produces valid PolicyEngine config &gt; should handle YOLO mode correctly" time="0.0002809">
        </testcase>
        <testcase classname="src/config/policy-engine.integration.test.ts" name="Policy Engine Integration Tests &gt; Policy configuration produces valid PolicyEngine config &gt; should handle AUTO_EDIT mode correctly" time="0.0001582">
        </testcase>
        <testcase classname="src/config/policy-engine.integration.test.ts" name="Policy Engine Integration Tests &gt; Policy configuration produces valid PolicyEngine config &gt; should verify priority ordering works correctly in practice" time="0.0004436">
        </testcase>
        <testcase classname="src/config/policy-engine.integration.test.ts" name="Policy Engine Integration Tests &gt; Policy configuration produces valid PolicyEngine config &gt; should handle edge case: MCP server with both trust and exclusion" time="0.0001244">
        </testcase>
        <testcase classname="src/config/policy-engine.integration.test.ts" name="Policy Engine Integration Tests &gt; Policy configuration produces valid PolicyEngine config &gt; should handle edge case: specific tool allowed but server excluded" time="0.0001216">
        </testcase>
        <testcase classname="src/config/policy-engine.integration.test.ts" name="Policy Engine Integration Tests &gt; Policy configuration produces valid PolicyEngine config &gt; should verify non-interactive mode transformation" time="0.0001115">
        </testcase>
        <testcase classname="src/config/policy-engine.integration.test.ts" name="Policy Engine Integration Tests &gt; Policy configuration produces valid PolicyEngine config &gt; should handle empty settings gracefully" time="0.0001158">
        </testcase>
        <testcase classname="src/config/policy-engine.integration.test.ts" name="Policy Engine Integration Tests &gt; Policy configuration produces valid PolicyEngine config &gt; should verify rules are created with correct priorities" time="0.0005649">
        </testcase>
    </testsuite>
    <testsuite name="src/config/policy.test.ts" timestamp="2025-09-23T13:52:09.530Z" hostname="WIN-33AANMPCPKN" tests="19" failures="0" errors="0" skipped="0" time="0.0075702">
        <testcase classname="src/config/policy.test.ts" name="createPolicyEngineConfig &gt; should return ASK_USER for all tools by default" time="0.0020854">
        </testcase>
        <testcase classname="src/config/policy.test.ts" name="createPolicyEngineConfig &gt; should allow tools in tools.allowed" time="0.0001989">
        </testcase>
        <testcase classname="src/config/policy.test.ts" name="createPolicyEngineConfig &gt; should deny tools in tools.exclude" time="0.000126">
        </testcase>
        <testcase classname="src/config/policy.test.ts" name="createPolicyEngineConfig &gt; should allow tools from allowed MCP servers" time="0.0001251">
        </testcase>
        <testcase classname="src/config/policy.test.ts" name="createPolicyEngineConfig &gt; should deny tools from excluded MCP servers" time="0.0001114">
        </testcase>
        <testcase classname="src/config/policy.test.ts" name="createPolicyEngineConfig &gt; should allow tools from trusted MCP servers" time="0.0001834">
        </testcase>
        <testcase classname="src/config/policy.test.ts" name="createPolicyEngineConfig &gt; should handle multiple MCP server configurations together" time="0.0002654">
        </testcase>
        <testcase classname="src/config/policy.test.ts" name="createPolicyEngineConfig &gt; should allow read-only tools if autoAccept is true" time="0.0001151">
        </testcase>
        <testcase classname="src/config/policy.test.ts" name="createPolicyEngineConfig &gt; should allow all tools in YOLO mode" time="0.0000832">
        </testcase>
        <testcase classname="src/config/policy.test.ts" name="createPolicyEngineConfig &gt; should allow edit tool in AUTO_EDIT mode" time="0.0003013">
        </testcase>
        <testcase classname="src/config/policy.test.ts" name="createPolicyEngineConfig &gt; should prioritize exclude over allow" time="0.0001988">
        </testcase>
        <testcase classname="src/config/policy.test.ts" name="createPolicyEngineConfig &gt; should prioritize specific tool allows over MCP server excludes" time="0.0001651">
        </testcase>
        <testcase classname="src/config/policy.test.ts" name="createPolicyEngineConfig &gt; should prioritize specific tool excludes over MCP server allows" time="0.000147">
        </testcase>
        <testcase classname="src/config/policy.test.ts" name="createPolicyEngineConfig &gt; should handle complex priority scenarios correctly" time="0.0002625">
        </testcase>
        <testcase classname="src/config/policy.test.ts" name="createPolicyEngineConfig &gt; should handle MCP servers with undefined trust property" time="0.0001224">
        </testcase>
        <testcase classname="src/config/policy.test.ts" name="createPolicyEngineConfig &gt; should not add write tool rules in YOLO mode" time="0.000949">
        </testcase>
        <testcase classname="src/config/policy.test.ts" name="createPolicyEngineConfig &gt; should handle combination of trusted server and excluded server for same name" time="0.000275">
        </testcase>
        <testcase classname="src/config/policy.test.ts" name="createPolicyEngineConfig &gt; should create all read-only tool rules when autoAccept is enabled" time="0.000259">
        </testcase>
        <testcase classname="src/config/policy.test.ts" name="createPolicyEngineConfig &gt; should handle all approval modes correctly" time="0.0002563">
        </testcase>
    </testsuite>
    <testsuite name="src/config/settings.test.ts" timestamp="2025-09-23T13:52:09.532Z" hostname="WIN-33AANMPCPKN" tests="77" failures="0" errors="0" skipped="0" time="0.0655173">
        <testcase classname="src/config/settings.test.ts" name="Settings Loading and Merging &gt; loadSettings &gt; should load empty settings if no files exist" time="0.004188">
        </testcase>
        <testcase classname="src/config/settings.test.ts" name="Settings Loading and Merging &gt; loadSettings &gt; should load system settings if only system file exists" time="0.0023764">
        </testcase>
        <testcase classname="src/config/settings.test.ts" name="Settings Loading and Merging &gt; loadSettings &gt; should load user settings if only user file exists" time="0.0009854">
        </testcase>
        <testcase classname="src/config/settings.test.ts" name="Settings Loading and Merging &gt; loadSettings &gt; should load workspace settings if only workspace file exists" time="0.0007881">
        </testcase>
        <testcase classname="src/config/settings.test.ts" name="Settings Loading and Merging &gt; loadSettings &gt; should merge system, user and workspace settings, with system taking precedence over workspace, and workspace over user" time="0.0011193">
        </testcase>
        <testcase classname="src/config/settings.test.ts" name="Settings Loading and Merging &gt; loadSettings &gt; should correctly migrate a complex legacy (v1) settings file" time="0.0030971">
            <system-err>
Error migrating settings file on disk: ENOENT: no such file or directory, rename &apos;E:\mock\home\user\.gemini\settings.json&apos; -&gt; &apos;E:\mock\home\user\.gemini\settings.json.orig&apos;

            </system-err>
        </testcase>
        <testcase classname="src/config/settings.test.ts" name="Settings Loading and Merging &gt; loadSettings &gt; should rewrite allowedTools to tools.allowed during migration" time="0.0012123">
            <system-err>
Error migrating settings file on disk: ENOENT: no such file or directory, rename &apos;E:\mock\home\user\.gemini\settings.json&apos; -&gt; &apos;E:\mock\home\user\.gemini\settings.json.orig&apos;

            </system-err>
        </testcase>
        <testcase classname="src/config/settings.test.ts" name="Settings Loading and Merging &gt; loadSettings &gt; should correctly merge and migrate legacy array properties from multiple scopes" time="0.0026092">
            <system-err>
Error migrating settings file on disk: ENOENT: no such file or directory, rename &apos;E:\mock\home\user\.gemini\settings.json&apos; -&gt; &apos;E:\mock\home\user\.gemini\settings.json.orig&apos;
Error migrating settings file on disk: ENOENT: no such file or directory, rename &apos;E:\mock\workspace\.gemini\settings.json&apos; -&gt; &apos;E:\mock\workspace\.gemini\settings.json.orig&apos;

            </system-err>
        </testcase>
        <testcase classname="src/config/settings.test.ts" name="Settings Loading and Merging &gt; loadSettings &gt; should merge all settings files with the correct precedence" time="0.0012941">
        </testcase>
        <testcase classname="src/config/settings.test.ts" name="Settings Loading and Merging &gt; loadSettings &gt; should use folderTrust from workspace settings when trusted" time="0.0007904">
        </testcase>
        <testcase classname="src/config/settings.test.ts" name="Settings Loading and Merging &gt; loadSettings &gt; should use system folderTrust over user setting" time="0.0004374">
        </testcase>
        <testcase classname="src/config/settings.test.ts" name="Settings Loading and Merging &gt; loadSettings &gt; should handle contextFileName correctly when only in user settings" time="0.0004045">
        </testcase>
        <testcase classname="src/config/settings.test.ts" name="Settings Loading and Merging &gt; loadSettings &gt; should handle contextFileName correctly when only in workspace settings" time="0.0003557">
        </testcase>
        <testcase classname="src/config/settings.test.ts" name="Settings Loading and Merging &gt; loadSettings &gt; should handle excludedProjectEnvVars correctly when only in user settings" time="0.0004996">
        </testcase>
        <testcase classname="src/config/settings.test.ts" name="Settings Loading and Merging &gt; loadSettings &gt; should handle excludedProjectEnvVars correctly when only in workspace settings" time="0.0003918">
        </testcase>
        <testcase classname="src/config/settings.test.ts" name="Settings Loading and Merging &gt; loadSettings &gt; should merge excludedProjectEnvVars with workspace taking precedence over user" time="0.0005466">
        </testcase>
        <testcase classname="src/config/settings.test.ts" name="Settings Loading and Merging &gt; loadSettings &gt; should default contextFileName to undefined if not in any settings file" time="0.0004253">
        </testcase>
        <testcase classname="src/config/settings.test.ts" name="Settings Loading and Merging &gt; loadSettings &gt; should load telemetry setting from user settings" time="0.0003781">
        </testcase>
        <testcase classname="src/config/settings.test.ts" name="Settings Loading and Merging &gt; loadSettings &gt; should load telemetry setting from workspace settings" time="0.0004853">
        </testcase>
        <testcase classname="src/config/settings.test.ts" name="Settings Loading and Merging &gt; loadSettings &gt; should prioritize workspace telemetry setting over user setting" time="0.0003639">
        </testcase>
        <testcase classname="src/config/settings.test.ts" name="Settings Loading and Merging &gt; loadSettings &gt; should have telemetry as undefined if not in any settings file" time="0.0003217">
        </testcase>
        <testcase classname="src/config/settings.test.ts" name="Settings Loading and Merging &gt; loadSettings &gt; should merge MCP servers correctly, with workspace taking precedence" time="0.0016253">
        </testcase>
        <testcase classname="src/config/settings.test.ts" name="Settings Loading and Merging &gt; loadSettings &gt; should handle MCP servers when only in user settings" time="0.0004145">
        </testcase>
        <testcase classname="src/config/settings.test.ts" name="Settings Loading and Merging &gt; loadSettings &gt; should handle MCP servers when only in workspace settings" time="0.0003872">
        </testcase>
        <testcase classname="src/config/settings.test.ts" name="Settings Loading and Merging &gt; loadSettings &gt; should have mcpServers as undefined if not in any settings file" time="0.000255">
        </testcase>
        <testcase classname="src/config/settings.test.ts" name="Settings Loading and Merging &gt; loadSettings &gt; should merge MCP servers from system, user, and workspace with system taking precedence" time="0.0005389">
        </testcase>
        <testcase classname="src/config/settings.test.ts" name="Settings Loading and Merging &gt; loadSettings &gt; should merge mcp allowed/excluded lists with system taking precedence over workspace" time="0.0004373">
        </testcase>
        <testcase classname="src/config/settings.test.ts" name="Settings Loading and Merging &gt; loadSettings &gt; should merge chatCompression settings, with workspace taking precedence" time="0.0028606">
            <system-out>
{ contextPercentageThreshold: [33m0.5[39m }

            </system-out>
        </testcase>
        <testcase classname="src/config/settings.test.ts" name="Settings Loading and Merging &gt; loadSettings &gt; should merge output format settings, with workspace taking precedence" time="0.0004367">
        </testcase>
        <testcase classname="src/config/settings.test.ts" name="Settings Loading and Merging &gt; loadSettings &gt; should handle chatCompression when only in user settings" time="0.00207">
        </testcase>
        <testcase classname="src/config/settings.test.ts" name="Settings Loading and Merging &gt; loadSettings &gt; should have model as undefined if not in any settings file" time="0.0003166">
        </testcase>
        <testcase classname="src/config/settings.test.ts" name="Settings Loading and Merging &gt; loadSettings &gt; should ignore chatCompression if contextPercentageThreshold is invalid" time="0.0007268">
        </testcase>
        <testcase classname="src/config/settings.test.ts" name="Settings Loading and Merging &gt; loadSettings &gt; should deep merge chatCompression settings" time="0.0004058">
        </testcase>
        <testcase classname="src/config/settings.test.ts" name="Settings Loading and Merging &gt; loadSettings &gt; should merge includeDirectories from all scopes" time="0.0004808">
        </testcase>
        <testcase classname="src/config/settings.test.ts" name="Settings Loading and Merging &gt; loadSettings &gt; should handle JSON parsing errors gracefully" time="0.0014868">
        </testcase>
        <testcase classname="src/config/settings.test.ts" name="Settings Loading and Merging &gt; loadSettings &gt; should resolve environment variables in user settings" time="0.0006484">
        </testcase>
        <testcase classname="src/config/settings.test.ts" name="Settings Loading and Merging &gt; loadSettings &gt; should resolve environment variables in workspace settings" time="0.0005214">
        </testcase>
        <testcase classname="src/config/settings.test.ts" name="Settings Loading and Merging &gt; loadSettings &gt; should correctly resolve and merge env variables from different scopes" time="0.0009188">
        </testcase>
        <testcase classname="src/config/settings.test.ts" name="Settings Loading and Merging &gt; loadSettings &gt; should correctly merge dnsResolutionOrder with workspace taking precedence" time="0.0004327">
        </testcase>
        <testcase classname="src/config/settings.test.ts" name="Settings Loading and Merging &gt; loadSettings &gt; should use user dnsResolutionOrder if workspace is not defined" time="0.0045543">
        </testcase>
        <testcase classname="src/config/settings.test.ts" name="Settings Loading and Merging &gt; loadSettings &gt; should leave unresolved environment variables as is" time="0.000483">
        </testcase>
        <testcase classname="src/config/settings.test.ts" name="Settings Loading and Merging &gt; loadSettings &gt; should resolve multiple environment variables in a single string" time="0.000448">
        </testcase>
        <testcase classname="src/config/settings.test.ts" name="Settings Loading and Merging &gt; loadSettings &gt; should resolve environment variables in arrays" time="0.0004922">
        </testcase>
        <testcase classname="src/config/settings.test.ts" name="Settings Loading and Merging &gt; loadSettings &gt; should correctly pass through null, boolean, and number types, and handle undefined properties" time="0.0007872">
        </testcase>
        <testcase classname="src/config/settings.test.ts" name="Settings Loading and Merging &gt; loadSettings &gt; should resolve multiple concatenated environment variables in a single string value" time="0.0003994">
        </testcase>
        <testcase classname="src/config/settings.test.ts" name="Settings Loading and Merging &gt; loadSettings &gt; when GEMINI_CLI_SYSTEM_SETTINGS_PATH is set &gt; should load system settings from the path specified in the environment variable" time="0.0015376">
        </testcase>
        <testcase classname="src/config/settings.test.ts" name="Settings Loading and Merging &gt; excludedProjectEnvVars integration &gt; should exclude DEBUG and DEBUG_MODE from project .env files by default" time="0.0007063">
        </testcase>
        <testcase classname="src/config/settings.test.ts" name="Settings Loading and Merging &gt; excludedProjectEnvVars integration &gt; should respect custom excludedProjectEnvVars from user settings" time="0.0010112">
        </testcase>
        <testcase classname="src/config/settings.test.ts" name="Settings Loading and Merging &gt; excludedProjectEnvVars integration &gt; should merge excludedProjectEnvVars with workspace taking precedence" time="0.0005188">
        </testcase>
        <testcase classname="src/config/settings.test.ts" name="Settings Loading and Merging &gt; with workspace trust &gt; should merge workspace settings when workspace is trusted" time="0.0004591">
        </testcase>
        <testcase classname="src/config/settings.test.ts" name="Settings Loading and Merging &gt; with workspace trust &gt; should NOT merge workspace settings when workspace is not trusted" time="0.0004011">
        </testcase>
        <testcase classname="src/config/settings.test.ts" name="Settings Loading and Merging &gt; migrateSettingsToV1 &gt; should handle an empty object" time="0.0006008">
        </testcase>
        <testcase classname="src/config/settings.test.ts" name="Settings Loading and Merging &gt; migrateSettingsToV1 &gt; should migrate a simple v2 settings object to v1" time="0.0003268">
        </testcase>
        <testcase classname="src/config/settings.test.ts" name="Settings Loading and Merging &gt; migrateSettingsToV1 &gt; should handle nested properties correctly" time="0.0002952">
        </testcase>
        <testcase classname="src/config/settings.test.ts" name="Settings Loading and Merging &gt; migrateSettingsToV1 &gt; should preserve mcpServers at the top level" time="0.0002495">
        </testcase>
        <testcase classname="src/config/settings.test.ts" name="Settings Loading and Merging &gt; migrateSettingsToV1 &gt; should carry over unrecognized top-level properties" time="0.0002431">
        </testcase>
        <testcase classname="src/config/settings.test.ts" name="Settings Loading and Merging &gt; migrateSettingsToV1 &gt; should handle a complex object with mixed properties" time="0.0003276">
        </testcase>
        <testcase classname="src/config/settings.test.ts" name="Settings Loading and Merging &gt; migrateSettingsToV1 &gt; should not migrate a v1 settings object" time="0.0002159">
        </testcase>
        <testcase classname="src/config/settings.test.ts" name="Settings Loading and Merging &gt; migrateSettingsToV1 &gt; should migrate a full v2 settings object to v1" time="0.0004093">
        </testcase>
        <testcase classname="src/config/settings.test.ts" name="Settings Loading and Merging &gt; migrateSettingsToV1 &gt; should handle partial v2 settings" time="0.0002243">
        </testcase>
        <testcase classname="src/config/settings.test.ts" name="Settings Loading and Merging &gt; migrateSettingsToV1 &gt; should handle settings with different data types" time="0.0002456">
        </testcase>
        <testcase classname="src/config/settings.test.ts" name="Settings Loading and Merging &gt; migrateSettingsToV1 &gt; should preserve unrecognized top-level keys" time="0.0002341">
        </testcase>
        <testcase classname="src/config/settings.test.ts" name="Settings Loading and Merging &gt; migrateSettingsToV1 &gt; should handle an empty v2 settings object" time="0.0001862">
        </testcase>
        <testcase classname="src/config/settings.test.ts" name="Settings Loading and Merging &gt; migrateSettingsToV1 &gt; should correctly handle mcpServers at the top level" time="0.0002398">
        </testcase>
        <testcase classname="src/config/settings.test.ts" name="Settings Loading and Merging &gt; migrateSettingsToV1 &gt; should correctly migrate customWittyPhrases" time="0.0002281">
        </testcase>
        <testcase classname="src/config/settings.test.ts" name="Settings Loading and Merging &gt; loadEnvironment &gt; sets environment variables from .env files" time="0.0006923">
        </testcase>
        <testcase classname="src/config/settings.test.ts" name="Settings Loading and Merging &gt; loadEnvironment &gt; does not load env files from untrusted spaces" time="0.0003356">
        </testcase>
        <testcase classname="src/config/settings.test.ts" name="Settings Loading and Merging &gt; needsMigration &gt; should return false for an empty object" time="0.0001362">
        </testcase>
        <testcase classname="src/config/settings.test.ts" name="Settings Loading and Merging &gt; needsMigration &gt; should return false for settings that are already in V2 format" time="0.0001353">
        </testcase>
        <testcase classname="src/config/settings.test.ts" name="Settings Loading and Merging &gt; needsMigration &gt; should return true for settings with a V1 key that needs to be moved" time="0.0001263">
        </testcase>
        <testcase classname="src/config/settings.test.ts" name="Settings Loading and Merging &gt; needsMigration &gt; should return true for settings with a mix of V1 and V2 keys" time="0.000128">
        </testcase>
        <testcase classname="src/config/settings.test.ts" name="Settings Loading and Merging &gt; needsMigration &gt; should return false for settings with only V1 keys that are the same in V2" time="0.0001325">
        </testcase>
        <testcase classname="src/config/settings.test.ts" name="Settings Loading and Merging &gt; needsMigration &gt; should return true for settings with a mix of V1 keys that are the same in V2 and V1 keys that need moving" time="0.0003373">
        </testcase>
        <testcase classname="src/config/settings.test.ts" name="Settings Loading and Merging &gt; needsMigration &gt; should return false for settings with unrecognized keys" time="0.0002326">
        </testcase>
        <testcase classname="src/config/settings.test.ts" name="Settings Loading and Merging &gt; needsMigration &gt; should return false for settings with v2 keys and unrecognized keys" time="0.0002089">
        </testcase>
        <testcase classname="src/config/settings.test.ts" name="Settings Loading and Merging &gt; migrateDeprecatedSettings &gt; should migrate disabled extensions from user and workspace settings" time="0.0058307">
            <system-out>
Migrating deprecated extensions.disabled settings from User settings...
Migrating deprecated extensions.disabled settings from Workspace settings...

            </system-out>
        </testcase>
        <testcase classname="src/config/settings.test.ts" name="Settings Loading and Merging &gt; migrateDeprecatedSettings &gt; should not do anything if there are no deprecated settings" time="0.0008226">
        </testcase>
    </testsuite>
    <testsuite name="src/config/settingsSchema.test.ts" timestamp="2025-09-23T13:52:09.541Z" hostname="WIN-33AANMPCPKN" tests="15" failures="0" errors="0" skipped="0" time="0.0111953">
        <testcase classname="src/config/settingsSchema.test.ts" name="SettingsSchema &gt; getSettingsSchema &gt; should contain all expected top-level settings" time="0.001367">
        </testcase>
        <testcase classname="src/config/settingsSchema.test.ts" name="SettingsSchema &gt; getSettingsSchema &gt; should have correct structure for each setting" time="0.0030112">
        </testcase>
        <testcase classname="src/config/settingsSchema.test.ts" name="SettingsSchema &gt; getSettingsSchema &gt; should have correct nested setting structure" time="0.0007885">
        </testcase>
        <testcase classname="src/config/settingsSchema.test.ts" name="SettingsSchema &gt; getSettingsSchema &gt; should have accessibility nested properties" time="0.0001544">
        </testcase>
        <testcase classname="src/config/settingsSchema.test.ts" name="SettingsSchema &gt; getSettingsSchema &gt; should have checkpointing nested properties" time="0.000095">
        </testcase>
        <testcase classname="src/config/settingsSchema.test.ts" name="SettingsSchema &gt; getSettingsSchema &gt; should have fileFiltering nested properties" time="0.0001031">
        </testcase>
        <testcase classname="src/config/settingsSchema.test.ts" name="SettingsSchema &gt; getSettingsSchema &gt; should have unique categories" time="0.0011">
        </testcase>
        <testcase classname="src/config/settingsSchema.test.ts" name="SettingsSchema &gt; getSettingsSchema &gt; should have consistent default values for boolean settings" time="0.0012235">
        </testcase>
        <testcase classname="src/config/settingsSchema.test.ts" name="SettingsSchema &gt; getSettingsSchema &gt; should have showInDialog property configured" time="0.0005462">
        </testcase>
        <testcase classname="src/config/settingsSchema.test.ts" name="SettingsSchema &gt; getSettingsSchema &gt; should infer Settings type correctly" time="0.0008645">
        </testcase>
        <testcase classname="src/config/settingsSchema.test.ts" name="SettingsSchema &gt; getSettingsSchema &gt; should have includeDirectories setting in schema" time="0.0001547">
        </testcase>
        <testcase classname="src/config/settingsSchema.test.ts" name="SettingsSchema &gt; getSettingsSchema &gt; should have loadMemoryFromIncludeDirectories setting in schema" time="0.0001211">
        </testcase>
        <testcase classname="src/config/settingsSchema.test.ts" name="SettingsSchema &gt; getSettingsSchema &gt; should have folderTrustFeature setting in schema" time="0.0001307">
        </testcase>
        <testcase classname="src/config/settingsSchema.test.ts" name="SettingsSchema &gt; getSettingsSchema &gt; should have debugKeystrokeLogging setting in schema" time="0.0001557">
        </testcase>
        <testcase classname="src/config/settingsSchema.test.ts" name="SettingsSchema &gt; getSettingsSchema &gt; should have useModelRouter setting in schema" time="0.0001048">
        </testcase>
    </testsuite>
    <testsuite name="src/config/trustedFolders.test.ts" timestamp="2025-09-23T13:52:09.543Z" hostname="WIN-33AANMPCPKN" tests="21" failures="0" errors="0" skipped="0" time="0.0171017">
        <testcase classname="src/config/trustedFolders.test.ts" name="Trusted Folders Loading &gt; should load empty rules if no files exist" time="0.0034067">
        </testcase>
        <testcase classname="src/config/trustedFolders.test.ts" name="Trusted Folders Loading &gt; isPathTrusted &gt; provides a method to determine if a path is trusted" time="0.0012736">
        </testcase>
        <testcase classname="src/config/trustedFolders.test.ts" name="Trusted Folders Loading &gt; should load user rules if only user file exists" time="0.000403">
        </testcase>
        <testcase classname="src/config/trustedFolders.test.ts" name="Trusted Folders Loading &gt; should handle JSON parsing errors gracefully" time="0.0005802">
        </testcase>
        <testcase classname="src/config/trustedFolders.test.ts" name="Trusted Folders Loading &gt; should use GEMINI_CLI_TRUSTED_FOLDERS_PATH env var if set" time="0.0005601">
        </testcase>
        <testcase classname="src/config/trustedFolders.test.ts" name="Trusted Folders Loading &gt; setValue should update the user config and save it" time="0.0013582">
        </testcase>
        <testcase classname="src/config/trustedFolders.test.ts" name="isWorkspaceTrusted &gt; should throw a fatal error if the config is malformed" time="0.0025527">
        </testcase>
        <testcase classname="src/config/trustedFolders.test.ts" name="isWorkspaceTrusted &gt; should throw a fatal error if the config is not a JSON object" time="0.0007922">
        </testcase>
        <testcase classname="src/config/trustedFolders.test.ts" name="isWorkspaceTrusted &gt; should return true for a directly trusted folder" time="0.0004471">
        </testcase>
        <testcase classname="src/config/trustedFolders.test.ts" name="isWorkspaceTrusted &gt; should return true for a child of a trusted folder" time="0.0003086">
        </testcase>
        <testcase classname="src/config/trustedFolders.test.ts" name="isWorkspaceTrusted &gt; should return true for a child of a trusted parent folder" time="0.0003749">
        </testcase>
        <testcase classname="src/config/trustedFolders.test.ts" name="isWorkspaceTrusted &gt; should return false for a directly untrusted folder" time="0.0002871">
        </testcase>
        <testcase classname="src/config/trustedFolders.test.ts" name="isWorkspaceTrusted &gt; should return undefined for a child of an untrusted folder" time="0.0002948">
        </testcase>
        <testcase classname="src/config/trustedFolders.test.ts" name="isWorkspaceTrusted &gt; should return undefined when no rules match" time="0.0002816">
        </testcase>
        <testcase classname="src/config/trustedFolders.test.ts" name="isWorkspaceTrusted &gt; should prioritize trust over distrust" time="0.0004474">
        </testcase>
        <testcase classname="src/config/trustedFolders.test.ts" name="isWorkspaceTrusted &gt; should handle path normalization" time="0.0003271">
        </testcase>
        <testcase classname="src/config/trustedFolders.test.ts" name="isWorkspaceTrusted with IDE override &gt; should return true when ideTrust is true, ignoring config" time="0.0004154">
        </testcase>
        <testcase classname="src/config/trustedFolders.test.ts" name="isWorkspaceTrusted with IDE override &gt; should return false when ideTrust is false, ignoring config" time="0.0001965">
        </testcase>
        <testcase classname="src/config/trustedFolders.test.ts" name="isWorkspaceTrusted with IDE override &gt; should fall back to config when ideTrust is undefined" time="0.0002311">
        </testcase>
        <testcase classname="src/config/trustedFolders.test.ts" name="isWorkspaceTrusted with IDE override &gt; should always return true if folderTrust setting is disabled" time="0.0001485">
        </testcase>
        <testcase classname="src/config/trustedFolders.test.ts" name="Trusted Folders Caching &gt; should cache the loaded folders object" time="0.000402">
        </testcase>
    </testsuite>
    <testsuite name="src/services/BuiltinCommandLoader.test.ts" timestamp="2025-09-23T13:52:09.546Z" hostname="WIN-33AANMPCPKN" tests="6" failures="0" errors="0" skipped="0" time="0.0077886">
        <testcase classname="src/services/BuiltinCommandLoader.test.ts" name="BuiltinCommandLoader &gt; should correctly pass the config object to restore command factory" time="0.0042115">
        </testcase>
        <testcase classname="src/services/BuiltinCommandLoader.test.ts" name="BuiltinCommandLoader &gt; should filter out null command definitions returned by factories" time="0.0004089">
        </testcase>
        <testcase classname="src/services/BuiltinCommandLoader.test.ts" name="BuiltinCommandLoader &gt; should handle a null config gracefully when calling factories" time="0.000294">
        </testcase>
        <testcase classname="src/services/BuiltinCommandLoader.test.ts" name="BuiltinCommandLoader &gt; should return a list of all loaded commands" time="0.0004159">
        </testcase>
        <testcase classname="src/services/BuiltinCommandLoader.test.ts" name="BuiltinCommandLoader &gt; should include permissions command when folder trust is enabled" time="0.0003941">
        </testcase>
        <testcase classname="src/services/BuiltinCommandLoader.test.ts" name="BuiltinCommandLoader &gt; should exclude permissions command when folder trust is disabled" time="0.0003188">
        </testcase>
    </testsuite>
    <testsuite name="src/services/CommandService.test.ts" timestamp="2025-09-23T13:52:09.547Z" hostname="WIN-33AANMPCPKN" tests="11" failures="0" errors="0" skipped="0" time="0.0143762">
        <testcase classname="src/services/CommandService.test.ts" name="CommandService &gt; should load commands from a single loader" time="0.0032508">
        </testcase>
        <testcase classname="src/services/CommandService.test.ts" name="CommandService &gt; should aggregate commands from multiple loaders" time="0.0004514">
        </testcase>
        <testcase classname="src/services/CommandService.test.ts" name="CommandService &gt; should override commands from earlier loaders with those from later loaders" time="0.0007743">
        </testcase>
        <testcase classname="src/services/CommandService.test.ts" name="CommandService &gt; should handle loaders that return an empty array of commands gracefully" time="0.0005728">
        </testcase>
        <testcase classname="src/services/CommandService.test.ts" name="CommandService &gt; should load commands from successful loaders even if one fails" time="0.0009708">
        </testcase>
        <testcase classname="src/services/CommandService.test.ts" name="CommandService &gt; getCommands should return a readonly array that cannot be mutated" time="0.0007491">
        </testcase>
        <testcase classname="src/services/CommandService.test.ts" name="CommandService &gt; should pass the abort signal to all loaders" time="0.001415">
        </testcase>
        <testcase classname="src/services/CommandService.test.ts" name="CommandService &gt; should rename extension commands when they conflict" time="0.0005771">
        </testcase>
        <testcase classname="src/services/CommandService.test.ts" name="CommandService &gt; should handle user/project command override correctly" time="0.000427">
        </testcase>
        <testcase classname="src/services/CommandService.test.ts" name="CommandService &gt; should handle secondary conflicts when renaming extension commands" time="0.0030217">
        </testcase>
        <testcase classname="src/services/CommandService.test.ts" name="CommandService &gt; should handle multiple secondary conflicts with incrementing suffixes" time="0.0009564">
        </testcase>
    </testsuite>
    <testsuite name="src/services/FileCommandLoader.test.ts" timestamp="2025-09-23T13:52:09.548Z" hostname="WIN-33AANMPCPKN" tests="38" failures="0" errors="0" skipped="2" time="0.1283782">
        <testcase classname="src/services/FileCommandLoader.test.ts" name="FileCommandLoader &gt; loads a single command from a file" time="0.0224955">
        </testcase>
        <testcase classname="src/services/FileCommandLoader.test.ts" name="FileCommandLoader &gt; loads commands from a symlinked directory" time="0">
            <skipped/>
        </testcase>
        <testcase classname="src/services/FileCommandLoader.test.ts" name="FileCommandLoader &gt; loads commands from a symlinked subdirectory" time="0">
            <skipped/>
        </testcase>
        <testcase classname="src/services/FileCommandLoader.test.ts" name="FileCommandLoader &gt; loads multiple commands" time="0.0025314">
        </testcase>
        <testcase classname="src/services/FileCommandLoader.test.ts" name="FileCommandLoader &gt; creates deeply nested namespaces correctly" time="0.0025917">
        </testcase>
        <testcase classname="src/services/FileCommandLoader.test.ts" name="FileCommandLoader &gt; creates namespaces from nested directories" time="0.0021408">
        </testcase>
        <testcase classname="src/services/FileCommandLoader.test.ts" name="FileCommandLoader &gt; returns both user and project commands in order" time="0.0070763">
        </testcase>
        <testcase classname="src/services/FileCommandLoader.test.ts" name="FileCommandLoader &gt; ignores files with TOML syntax errors" time="0.0041486">
            <system-err>
[FileCommandLoader] Failed to parse TOML file C:\Users\alroh\.gemini\commands\invalid.toml: Invalid character, expected &quot;=&quot; at row 1, col 7, pos 6:
1&gt; this is not valid toml
         ^



            </system-err>
        </testcase>
        <testcase classname="src/services/FileCommandLoader.test.ts" name="FileCommandLoader &gt; ignores files that are semantically invalid (missing prompt)" time="0.0060491">
            <system-err>
[FileCommandLoader] Skipping invalid command file: C:\Users\alroh\.gemini\commands\no_prompt.toml. Validation errors: {
  formErrors: [],
  fieldErrors: { prompt: [ [32m&quot;The &apos;prompt&apos; field is required.&quot;[39m ] }
}

            </system-err>
        </testcase>
        <testcase classname="src/services/FileCommandLoader.test.ts" name="FileCommandLoader &gt; handles filename edge cases correctly" time="0.0015049">
        </testcase>
        <testcase classname="src/services/FileCommandLoader.test.ts" name="FileCommandLoader &gt; handles file system errors gracefully" time="0.0009337">
        </testcase>
        <testcase classname="src/services/FileCommandLoader.test.ts" name="FileCommandLoader &gt; uses a default description if not provided" time="0.0020219">
        </testcase>
        <testcase classname="src/services/FileCommandLoader.test.ts" name="FileCommandLoader &gt; uses the provided description" time="0.002556">
        </testcase>
        <testcase classname="src/services/FileCommandLoader.test.ts" name="FileCommandLoader &gt; should sanitize colons in filenames to prevent namespace conflicts" time="0.001923">
        </testcase>
        <testcase classname="src/services/FileCommandLoader.test.ts" name="FileCommandLoader &gt; Processor Instantiation Logic &gt; instantiates only DefaultArgumentProcessor if no {{args}} or !{} are present" time="0.0018215">
        </testcase>
        <testcase classname="src/services/FileCommandLoader.test.ts" name="FileCommandLoader &gt; Processor Instantiation Logic &gt; instantiates only ShellProcessor if {{args}} is present (but not !{})" time="0.0021432">
        </testcase>
        <testcase classname="src/services/FileCommandLoader.test.ts" name="FileCommandLoader &gt; Processor Instantiation Logic &gt; instantiates ShellProcessor and DefaultArgumentProcessor if !{} is present (but not {{args}})" time="0.0013659">
        </testcase>
        <testcase classname="src/services/FileCommandLoader.test.ts" name="FileCommandLoader &gt; Processor Instantiation Logic &gt; instantiates only ShellProcessor if both {{args}} and !{} are present" time="0.0013244">
        </testcase>
        <testcase classname="src/services/FileCommandLoader.test.ts" name="FileCommandLoader &gt; Processor Instantiation Logic &gt; instantiates AtFileProcessor and DefaultArgumentProcessor if @{} is present" time="0.0013787">
        </testcase>
        <testcase classname="src/services/FileCommandLoader.test.ts" name="FileCommandLoader &gt; Processor Instantiation Logic &gt; instantiates ShellProcessor and AtFileProcessor if !{} and @{} are present" time="0.0013163">
        </testcase>
        <testcase classname="src/services/FileCommandLoader.test.ts" name="FileCommandLoader &gt; Processor Instantiation Logic &gt; instantiates only ShellProcessor and AtFileProcessor if {{args}} and @{} are present" time="0.0015391">
        </testcase>
        <testcase classname="src/services/FileCommandLoader.test.ts" name="FileCommandLoader &gt; Extension Command Loading &gt; loads commands from active extensions" time="0.0032737">
        </testcase>
        <testcase classname="src/services/FileCommandLoader.test.ts" name="FileCommandLoader &gt; Extension Command Loading &gt; extension commands have extensionName metadata for conflict resolution" time="0.0041214">
        </testcase>
        <testcase classname="src/services/FileCommandLoader.test.ts" name="FileCommandLoader &gt; Extension Command Loading &gt; only loads commands from active extensions" time="0.0029591">
        </testcase>
        <testcase classname="src/services/FileCommandLoader.test.ts" name="FileCommandLoader &gt; Extension Command Loading &gt; handles missing extension commands directory gracefully" time="0.0017153">
        </testcase>
        <testcase classname="src/services/FileCommandLoader.test.ts" name="FileCommandLoader &gt; Extension Command Loading &gt; handles nested command structure in extensions" time="0.005352">
        </testcase>
        <testcase classname="src/services/FileCommandLoader.test.ts" name="FileCommandLoader &gt; Argument Handling Integration (via ShellProcessor) &gt; correctly processes a command with {{args}}" time="0.0025164">
        </testcase>
        <testcase classname="src/services/FileCommandLoader.test.ts" name="FileCommandLoader &gt; Default Argument Processor Integration &gt; correctly processes a command without {{args}}" time="0.0023343">
        </testcase>
        <testcase classname="src/services/FileCommandLoader.test.ts" name="FileCommandLoader &gt; Shell Processor Integration &gt; instantiates ShellProcessor if {{args}} is present (even without shell trigger)" time="0.0066707">
        </testcase>
        <testcase classname="src/services/FileCommandLoader.test.ts" name="FileCommandLoader &gt; Shell Processor Integration &gt; instantiates ShellProcessor if the trigger is present" time="0.0023332">
        </testcase>
        <testcase classname="src/services/FileCommandLoader.test.ts" name="FileCommandLoader &gt; Shell Processor Integration &gt; does not instantiate ShellProcessor if no triggers ({{args}} or !{}) are present" time="0.0025639">
        </testcase>
        <testcase classname="src/services/FileCommandLoader.test.ts" name="FileCommandLoader &gt; Shell Processor Integration &gt; returns a &quot;submit_prompt&quot; action if shell processing succeeds" time="0.0046022">
        </testcase>
        <testcase classname="src/services/FileCommandLoader.test.ts" name="FileCommandLoader &gt; Shell Processor Integration &gt; returns a &quot;confirm_shell_commands&quot; action if shell processing requires it" time="0.0041844">
        </testcase>
        <testcase classname="src/services/FileCommandLoader.test.ts" name="FileCommandLoader &gt; Shell Processor Integration &gt; re-throws other errors from the processor" time="0.0040312">
        </testcase>
        <testcase classname="src/services/FileCommandLoader.test.ts" name="FileCommandLoader &gt; Shell Processor Integration &gt; assembles the processor pipeline in the correct order (AtFile -&gt; Shell -&gt; Default)" time="0.0060424">
        </testcase>
        <testcase classname="src/services/FileCommandLoader.test.ts" name="FileCommandLoader &gt; @-file Processor Integration &gt; correctly processes a command with @{file}" time="0.0023909">
        </testcase>
        <testcase classname="src/services/FileCommandLoader.test.ts" name="FileCommandLoader &gt; with folder trust enabled &gt; loads multiple commands" time="0.0019294">
        </testcase>
        <testcase classname="src/services/FileCommandLoader.test.ts" name="FileCommandLoader &gt; with folder trust enabled &gt; does not load when folder is not trusted" time="0.0016677">
        </testcase>
    </testsuite>
    <testsuite name="src/services/McpPromptLoader.test.ts" timestamp="2025-09-23T13:52:09.553Z" hostname="WIN-33AANMPCPKN" tests="25" failures="0" errors="0" skipped="0" time="0.010283">
        <testcase classname="src/services/McpPromptLoader.test.ts" name="McpPromptLoader &gt; parseArgs &gt; should handle multi-word positional arguments" time="0.0024793">
        </testcase>
        <testcase classname="src/services/McpPromptLoader.test.ts" name="McpPromptLoader &gt; parseArgs &gt; should handle quoted multi-word positional arguments" time="0.0002857">
        </testcase>
        <testcase classname="src/services/McpPromptLoader.test.ts" name="McpPromptLoader &gt; parseArgs &gt; should handle a single positional argument with multiple words" time="0.0001665">
        </testcase>
        <testcase classname="src/services/McpPromptLoader.test.ts" name="McpPromptLoader &gt; parseArgs &gt; should handle escaped quotes in positional arguments" time="0.0001296">
        </testcase>
        <testcase classname="src/services/McpPromptLoader.test.ts" name="McpPromptLoader &gt; parseArgs &gt; should handle escaped backslashes in positional arguments" time="0.0001254">
        </testcase>
        <testcase classname="src/services/McpPromptLoader.test.ts" name="McpPromptLoader &gt; parseArgs &gt; should handle named args followed by positional args" time="0.0001401">
        </testcase>
        <testcase classname="src/services/McpPromptLoader.test.ts" name="McpPromptLoader &gt; parseArgs &gt; should handle positional args followed by named args" time="0.0001259">
        </testcase>
        <testcase classname="src/services/McpPromptLoader.test.ts" name="McpPromptLoader &gt; parseArgs &gt; should handle positional args interspersed with named args" time="0.0001326">
        </testcase>
        <testcase classname="src/services/McpPromptLoader.test.ts" name="McpPromptLoader &gt; parseArgs &gt; should treat an escaped quote at the start as a literal" time="0.000246">
        </testcase>
        <testcase classname="src/services/McpPromptLoader.test.ts" name="McpPromptLoader &gt; parseArgs &gt; should handle a complex mix of args" time="0.0001527">
        </testcase>
        <testcase classname="src/services/McpPromptLoader.test.ts" name="McpPromptLoader &gt; loadCommands &gt; should load prompts as slash commands" time="0.0013272">
        </testcase>
        <testcase classname="src/services/McpPromptLoader.test.ts" name="McpPromptLoader &gt; loadCommands &gt; should handle prompt invocation successfully" time="0.0009797">
        </testcase>
        <testcase classname="src/services/McpPromptLoader.test.ts" name="McpPromptLoader &gt; loadCommands &gt; should return an error for missing required arguments" time="0.0002078">
        </testcase>
        <testcase classname="src/services/McpPromptLoader.test.ts" name="McpPromptLoader &gt; loadCommands &gt; should return an error message if prompt invocation fails" time="0.0003327">
        </testcase>
        <testcase classname="src/services/McpPromptLoader.test.ts" name="McpPromptLoader &gt; loadCommands &gt; should return an empty array if config is not available" time="0.0001431">
        </testcase>
        <testcase classname="src/services/McpPromptLoader.test.ts" name="McpPromptLoader &gt; loadCommands &gt; completion &gt; should suggest no arguments when using positional arguments" time="0.0003275">
        </testcase>
        <testcase classname="src/services/McpPromptLoader.test.ts" name="McpPromptLoader &gt; loadCommands &gt; completion &gt; should suggest all arguments when none are present" time="0.0003309">
        </testcase>
        <testcase classname="src/services/McpPromptLoader.test.ts" name="McpPromptLoader &gt; loadCommands &gt; completion &gt; should suggest remaining arguments when some are present" time="0.0002632">
        </testcase>
        <testcase classname="src/services/McpPromptLoader.test.ts" name="McpPromptLoader &gt; loadCommands &gt; completion &gt; should suggest no arguments when all are present" time="0.0001374">
        </testcase>
        <testcase classname="src/services/McpPromptLoader.test.ts" name="McpPromptLoader &gt; loadCommands &gt; completion &gt; should suggest nothing for prompts with no arguments" time="0.0001625">
        </testcase>
        <testcase classname="src/services/McpPromptLoader.test.ts" name="McpPromptLoader &gt; loadCommands &gt; completion &gt; should suggest arguments matching a partial argument" time="0.0001581">
        </testcase>
        <testcase classname="src/services/McpPromptLoader.test.ts" name="McpPromptLoader &gt; loadCommands &gt; completion &gt; should suggest arguments even when a partial argument is parsed as a value" time="0.0001565">
        </testcase>
        <testcase classname="src/services/McpPromptLoader.test.ts" name="McpPromptLoader &gt; loadCommands &gt; completion &gt; should auto-close the quote for a named argument value" time="0.0001561">
        </testcase>
        <testcase classname="src/services/McpPromptLoader.test.ts" name="McpPromptLoader &gt; loadCommands &gt; completion &gt; should auto-close the quote for an empty named argument value" time="0.0001504">
        </testcase>
        <testcase classname="src/services/McpPromptLoader.test.ts" name="McpPromptLoader &gt; loadCommands &gt; completion &gt; should not add a quote if already present" time="0.0001511">
        </testcase>
    </testsuite>
    <testsuite name="src/test-utils/mockCommandContext.test.ts" timestamp="2025-09-23T13:52:09.556Z" hostname="WIN-33AANMPCPKN" tests="3" failures="0" errors="0" skipped="0" time="0.0046271">
        <testcase classname="src/test-utils/mockCommandContext.test.ts" name="createMockCommandContext &gt; should return a valid CommandContext object with default mocks" time="0.0024498">
        </testcase>
        <testcase classname="src/test-utils/mockCommandContext.test.ts" name="createMockCommandContext &gt; should apply top-level overrides correctly" time="0.0006534">
        </testcase>
        <testcase classname="src/test-utils/mockCommandContext.test.ts" name="createMockCommandContext &gt; should apply deeply nested overrides correctly" time="0.0003537">
        </testcase>
    </testsuite>
    <testsuite name="src/ui/App.test.tsx" timestamp="2025-09-23T13:52:09.557Z" hostname="WIN-33AANMPCPKN" tests="5" failures="0" errors="0" skipped="0" time="0.0465234">
        <testcase classname="src/ui/App.test.tsx" name="App &gt; should render main content and composer when not quitting" time="0.0291395">
        </testcase>
        <testcase classname="src/ui/App.test.tsx" name="App &gt; should render quitting display when quittingMessages is set" time="0.0016555">
        </testcase>
        <testcase classname="src/ui/App.test.tsx" name="App &gt; should render dialog manager when dialogs are visible" time="0.0054308">
        </testcase>
        <testcase classname="src/ui/App.test.tsx" name="App &gt; should show Ctrl+C exit prompt when dialogs are visible and ctrlCPressedOnce is true" time="0.0046601">
        </testcase>
        <testcase classname="src/ui/App.test.tsx" name="App &gt; should show Ctrl+D exit prompt when dialogs are visible and ctrlDPressedOnce is true" time="0.0040263">
        </testcase>
    </testsuite>
    <testsuite name="src/ui/AppContainer.test.tsx" timestamp="2025-09-23T13:52:09.558Z" hostname="WIN-33AANMPCPKN" tests="25" failures="0" errors="0" skipped="0" time="0.5551135">
        <testcase classname="src/ui/AppContainer.test.tsx" name="AppContainer State Management &gt; Basic Rendering &gt; renders without crashing with minimal props" time="0.0663213">
        </testcase>
        <testcase classname="src/ui/AppContainer.test.tsx" name="AppContainer State Management &gt; Basic Rendering &gt; renders with startup warnings" time="0.0026799">
        </testcase>
        <testcase classname="src/ui/AppContainer.test.tsx" name="AppContainer State Management &gt; State Initialization &gt; initializes with theme error from initialization result" time="0.0097102">
        </testcase>
        <testcase classname="src/ui/AppContainer.test.tsx" name="AppContainer State Management &gt; State Initialization &gt; handles debug mode state" time="0.0057601">
        </testcase>
        <testcase classname="src/ui/AppContainer.test.tsx" name="AppContainer State Management &gt; Context Providers &gt; provides AppContext with correct values" time="0.0025014">
        </testcase>
        <testcase classname="src/ui/AppContainer.test.tsx" name="AppContainer State Management &gt; Context Providers &gt; provides UIStateContext with state management" time="0.0025505">
        </testcase>
        <testcase classname="src/ui/AppContainer.test.tsx" name="AppContainer State Management &gt; Context Providers &gt; provides UIActionsContext with action handlers" time="0.0019">
        </testcase>
        <testcase classname="src/ui/AppContainer.test.tsx" name="AppContainer State Management &gt; Context Providers &gt; provides ConfigContext with config object" time="0.0023629">
        </testcase>
        <testcase classname="src/ui/AppContainer.test.tsx" name="AppContainer State Management &gt; Settings Integration &gt; handles settings with all display options disabled" time="0.0221563">
        </testcase>
        <testcase classname="src/ui/AppContainer.test.tsx" name="AppContainer State Management &gt; Settings Integration &gt; handles settings with memory usage enabled" time="0.0028698">
        </testcase>
        <testcase classname="src/ui/AppContainer.test.tsx" name="AppContainer State Management &gt; Version Handling &gt; handles version format: 1.0.0" time="0.0035431">
        </testcase>
        <testcase classname="src/ui/AppContainer.test.tsx" name="AppContainer State Management &gt; Version Handling &gt; handles version format: 2.1.3-beta" time="0.0027337">
        </testcase>
        <testcase classname="src/ui/AppContainer.test.tsx" name="AppContainer State Management &gt; Version Handling &gt; handles version format: 3.0.0-nightly" time="0.0026106">
        </testcase>
        <testcase classname="src/ui/AppContainer.test.tsx" name="AppContainer State Management &gt; Error Handling &gt; handles config methods that might throw" time="0.338951">
        </testcase>
        <testcase classname="src/ui/AppContainer.test.tsx" name="AppContainer State Management &gt; Error Handling &gt; handles undefined settings gracefully" time="0.0047391">
        </testcase>
        <testcase classname="src/ui/AppContainer.test.tsx" name="AppContainer State Management &gt; Provider Hierarchy &gt; establishes correct provider nesting order" time="0.0108583">
        </testcase>
        <testcase classname="src/ui/AppContainer.test.tsx" name="AppContainer State Management &gt; Quota and Fallback Integration &gt; passes a null proQuotaRequest to UIStateContext by default" time="0.0179196">
        </testcase>
        <testcase classname="src/ui/AppContainer.test.tsx" name="AppContainer State Management &gt; Quota and Fallback Integration &gt; passes a valid proQuotaRequest to UIStateContext when provided by the hook" time="0.0202555">
        </testcase>
        <testcase classname="src/ui/AppContainer.test.tsx" name="AppContainer State Management &gt; Quota and Fallback Integration &gt; passes the handleProQuotaChoice function to UIActionsContext" time="0.0054382">
        </testcase>
        <testcase classname="src/ui/AppContainer.test.tsx" name="AppContainer State Management &gt; Terminal Height Calculation &gt; should prevent terminal height from being less than 1" time="0.0045302">
        </testcase>
        <testcase classname="src/ui/AppContainer.test.tsx" name="AppContainer State Management &gt; Keyboard Input Handling &gt; should block quit command during authentication" time="0.0031519">
        </testcase>
        <testcase classname="src/ui/AppContainer.test.tsx" name="AppContainer State Management &gt; Keyboard Input Handling &gt; should prevent exit command when text buffer has content" time="0.00206">
        </testcase>
        <testcase classname="src/ui/AppContainer.test.tsx" name="AppContainer State Management &gt; Keyboard Input Handling &gt; should require double Ctrl+C to exit when dialogs are open" time="0.011985">
        </testcase>
        <testcase classname="src/ui/AppContainer.test.tsx" name="AppContainer State Management &gt; Keyboard Input Handling &gt; should cancel ongoing request on first Ctrl+C" time="0.0029129">
        </testcase>
        <testcase classname="src/ui/AppContainer.test.tsx" name="AppContainer State Management &gt; Keyboard Input Handling &gt; should reset Ctrl+C state after timeout" time="0.0028001">
        </testcase>
    </testsuite>
    <testsuite name="src/ui/keyMatchers.test.ts" timestamp="2025-09-23T13:52:09.561Z" hostname="WIN-33AANMPCPKN" tests="34" failures="0" errors="0" skipped="0" time="0.0087791">
        <testcase classname="src/ui/keyMatchers.test.ts" name="keyMatchers &gt; Data-driven key binding matches original logic &gt; should match return correctly" time="0.0016274">
        </testcase>
        <testcase classname="src/ui/keyMatchers.test.ts" name="keyMatchers &gt; Data-driven key binding matches original logic &gt; should match escape correctly" time="0.0002282">
        </testcase>
        <testcase classname="src/ui/keyMatchers.test.ts" name="keyMatchers &gt; Data-driven key binding matches original logic &gt; should match home correctly" time="0.000215">
        </testcase>
        <testcase classname="src/ui/keyMatchers.test.ts" name="keyMatchers &gt; Data-driven key binding matches original logic &gt; should match end correctly" time="0.0003256">
        </testcase>
        <testcase classname="src/ui/keyMatchers.test.ts" name="keyMatchers &gt; Data-driven key binding matches original logic &gt; should match killLineRight correctly" time="0.0002253">
        </testcase>
        <testcase classname="src/ui/keyMatchers.test.ts" name="keyMatchers &gt; Data-driven key binding matches original logic &gt; should match killLineLeft correctly" time="0.0001558">
        </testcase>
        <testcase classname="src/ui/keyMatchers.test.ts" name="keyMatchers &gt; Data-driven key binding matches original logic &gt; should match clearInput correctly" time="0.0001554">
        </testcase>
        <testcase classname="src/ui/keyMatchers.test.ts" name="keyMatchers &gt; Data-driven key binding matches original logic &gt; should match deleteWordBackward correctly" time="0.0002068">
        </testcase>
        <testcase classname="src/ui/keyMatchers.test.ts" name="keyMatchers &gt; Data-driven key binding matches original logic &gt; should match clearScreen correctly" time="0.000157">
        </testcase>
        <testcase classname="src/ui/keyMatchers.test.ts" name="keyMatchers &gt; Data-driven key binding matches original logic &gt; should match historyUp correctly" time="0.0001426">
        </testcase>
        <testcase classname="src/ui/keyMatchers.test.ts" name="keyMatchers &gt; Data-driven key binding matches original logic &gt; should match historyDown correctly" time="0.0001387">
        </testcase>
        <testcase classname="src/ui/keyMatchers.test.ts" name="keyMatchers &gt; Data-driven key binding matches original logic &gt; should match navigationUp correctly" time="0.000169">
        </testcase>
        <testcase classname="src/ui/keyMatchers.test.ts" name="keyMatchers &gt; Data-driven key binding matches original logic &gt; should match navigationDown correctly" time="0.0001661">
        </testcase>
        <testcase classname="src/ui/keyMatchers.test.ts" name="keyMatchers &gt; Data-driven key binding matches original logic &gt; should match acceptSuggestion correctly" time="0.000173">
        </testcase>
        <testcase classname="src/ui/keyMatchers.test.ts" name="keyMatchers &gt; Data-driven key binding matches original logic &gt; should match completionUp correctly" time="0.0001724">
        </testcase>
        <testcase classname="src/ui/keyMatchers.test.ts" name="keyMatchers &gt; Data-driven key binding matches original logic &gt; should match completionDown correctly" time="0.0001685">
        </testcase>
        <testcase classname="src/ui/keyMatchers.test.ts" name="keyMatchers &gt; Data-driven key binding matches original logic &gt; should match submit correctly" time="0.000177">
        </testcase>
        <testcase classname="src/ui/keyMatchers.test.ts" name="keyMatchers &gt; Data-driven key binding matches original logic &gt; should match newline correctly" time="0.000218">
        </testcase>
        <testcase classname="src/ui/keyMatchers.test.ts" name="keyMatchers &gt; Data-driven key binding matches original logic &gt; should match openExternalEditor correctly" time="0.0001729">
        </testcase>
        <testcase classname="src/ui/keyMatchers.test.ts" name="keyMatchers &gt; Data-driven key binding matches original logic &gt; should match pasteClipboardImage correctly" time="0.0001324">
        </testcase>
        <testcase classname="src/ui/keyMatchers.test.ts" name="keyMatchers &gt; Data-driven key binding matches original logic &gt; should match showErrorDetails correctly" time="0.0001724">
        </testcase>
        <testcase classname="src/ui/keyMatchers.test.ts" name="keyMatchers &gt; Data-driven key binding matches original logic &gt; should match toggleToolDescriptions correctly" time="0.0001351">
        </testcase>
        <testcase classname="src/ui/keyMatchers.test.ts" name="keyMatchers &gt; Data-driven key binding matches original logic &gt; should match toggleIDEContextDetail correctly" time="0.0001517">
        </testcase>
        <testcase classname="src/ui/keyMatchers.test.ts" name="keyMatchers &gt; Data-driven key binding matches original logic &gt; should match quit correctly" time="0.0001362">
        </testcase>
        <testcase classname="src/ui/keyMatchers.test.ts" name="keyMatchers &gt; Data-driven key binding matches original logic &gt; should match exit correctly" time="0.0001335">
        </testcase>
        <testcase classname="src/ui/keyMatchers.test.ts" name="keyMatchers &gt; Data-driven key binding matches original logic &gt; should match showMoreLines correctly" time="0.0001324">
        </testcase>
        <testcase classname="src/ui/keyMatchers.test.ts" name="keyMatchers &gt; Data-driven key binding matches original logic &gt; should match reverseSearch correctly" time="0.0001333">
        </testcase>
        <testcase classname="src/ui/keyMatchers.test.ts" name="keyMatchers &gt; Data-driven key binding matches original logic &gt; should match submitReverseSearch correctly" time="0.0001327">
        </testcase>
        <testcase classname="src/ui/keyMatchers.test.ts" name="keyMatchers &gt; Data-driven key binding matches original logic &gt; should match acceptSuggestionReverseSearch correctly" time="0.0003269">
        </testcase>
        <testcase classname="src/ui/keyMatchers.test.ts" name="keyMatchers &gt; Data-driven key binding matches original logic &gt; should match toggleShellInputFocus correctly" time="0.0001055">
        </testcase>
        <testcase classname="src/ui/keyMatchers.test.ts" name="keyMatchers &gt; Data-driven key binding matches original logic &gt; should properly handle ACCEPT_SUGGESTION_REVERSE_SEARCH cases" time="0.0001436">
        </testcase>
        <testcase classname="src/ui/keyMatchers.test.ts" name="keyMatchers &gt; Custom key bindings &gt; should work with custom configuration" time="0.000176">
        </testcase>
        <testcase classname="src/ui/keyMatchers.test.ts" name="keyMatchers &gt; Custom key bindings &gt; should support multiple key bindings for same command" time="0.0001375">
        </testcase>
        <testcase classname="src/ui/keyMatchers.test.ts" name="keyMatchers &gt; Edge Cases &gt; should handle empty binding arrays" time="0.0000775">
        </testcase>
    </testsuite>
    <testsuite name="src/utils/cleanup.test.ts" timestamp="2025-09-23T13:52:09.564Z" hostname="WIN-33AANMPCPKN" tests="4" failures="0" errors="0" skipped="0" time="0.0051442">
        <testcase classname="src/utils/cleanup.test.ts" name="cleanup &gt; should run a registered synchronous function" time="0.0027759">
        </testcase>
        <testcase classname="src/utils/cleanup.test.ts" name="cleanup &gt; should run a registered asynchronous function" time="0.0003027">
        </testcase>
        <testcase classname="src/utils/cleanup.test.ts" name="cleanup &gt; should run multiple registered functions" time="0.0002215">
        </testcase>
        <testcase classname="src/utils/cleanup.test.ts" name="cleanup &gt; should continue running cleanup functions even if one throws an error" time="0.0002511">
        </testcase>
    </testsuite>
    <testsuite name="src/utils/commands.test.ts" timestamp="2025-09-23T13:52:09.565Z" hostname="WIN-33AANMPCPKN" tests="12" failures="0" errors="0" skipped="0" time="0.0047288">
        <testcase classname="src/utils/commands.test.ts" name="parseSlashCommand &gt; should parse a simple command without arguments" time="0.0019973">
        </testcase>
        <testcase classname="src/utils/commands.test.ts" name="parseSlashCommand &gt; should parse a simple command with arguments" time="0.0002398">
        </testcase>
        <testcase classname="src/utils/commands.test.ts" name="parseSlashCommand &gt; should parse a subcommand" time="0.0002958">
        </testcase>
        <testcase classname="src/utils/commands.test.ts" name="parseSlashCommand &gt; should parse a subcommand with arguments" time="0.0001264">
        </testcase>
        <testcase classname="src/utils/commands.test.ts" name="parseSlashCommand &gt; should handle a command alias" time="0.0001286">
        </testcase>
        <testcase classname="src/utils/commands.test.ts" name="parseSlashCommand &gt; should handle a subcommand alias" time="0.0001166">
        </testcase>
        <testcase classname="src/utils/commands.test.ts" name="parseSlashCommand &gt; should return undefined for an unknown command" time="0.000128">
        </testcase>
        <testcase classname="src/utils/commands.test.ts" name="parseSlashCommand &gt; should return the parent command if subcommand is unknown" time="0.0001124">
        </testcase>
        <testcase classname="src/utils/commands.test.ts" name="parseSlashCommand &gt; should handle extra whitespace" time="0.0001183">
        </testcase>
        <testcase classname="src/utils/commands.test.ts" name="parseSlashCommand &gt; should return undefined if query does not start with a slash" time="0.0000606">
        </testcase>
        <testcase classname="src/utils/commands.test.ts" name="parseSlashCommand &gt; should handle an empty query" time="0.0000578">
        </testcase>
        <testcase classname="src/utils/commands.test.ts" name="parseSlashCommand &gt; should handle a query with only a slash" time="0.0000955">
        </testcase>
    </testsuite>
    <testsuite name="src/utils/commentJson.test.ts" timestamp="2025-09-23T13:52:09.567Z" hostname="WIN-33AANMPCPKN" tests="6" failures="0" errors="0" skipped="0" time="0.0217191">
        <testcase classname="src/utils/commentJson.test.ts" name="commentJson &gt; updateSettingsFilePreservingFormat &gt; should preserve comments when updating settings" time="0.0071832">
        </testcase>
        <testcase classname="src/utils/commentJson.test.ts" name="commentJson &gt; updateSettingsFilePreservingFormat &gt; should handle nested object updates" time="0.0020124">
        </testcase>
        <testcase classname="src/utils/commentJson.test.ts" name="commentJson &gt; updateSettingsFilePreservingFormat &gt; should add new fields while preserving existing structure" time="0.0022236">
        </testcase>
        <testcase classname="src/utils/commentJson.test.ts" name="commentJson &gt; updateSettingsFilePreservingFormat &gt; should create file if it does not exist" time="0.0014031">
        </testcase>
        <testcase classname="src/utils/commentJson.test.ts" name="commentJson &gt; updateSettingsFilePreservingFormat &gt; should handle complex real-world scenario" time="0.0024378">
        </testcase>
        <testcase classname="src/utils/commentJson.test.ts" name="commentJson &gt; updateSettingsFilePreservingFormat &gt; should handle corrupted JSON files gracefully" time="0.0053099">
        </testcase>
    </testsuite>
    <testsuite name="src/utils/deepMerge.test.ts" timestamp="2025-09-23T13:52:09.567Z" hostname="WIN-33AANMPCPKN" tests="13" failures="0" errors="0" skipped="0" time="0.0053964">
        <testcase classname="src/utils/deepMerge.test.ts" name="customDeepMerge &gt; should merge simple objects" time="0.0019072">
        </testcase>
        <testcase classname="src/utils/deepMerge.test.ts" name="customDeepMerge &gt; should merge nested objects" time="0.0002104">
        </testcase>
        <testcase classname="src/utils/deepMerge.test.ts" name="customDeepMerge &gt; should replace arrays by default" time="0.0001536">
        </testcase>
        <testcase classname="src/utils/deepMerge.test.ts" name="customDeepMerge &gt; should concatenate arrays with CONCAT strategy" time="0.0001145">
        </testcase>
        <testcase classname="src/utils/deepMerge.test.ts" name="customDeepMerge &gt; should union arrays with UNION strategy" time="0.0001161">
        </testcase>
        <testcase classname="src/utils/deepMerge.test.ts" name="customDeepMerge &gt; should shallow merge objects with SHALLOW_MERGE strategy" time="0.000118">
        </testcase>
        <testcase classname="src/utils/deepMerge.test.ts" name="customDeepMerge &gt; should handle multiple source objects" time="0.0000946">
        </testcase>
        <testcase classname="src/utils/deepMerge.test.ts" name="customDeepMerge &gt; should return an empty object if no sources are provided" time="0.0000715">
        </testcase>
        <testcase classname="src/utils/deepMerge.test.ts" name="customDeepMerge &gt; should return a deep copy of the first source if only one is provided" time="0.0003792">
        </testcase>
        <testcase classname="src/utils/deepMerge.test.ts" name="customDeepMerge &gt; should not mutate the original source objects" time="0.0001744">
        </testcase>
        <testcase classname="src/utils/deepMerge.test.ts" name="customDeepMerge &gt; should not mutate sources when merging multiple levels deep" time="0.0003197">
        </testcase>
        <testcase classname="src/utils/deepMerge.test.ts" name="customDeepMerge &gt; should handle complex nested strategies" time="0.0002973">
        </testcase>
        <testcase classname="src/utils/deepMerge.test.ts" name="customDeepMerge &gt; should not pollute the prototype" time="0.0001528">
        </testcase>
    </testsuite>
    <testsuite name="src/utils/envVarResolver.test.ts" timestamp="2025-09-23T13:52:09.570Z" hostname="WIN-33AANMPCPKN" tests="16" failures="0" errors="0" skipped="0" time="0.0067014">
        <testcase classname="src/utils/envVarResolver.test.ts" name="resolveEnvVarsInString &gt; should resolve $VAR_NAME format" time="0.0019473">
        </testcase>
        <testcase classname="src/utils/envVarResolver.test.ts" name="resolveEnvVarsInString &gt; should resolve ${VAR_NAME} format" time="0.0001471">
        </testcase>
        <testcase classname="src/utils/envVarResolver.test.ts" name="resolveEnvVarsInString &gt; should resolve multiple variables in the same string" time="0.0001235">
        </testcase>
        <testcase classname="src/utils/envVarResolver.test.ts" name="resolveEnvVarsInString &gt; should leave undefined variables unchanged" time="0.0000891">
        </testcase>
        <testcase classname="src/utils/envVarResolver.test.ts" name="resolveEnvVarsInString &gt; should leave undefined variables with braces unchanged" time="0.0002507">
        </testcase>
        <testcase classname="src/utils/envVarResolver.test.ts" name="resolveEnvVarsInString &gt; should handle empty string" time="0.0000783">
        </testcase>
        <testcase classname="src/utils/envVarResolver.test.ts" name="resolveEnvVarsInString &gt; should handle string without variables" time="0.0000758">
        </testcase>
        <testcase classname="src/utils/envVarResolver.test.ts" name="resolveEnvVarsInString &gt; should handle mixed defined and undefined variables" time="0.0000954">
        </testcase>
        <testcase classname="src/utils/envVarResolver.test.ts" name="resolveEnvVarsInObject &gt; should resolve variables in nested objects" time="0.0008214">
        </testcase>
        <testcase classname="src/utils/envVarResolver.test.ts" name="resolveEnvVarsInObject &gt; should resolve variables in arrays" time="0.0002747">
        </testcase>
        <testcase classname="src/utils/envVarResolver.test.ts" name="resolveEnvVarsInObject &gt; should preserve non-string types" time="0.0001261">
        </testcase>
        <testcase classname="src/utils/envVarResolver.test.ts" name="resolveEnvVarsInObject &gt; should handle MCP server config structure" time="0.0001839">
        </testcase>
        <testcase classname="src/utils/envVarResolver.test.ts" name="resolveEnvVarsInObject &gt; should handle empty and null values" time="0.000103">
        </testcase>
        <testcase classname="src/utils/envVarResolver.test.ts" name="resolveEnvVarsInObject &gt; should handle circular references in objects without infinite recursion" time="0.000424">
        </testcase>
        <testcase classname="src/utils/envVarResolver.test.ts" name="resolveEnvVarsInObject &gt; should handle circular references in arrays without infinite recursion" time="0.0002727">
        </testcase>
        <testcase classname="src/utils/envVarResolver.test.ts" name="resolveEnvVarsInObject &gt; should handle complex nested circular references" time="0.000524">
        </testcase>
    </testsuite>
    <testsuite name="src/utils/errors.test.ts" timestamp="2025-09-23T13:52:09.572Z" hostname="WIN-33AANMPCPKN" tests="20" failures="0" errors="0" skipped="0" time="0.0148976">
        <testcase classname="src/utils/errors.test.ts" name="errors &gt; getErrorMessage &gt; should return error message for Error instances" time="0.0023067">
        </testcase>
        <testcase classname="src/utils/errors.test.ts" name="errors &gt; getErrorMessage &gt; should convert non-Error values to strings" time="0.0003812">
        </testcase>
        <testcase classname="src/utils/errors.test.ts" name="errors &gt; getErrorMessage &gt; should handle objects" time="0.0002338">
        </testcase>
        <testcase classname="src/utils/errors.test.ts" name="errors &gt; handleError &gt; in text mode &gt; should log error message and re-throw" time="0.0022146">
        </testcase>
        <testcase classname="src/utils/errors.test.ts" name="errors &gt; handleError &gt; in text mode &gt; should handle non-Error objects" time="0.0012032">
        </testcase>
        <testcase classname="src/utils/errors.test.ts" name="errors &gt; handleError &gt; in JSON mode &gt; should format error as JSON and exit with default code" time="0.0007019">
        </testcase>
        <testcase classname="src/utils/errors.test.ts" name="errors &gt; handleError &gt; in JSON mode &gt; should use custom error code when provided" time="0.0004438">
        </testcase>
        <testcase classname="src/utils/errors.test.ts" name="errors &gt; handleError &gt; in JSON mode &gt; should extract exitCode from FatalError instances" time="0.0006729">
        </testcase>
        <testcase classname="src/utils/errors.test.ts" name="errors &gt; handleError &gt; in JSON mode &gt; should handle error with code property" time="0.0003998">
        </testcase>
        <testcase classname="src/utils/errors.test.ts" name="errors &gt; handleError &gt; in JSON mode &gt; should handle error with status property" time="0.0004303">
        </testcase>
        <testcase classname="src/utils/errors.test.ts" name="errors &gt; handleToolError &gt; in text mode &gt; should log error message to stderr" time="0.0004167">
        </testcase>
        <testcase classname="src/utils/errors.test.ts" name="errors &gt; handleToolError &gt; in text mode &gt; should use resultDisplay when provided" time="0.0002619">
        </testcase>
        <testcase classname="src/utils/errors.test.ts" name="errors &gt; handleToolError &gt; in JSON mode &gt; should format error as JSON and exit with default code" time="0.0004145">
        </testcase>
        <testcase classname="src/utils/errors.test.ts" name="errors &gt; handleToolError &gt; in JSON mode &gt; should use custom error code" time="0.0003919">
        </testcase>
        <testcase classname="src/utils/errors.test.ts" name="errors &gt; handleToolError &gt; in JSON mode &gt; should use numeric error code and exit with that code" time="0.0003775">
        </testcase>
        <testcase classname="src/utils/errors.test.ts" name="errors &gt; handleToolError &gt; in JSON mode &gt; should prefer resultDisplay over error message" time="0.0003791">
        </testcase>
        <testcase classname="src/utils/errors.test.ts" name="errors &gt; handleCancellationError &gt; in text mode &gt; should log cancellation message and exit with 130" time="0.000427">
        </testcase>
        <testcase classname="src/utils/errors.test.ts" name="errors &gt; handleCancellationError &gt; in JSON mode &gt; should format cancellation as JSON and exit with 130" time="0.0003951">
        </testcase>
        <testcase classname="src/utils/errors.test.ts" name="errors &gt; handleMaxTurnsExceededError &gt; in text mode &gt; should log max turns message and exit with 53" time="0.0004319">
        </testcase>
        <testcase classname="src/utils/errors.test.ts" name="errors &gt; handleMaxTurnsExceededError &gt; in JSON mode &gt; should format max turns error as JSON and exit with 53" time="0.0004397">
        </testcase>
    </testsuite>
    <testsuite name="src/utils/gitUtils.test.ts" timestamp="2025-09-23T13:52:09.575Z" hostname="WIN-33AANMPCPKN" tests="12" failures="0" errors="0" skipped="0" time="0.029087">
        <testcase classname="src/utils/gitUtils.test.ts" name="isGitHubRepository &gt; returns false if the git command fails" time="0.0173576">
            <system-out>
Failed to get git remote: Error: oops
    at [90mE:\claude-code\pipedream\modelcontextprotocol\agentrpc\gemini-cli\packages\cli\[39msrc\utils\gitUtils.test.ts:29:13
    at mockCall (file:///E:/claude-code/pipedream/modelcontextprotocol/agentrpc/gemini-cli/node_modules/[4m@vitest[24m/spy/dist/index.js:96:15)
    at execSync (file:///E:/claude-code/pipedream/modelcontextprotocol/agentrpc/gemini-cli/node_modules/[4mtinyspy[24m/dist/index.js:47:80)
    at Module.isGitHubRepository [90m(E:\claude-code\pipedream\modelcontextprotocol\agentrpc\gemini-cli\packages\cli\[39msrc\utils\gitUtils.ts:17:7[90m)[39m
    at [90mE:\claude-code\pipedream\modelcontextprotocol\agentrpc\gemini-cli\packages\cli\[39msrc\utils\gitUtils.test.ts:31:12
    at file:///E:/claude-code/pipedream/modelcontextprotocol/agentrpc/gemini-cli/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:155:11
    at file:///E:/claude-code/pipedream/modelcontextprotocol/agentrpc/gemini-cli/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:752:26
    at file:///E:/claude-code/pipedream/modelcontextprotocol/agentrpc/gemini-cli/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:1897:20
    at new Promise (&lt;anonymous&gt;)
    at runWithTimeout (file:///E:/claude-code/pipedream/modelcontextprotocol/agentrpc/gemini-cli/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:1863:10)

            </system-out>
        </testcase>
        <testcase classname="src/utils/gitUtils.test.ts" name="isGitHubRepository &gt; returns false if the remote is not github.com" time="0.0004036">
        </testcase>
        <testcase classname="src/utils/gitUtils.test.ts" name="isGitHubRepository &gt; returns true if the remote is github.com" time="0.0002127">
        </testcase>
        <testcase classname="src/utils/gitUtils.test.ts" name="getGitHubRepoInfo &gt; throws an error if github repo info cannot be determined" time="0.001399">
        </testcase>
        <testcase classname="src/utils/gitUtils.test.ts" name="getGitHubRepoInfo &gt; throws an error if owner/repo could not be determined" time="0.0004445">
        </testcase>
        <testcase classname="src/utils/gitUtils.test.ts" name="getGitHubRepoInfo &gt; returns the owner and repo" time="0.0011773">
        </testcase>
        <testcase classname="src/utils/gitUtils.test.ts" name="getGitRepoRoot &gt; throws an error if git root cannot be determined" time="0.0003625">
        </testcase>
        <testcase classname="src/utils/gitUtils.test.ts" name="getGitRepoRoot &gt; throws an error if git root is empty" time="0.0002672">
        </testcase>
        <testcase classname="src/utils/gitUtils.test.ts" name="getGitRepoRoot &gt; returns the root" time="0.0003435">
        </testcase>
        <testcase classname="src/utils/gitUtils.test.ts" name="getLatestRelease &gt; throws an error if the fetch fails" time="0.0023604">
            <system-out>
Failed to determine latest run-gemini-cli release: nope

            </system-out>
        </testcase>
        <testcase classname="src/utils/gitUtils.test.ts" name="getLatestRelease &gt; throws an error if the fetch does not return a json body" time="0.0012574">
            <system-out>
Failed to determine latest run-gemini-cli release: Error: Response did not include tag_name field
    at Module.getLatestGitHubRelease [90m(E:\claude-code\pipedream\modelcontextprotocol\agentrpc\gemini-cli\packages\cli\[39msrc\utils\gitUtils.ts:82:13[90m)[39m
[90m    at processTicksAndRejections (node:internal/process/task_queues:105:5)[39m
    at [90mE:\claude-code\pipedream\modelcontextprotocol\agentrpc\gemini-cli\packages\cli\[39msrc\utils\gitUtils.test.ts:135:5
    at file:///E:/claude-code/pipedream/modelcontextprotocol/agentrpc/gemini-cli/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:752:20

            </system-out>
        </testcase>
        <testcase classname="src/utils/gitUtils.test.ts" name="getLatestRelease &gt; returns the release version" time="0.0012178">
        </testcase>
    </testsuite>
    <testsuite name="src/utils/handleAutoUpdate.test.ts" timestamp="2025-09-23T13:52:09.576Z" hostname="WIN-33AANMPCPKN" tests="10" failures="0" errors="0" skipped="0" time="0.0441552">
        <testcase classname="src/utils/handleAutoUpdate.test.ts" name="handleAutoUpdate &gt; should do nothing if update info is null" time="0.002694">
        </testcase>
        <testcase classname="src/utils/handleAutoUpdate.test.ts" name="handleAutoUpdate &gt; should do nothing if update nag is disabled" time="0.0004045">
        </testcase>
        <testcase classname="src/utils/handleAutoUpdate.test.ts" name="handleAutoUpdate &gt; should emit &quot;update-received&quot; but not update if auto-updates are disabled" time="0.002551">
        </testcase>
        <testcase classname="src/utils/handleAutoUpdate.test.ts" name="handleAutoUpdate &gt; should emit &quot;update-received&quot; but not update if no update command is found" time="0.0004988">
        </testcase>
        <testcase classname="src/utils/handleAutoUpdate.test.ts" name="handleAutoUpdate &gt; should combine update messages correctly" time="0.0003308">
        </testcase>
        <testcase classname="src/utils/handleAutoUpdate.test.ts" name="handleAutoUpdate &gt; should attempt to perform an update when conditions are met" time="0.0003214">
        </testcase>
        <testcase classname="src/utils/handleAutoUpdate.test.ts" name="handleAutoUpdate &gt; should emit &quot;update-failed&quot; when the update process fails" time="0.0039362">
        </testcase>
        <testcase classname="src/utils/handleAutoUpdate.test.ts" name="handleAutoUpdate &gt; should emit &quot;update-failed&quot; when the spawn function throws an error" time="0.0158991">
        </testcase>
        <testcase classname="src/utils/handleAutoUpdate.test.ts" name="handleAutoUpdate &gt; should use the &quot;@nightly&quot; tag for nightly updates" time="0.000521">
        </testcase>
        <testcase classname="src/utils/handleAutoUpdate.test.ts" name="handleAutoUpdate &gt; should emit &quot;update-success&quot; when the update process succeeds" time="0.0151153">
        </testcase>
    </testsuite>
    <testsuite name="src/utils/installationInfo.test.ts" timestamp="2025-09-23T13:52:09.577Z" hostname="WIN-33AANMPCPKN" tests="16" failures="0" errors="0" skipped="0" time="0.0118753">
        <testcase classname="src/utils/installationInfo.test.ts" name="getInstallationInfo &gt; should return UNKNOWN when cliPath is not available" time="0.0023614">
        </testcase>
        <testcase classname="src/utils/installationInfo.test.ts" name="getInstallationInfo &gt; should return UNKNOWN and log error if realpathSync fails" time="0.0025872">
        </testcase>
        <testcase classname="src/utils/installationInfo.test.ts" name="getInstallationInfo &gt; should detect running from a local git clone" time="0.0003318">
        </testcase>
        <testcase classname="src/utils/installationInfo.test.ts" name="getInstallationInfo &gt; should detect running via npx" time="0.0002571">
        </testcase>
        <testcase classname="src/utils/installationInfo.test.ts" name="getInstallationInfo &gt; should detect running via pnpx" time="0.0002215">
        </testcase>
        <testcase classname="src/utils/installationInfo.test.ts" name="getInstallationInfo &gt; should detect running via bunx" time="0.0002228">
        </testcase>
        <testcase classname="src/utils/installationInfo.test.ts" name="getInstallationInfo &gt; should detect Homebrew installation via execSync" time="0.001068">
        </testcase>
        <testcase classname="src/utils/installationInfo.test.ts" name="getInstallationInfo &gt; should fall through if brew command fails" time="0.0004407">
        </testcase>
        <testcase classname="src/utils/installationInfo.test.ts" name="getInstallationInfo &gt; should detect global pnpm installation" time="0.0003629">
        </testcase>
        <testcase classname="src/utils/installationInfo.test.ts" name="getInstallationInfo &gt; should detect global yarn installation" time="0.0004484">
        </testcase>
        <testcase classname="src/utils/installationInfo.test.ts" name="getInstallationInfo &gt; should detect global bun installation" time="0.0003175">
        </testcase>
        <testcase classname="src/utils/installationInfo.test.ts" name="getInstallationInfo &gt; should detect local installation and identify yarn from lockfile" time="0.0003949">
        </testcase>
        <testcase classname="src/utils/installationInfo.test.ts" name="getInstallationInfo &gt; should detect local installation and identify pnpm from lockfile" time="0.0002442">
        </testcase>
        <testcase classname="src/utils/installationInfo.test.ts" name="getInstallationInfo &gt; should detect local installation and identify bun from lockfile" time="0.0002362">
        </testcase>
        <testcase classname="src/utils/installationInfo.test.ts" name="getInstallationInfo &gt; should default to local npm installation if no lockfile is found" time="0.0002173">
        </testcase>
        <testcase classname="src/utils/installationInfo.test.ts" name="getInstallationInfo &gt; should default to global npm installation for unrecognized paths" time="0.0003176">
        </testcase>
    </testsuite>
    <testsuite name="src/utils/processUtils.test.ts" timestamp="2025-09-23T13:52:09.579Z" hostname="WIN-33AANMPCPKN" tests="1" failures="0" errors="0" skipped="0" time="0.0038278">
        <testcase classname="src/utils/processUtils.test.ts" name="processUtils &gt; should run cleanup and exit with the relaunch code" time="0.0025605">
        </testcase>
    </testsuite>
    <testsuite name="src/utils/readStdin.test.ts" timestamp="2025-09-23T13:52:09.579Z" hostname="WIN-33AANMPCPKN" tests="4" failures="0" errors="0" skipped="0" time="0.0071044">
        <testcase classname="src/utils/readStdin.test.ts" name="readStdin &gt; should read and accumulate data from stdin" time="0.0025954">
        </testcase>
        <testcase classname="src/utils/readStdin.test.ts" name="readStdin &gt; should handle empty stdin input" time="0.0003589">
        </testcase>
        <testcase classname="src/utils/readStdin.test.ts" name="readStdin &gt; should timeout and resolve with empty string when no input is available" time="0.0024437">
        </testcase>
        <testcase classname="src/utils/readStdin.test.ts" name="readStdin &gt; should clear timeout once when data is received and resolve with data" time="0.0004808">
        </testcase>
    </testsuite>
    <testsuite name="src/utils/relaunch.test.ts" timestamp="2025-09-23T13:52:09.580Z" hostname="WIN-33AANMPCPKN" tests="8" failures="0" errors="0" skipped="0" time="0.014075">
        <testcase classname="src/utils/relaunch.test.ts" name="relaunchOnExitCode &gt; should exit with non-RELAUNCH_EXIT_CODE" time="0.0056941">
        </testcase>
        <testcase classname="src/utils/relaunch.test.ts" name="relaunchOnExitCode &gt; should continue running when RELAUNCH_EXIT_CODE is returned" time="0.0006403">
        </testcase>
        <testcase classname="src/utils/relaunch.test.ts" name="relaunchOnExitCode &gt; should handle runner errors" time="0.0009278">
        </testcase>
        <testcase classname="src/utils/relaunch.test.ts" name="relaunchAppInChildProcess &gt; when GEMINI_CLI_NO_RELAUNCH is set &gt; should return early without spawning a child process" time="0.0005109">
        </testcase>
        <testcase classname="src/utils/relaunch.test.ts" name="relaunchAppInChildProcess &gt; when GEMINI_CLI_NO_RELAUNCH is not set &gt; should construct correct node arguments from execArgv, additionalNodeArgs, script, additionalScriptArgs, and argv" time="0.0004736">
        </testcase>
        <testcase classname="src/utils/relaunch.test.ts" name="relaunchAppInChildProcess &gt; when GEMINI_CLI_NO_RELAUNCH is not set &gt; should handle empty additional arguments correctly" time="0.000399">
        </testcase>
        <testcase classname="src/utils/relaunch.test.ts" name="relaunchAppInChildProcess &gt; when GEMINI_CLI_NO_RELAUNCH is not set &gt; should handle complex argument patterns" time="0.0003396">
        </testcase>
        <testcase classname="src/utils/relaunch.test.ts" name="relaunchAppInChildProcess &gt; when GEMINI_CLI_NO_RELAUNCH is not set &gt; should handle null exit code from child process" time="0.0033304">
        </testcase>
    </testsuite>
    <testsuite name="src/utils/settingsUtils.test.ts" timestamp="2025-09-23T13:52:09.581Z" hostname="WIN-33AANMPCPKN" tests="73" failures="0" errors="0" skipped="0" time="0.0160613">
        <testcase classname="src/utils/settingsUtils.test.ts" name="SettingsUtils &gt; Schema Utilities &gt; getSettingsByCategory &gt; should group settings by category" time="0.0020557">
        </testcase>
        <testcase classname="src/utils/settingsUtils.test.ts" name="SettingsUtils &gt; Schema Utilities &gt; getSettingsByCategory &gt; should include key property in grouped settings" time="0.0004127">
        </testcase>
        <testcase classname="src/utils/settingsUtils.test.ts" name="SettingsUtils &gt; Schema Utilities &gt; getSettingDefinition &gt; should return definition for valid setting" time="0.0002302">
        </testcase>
        <testcase classname="src/utils/settingsUtils.test.ts" name="SettingsUtils &gt; Schema Utilities &gt; getSettingDefinition &gt; should return undefined for invalid setting" time="0.000117">
        </testcase>
        <testcase classname="src/utils/settingsUtils.test.ts" name="SettingsUtils &gt; Schema Utilities &gt; requiresRestart &gt; should return true for settings that require restart" time="0.0001158">
        </testcase>
        <testcase classname="src/utils/settingsUtils.test.ts" name="SettingsUtils &gt; Schema Utilities &gt; requiresRestart &gt; should return false for settings that do not require restart" time="0.0000887">
        </testcase>
        <testcase classname="src/utils/settingsUtils.test.ts" name="SettingsUtils &gt; Schema Utilities &gt; requiresRestart &gt; should return false for invalid settings" time="0.000085">
        </testcase>
        <testcase classname="src/utils/settingsUtils.test.ts" name="SettingsUtils &gt; Schema Utilities &gt; getDefaultValue &gt; should return correct default values" time="0.0001283">
        </testcase>
        <testcase classname="src/utils/settingsUtils.test.ts" name="SettingsUtils &gt; Schema Utilities &gt; getDefaultValue &gt; should return undefined for invalid settings" time="0.0002533">
        </testcase>
        <testcase classname="src/utils/settingsUtils.test.ts" name="SettingsUtils &gt; Schema Utilities &gt; getRestartRequiredSettings &gt; should return all settings that require restart" time="0.0009449">
        </testcase>
        <testcase classname="src/utils/settingsUtils.test.ts" name="SettingsUtils &gt; Schema Utilities &gt; getEffectiveValue &gt; should return value from settings when set" time="0.0002008">
        </testcase>
        <testcase classname="src/utils/settingsUtils.test.ts" name="SettingsUtils &gt; Schema Utilities &gt; getEffectiveValue &gt; should return value from merged settings when not set in current scope" time="0.0001117">
        </testcase>
        <testcase classname="src/utils/settingsUtils.test.ts" name="SettingsUtils &gt; Schema Utilities &gt; getEffectiveValue &gt; should return default value when not set anywhere" time="0.0000923">
        </testcase>
        <testcase classname="src/utils/settingsUtils.test.ts" name="SettingsUtils &gt; Schema Utilities &gt; getEffectiveValue &gt; should handle nested settings correctly" time="0.0001011">
        </testcase>
        <testcase classname="src/utils/settingsUtils.test.ts" name="SettingsUtils &gt; Schema Utilities &gt; getEffectiveValue &gt; should return undefined for invalid settings" time="0.0000855">
        </testcase>
        <testcase classname="src/utils/settingsUtils.test.ts" name="SettingsUtils &gt; Schema Utilities &gt; getAllSettingKeys &gt; should return all setting keys" time="0.000223">
        </testcase>
        <testcase classname="src/utils/settingsUtils.test.ts" name="SettingsUtils &gt; Schema Utilities &gt; getSettingsByType &gt; should return only boolean settings" time="0.0002024">
        </testcase>
        <testcase classname="src/utils/settingsUtils.test.ts" name="SettingsUtils &gt; Schema Utilities &gt; getSettingsRequiringRestart &gt; should return only settings that require restart" time="0.0002052">
        </testcase>
        <testcase classname="src/utils/settingsUtils.test.ts" name="SettingsUtils &gt; Schema Utilities &gt; isValidSettingKey &gt; should return true for valid setting keys" time="0.000117">
        </testcase>
        <testcase classname="src/utils/settingsUtils.test.ts" name="SettingsUtils &gt; Schema Utilities &gt; isValidSettingKey &gt; should return false for invalid setting keys" time="0.0000985">
        </testcase>
        <testcase classname="src/utils/settingsUtils.test.ts" name="SettingsUtils &gt; Schema Utilities &gt; getSettingCategory &gt; should return correct category for valid settings" time="0.0001251">
        </testcase>
        <testcase classname="src/utils/settingsUtils.test.ts" name="SettingsUtils &gt; Schema Utilities &gt; getSettingCategory &gt; should return undefined for invalid settings" time="0.0000802">
        </testcase>
        <testcase classname="src/utils/settingsUtils.test.ts" name="SettingsUtils &gt; Schema Utilities &gt; shouldShowInDialog &gt; should return true for settings marked to show in dialog" time="0.0001689">
        </testcase>
        <testcase classname="src/utils/settingsUtils.test.ts" name="SettingsUtils &gt; Schema Utilities &gt; shouldShowInDialog &gt; should return false for settings marked to hide from dialog" time="0.0000851">
        </testcase>
        <testcase classname="src/utils/settingsUtils.test.ts" name="SettingsUtils &gt; Schema Utilities &gt; shouldShowInDialog &gt; should return true for invalid settings (default behavior)" time="0.0000814">
        </testcase>
        <testcase classname="src/utils/settingsUtils.test.ts" name="SettingsUtils &gt; Schema Utilities &gt; getDialogSettingsByCategory &gt; should only return settings marked for dialog display" time="0.000368">
        </testcase>
        <testcase classname="src/utils/settingsUtils.test.ts" name="SettingsUtils &gt; Schema Utilities &gt; getDialogSettingsByCategory &gt; should not include Advanced category settings" time="0.0001728">
        </testcase>
        <testcase classname="src/utils/settingsUtils.test.ts" name="SettingsUtils &gt; Schema Utilities &gt; getDialogSettingsByCategory &gt; should include settings with showInDialog=true" time="0.0004152">
        </testcase>
        <testcase classname="src/utils/settingsUtils.test.ts" name="SettingsUtils &gt; Schema Utilities &gt; getDialogSettingsByType &gt; should return only boolean dialog settings" time="0.0003391">
        </testcase>
        <testcase classname="src/utils/settingsUtils.test.ts" name="SettingsUtils &gt; Schema Utilities &gt; getDialogSettingsByType &gt; should return only string dialog settings" time="0.0003427">
        </testcase>
        <testcase classname="src/utils/settingsUtils.test.ts" name="SettingsUtils &gt; Schema Utilities &gt; getDialogSettingKeys &gt; should return only settings marked for dialog display" time="0.0002184">
        </testcase>
        <testcase classname="src/utils/settingsUtils.test.ts" name="SettingsUtils &gt; Schema Utilities &gt; getDialogSettingKeys &gt; should return fewer keys than getAllSettingKeys" time="0.0001521">
        </testcase>
        <testcase classname="src/utils/settingsUtils.test.ts" name="SettingsUtils &gt; Schema Utilities &gt; getDialogSettingKeys &gt; should handle nested settings display correctly" time="0.0004873">
        </testcase>
        <testcase classname="src/utils/settingsUtils.test.ts" name="SettingsUtils &gt; Business Logic Utilities &gt; getSettingValue &gt; should return value from settings when set" time="0.000124">
        </testcase>
        <testcase classname="src/utils/settingsUtils.test.ts" name="SettingsUtils &gt; Business Logic Utilities &gt; getSettingValue &gt; should return value from merged settings when not set in current scope" time="0.0000965">
        </testcase>
        <testcase classname="src/utils/settingsUtils.test.ts" name="SettingsUtils &gt; Business Logic Utilities &gt; getSettingValue &gt; should return default value for invalid setting" time="0.0000891">
        </testcase>
        <testcase classname="src/utils/settingsUtils.test.ts" name="SettingsUtils &gt; Business Logic Utilities &gt; isSettingModified &gt; should return true when value differs from default" time="0.0001314">
        </testcase>
        <testcase classname="src/utils/settingsUtils.test.ts" name="SettingsUtils &gt; Business Logic Utilities &gt; isSettingModified &gt; should return false when value matches default" time="0.0001025">
        </testcase>
        <testcase classname="src/utils/settingsUtils.test.ts" name="SettingsUtils &gt; Business Logic Utilities &gt; settingExistsInScope &gt; should return true for top-level settings that exist" time="0.0000855">
        </testcase>
        <testcase classname="src/utils/settingsUtils.test.ts" name="SettingsUtils &gt; Business Logic Utilities &gt; settingExistsInScope &gt; should return false for top-level settings that do not exist" time="0.0000778">
        </testcase>
        <testcase classname="src/utils/settingsUtils.test.ts" name="SettingsUtils &gt; Business Logic Utilities &gt; settingExistsInScope &gt; should return true for nested settings that exist" time="0.0000824">
        </testcase>
        <testcase classname="src/utils/settingsUtils.test.ts" name="SettingsUtils &gt; Business Logic Utilities &gt; settingExistsInScope &gt; should return false for nested settings that do not exist" time="0.0000806">
        </testcase>
        <testcase classname="src/utils/settingsUtils.test.ts" name="SettingsUtils &gt; Business Logic Utilities &gt; settingExistsInScope &gt; should return false when parent exists but child does not" time="0.0000826">
        </testcase>
        <testcase classname="src/utils/settingsUtils.test.ts" name="SettingsUtils &gt; Business Logic Utilities &gt; setPendingSettingValue &gt; should set top-level setting value" time="0.0001001">
        </testcase>
        <testcase classname="src/utils/settingsUtils.test.ts" name="SettingsUtils &gt; Business Logic Utilities &gt; setPendingSettingValue &gt; should set nested setting value" time="0.0000933">
        </testcase>
        <testcase classname="src/utils/settingsUtils.test.ts" name="SettingsUtils &gt; Business Logic Utilities &gt; setPendingSettingValue &gt; should preserve existing nested settings" time="0.0000943">
        </testcase>
        <testcase classname="src/utils/settingsUtils.test.ts" name="SettingsUtils &gt; Business Logic Utilities &gt; setPendingSettingValue &gt; should not mutate original settings" time="0.000725">
        </testcase>
        <testcase classname="src/utils/settingsUtils.test.ts" name="SettingsUtils &gt; Business Logic Utilities &gt; hasRestartRequiredSettings &gt; should return true when modified settings require restart" time="0.0001441">
        </testcase>
        <testcase classname="src/utils/settingsUtils.test.ts" name="SettingsUtils &gt; Business Logic Utilities &gt; hasRestartRequiredSettings &gt; should return false when no modified settings require restart" time="0.0000968">
        </testcase>
        <testcase classname="src/utils/settingsUtils.test.ts" name="SettingsUtils &gt; Business Logic Utilities &gt; hasRestartRequiredSettings &gt; should return false for empty set" time="0.000079">
        </testcase>
        <testcase classname="src/utils/settingsUtils.test.ts" name="SettingsUtils &gt; Business Logic Utilities &gt; getRestartRequiredFromModified &gt; should return only settings that require restart" time="0.000195">
        </testcase>
        <testcase classname="src/utils/settingsUtils.test.ts" name="SettingsUtils &gt; Business Logic Utilities &gt; getRestartRequiredFromModified &gt; should return empty array when no settings require restart" time="0.0001139">
        </testcase>
        <testcase classname="src/utils/settingsUtils.test.ts" name="SettingsUtils &gt; Business Logic Utilities &gt; getDisplayValue &gt; enum behavior &gt; handles display of number-based enums" time="0.0001742">
        </testcase>
        <testcase classname="src/utils/settingsUtils.test.ts" name="SettingsUtils &gt; Business Logic Utilities &gt; getDisplayValue &gt; enum behavior &gt; handles default values for number-based enums" time="0.0001171">
        </testcase>
        <testcase classname="src/utils/settingsUtils.test.ts" name="SettingsUtils &gt; Business Logic Utilities &gt; getDisplayValue &gt; enum behavior &gt; shows the enum display value" time="0.0001085">
        </testcase>
        <testcase classname="src/utils/settingsUtils.test.ts" name="SettingsUtils &gt; Business Logic Utilities &gt; getDisplayValue &gt; enum behavior &gt; passes through unknown values verbatim" time="0.000108">
        </testcase>
        <testcase classname="src/utils/settingsUtils.test.ts" name="SettingsUtils &gt; Business Logic Utilities &gt; getDisplayValue &gt; enum behavior &gt; shows the default value for string enums" time="0.0001014">
        </testcase>
        <testcase classname="src/utils/settingsUtils.test.ts" name="SettingsUtils &gt; Business Logic Utilities &gt; getDisplayValue &gt; should show value without * when setting matches default" time="0.0002587">
        </testcase>
        <testcase classname="src/utils/settingsUtils.test.ts" name="SettingsUtils &gt; Business Logic Utilities &gt; getDisplayValue &gt; should show default value when setting is not in scope" time="0.000102">
        </testcase>
        <testcase classname="src/utils/settingsUtils.test.ts" name="SettingsUtils &gt; Business Logic Utilities &gt; getDisplayValue &gt; should show value with * when changed from default" time="0.0000976">
        </testcase>
        <testcase classname="src/utils/settingsUtils.test.ts" name="SettingsUtils &gt; Business Logic Utilities &gt; getDisplayValue &gt; should show default value without * when setting does not exist in scope" time="0.0000919">
        </testcase>
        <testcase classname="src/utils/settingsUtils.test.ts" name="SettingsUtils &gt; Business Logic Utilities &gt; getDisplayValue &gt; should show value with * when user changes from default" time="0.0000963">
        </testcase>
        <testcase classname="src/utils/settingsUtils.test.ts" name="SettingsUtils &gt; Business Logic Utilities &gt; isDefaultValue &gt; should return true when setting does not exist in scope" time="0.0001005">
        </testcase>
        <testcase classname="src/utils/settingsUtils.test.ts" name="SettingsUtils &gt; Business Logic Utilities &gt; isDefaultValue &gt; should return false when setting exists in scope" time="0.0000794">
        </testcase>
        <testcase classname="src/utils/settingsUtils.test.ts" name="SettingsUtils &gt; Business Logic Utilities &gt; isDefaultValue &gt; should return true when nested setting does not exist in scope" time="0.0000752">
        </testcase>
        <testcase classname="src/utils/settingsUtils.test.ts" name="SettingsUtils &gt; Business Logic Utilities &gt; isDefaultValue &gt; should return false when nested setting exists in scope" time="0.0000792">
        </testcase>
        <testcase classname="src/utils/settingsUtils.test.ts" name="SettingsUtils &gt; Business Logic Utilities &gt; isValueInherited &gt; should return false for top-level settings that exist in scope" time="0.000097">
        </testcase>
        <testcase classname="src/utils/settingsUtils.test.ts" name="SettingsUtils &gt; Business Logic Utilities &gt; isValueInherited &gt; should return true for top-level settings that do not exist in scope" time="0.0000755">
        </testcase>
        <testcase classname="src/utils/settingsUtils.test.ts" name="SettingsUtils &gt; Business Logic Utilities &gt; isValueInherited &gt; should return false for nested settings that exist in scope" time="0.0001027">
        </testcase>
        <testcase classname="src/utils/settingsUtils.test.ts" name="SettingsUtils &gt; Business Logic Utilities &gt; isValueInherited &gt; should return true for nested settings that do not exist in scope" time="0.0000746">
        </testcase>
        <testcase classname="src/utils/settingsUtils.test.ts" name="SettingsUtils &gt; Business Logic Utilities &gt; getEffectiveDisplayValue &gt; should return value from settings when available" time="0.0001019">
        </testcase>
        <testcase classname="src/utils/settingsUtils.test.ts" name="SettingsUtils &gt; Business Logic Utilities &gt; getEffectiveDisplayValue &gt; should return value from merged settings when not in scope" time="0.0000845">
        </testcase>
        <testcase classname="src/utils/settingsUtils.test.ts" name="SettingsUtils &gt; Business Logic Utilities &gt; getEffectiveDisplayValue &gt; should return default value for undefined values" time="0.0000842">
        </testcase>
    </testsuite>
    <testsuite name="src/utils/startupWarnings.test.ts" timestamp="2025-09-23T13:52:09.589Z" hostname="WIN-33AANMPCPKN" tests="4" failures="0" errors="0" skipped="4" time="0">
        <testcase classname="src/utils/startupWarnings.test.ts" name="startupWarnings &gt; should return warnings from the file and delete it" time="0">
            <skipped/>
        </testcase>
        <testcase classname="src/utils/startupWarnings.test.ts" name="startupWarnings &gt; should return an empty array if the file does not exist" time="0">
            <skipped/>
        </testcase>
        <testcase classname="src/utils/startupWarnings.test.ts" name="startupWarnings &gt; should return an error message if reading the file fails" time="0">
            <skipped/>
        </testcase>
        <testcase classname="src/utils/startupWarnings.test.ts" name="startupWarnings &gt; should return a warning if deleting the file fails" time="0">
            <skipped/>
        </testcase>
    </testsuite>
    <testsuite name="src/utils/userStartupWarnings.test.ts" timestamp="2025-09-23T13:52:09.590Z" hostname="WIN-33AANMPCPKN" tests="5" failures="0" errors="0" skipped="0" time="0.0181698">
        <testcase classname="src/utils/userStartupWarnings.test.ts" name="getUserStartupWarnings &gt; home directory check &gt; should return a warning when running in home directory" time="0.0073082">
        </testcase>
        <testcase classname="src/utils/userStartupWarnings.test.ts" name="getUserStartupWarnings &gt; home directory check &gt; should not return a warning when running in a project directory" time="0.0023255">
        </testcase>
        <testcase classname="src/utils/userStartupWarnings.test.ts" name="getUserStartupWarnings &gt; root directory check &gt; should return a warning when running in a root directory" time="0.002576">
        </testcase>
        <testcase classname="src/utils/userStartupWarnings.test.ts" name="getUserStartupWarnings &gt; root directory check &gt; should not return a warning when running in a non-root directory" time="0.0021918">
        </testcase>
        <testcase classname="src/utils/userStartupWarnings.test.ts" name="getUserStartupWarnings &gt; error handling &gt; should handle errors when checking directory" time="0.0021189">
        </testcase>
    </testsuite>
    <testsuite name="src/commands/extensions/install.test.ts" timestamp="2025-09-23T13:52:09.591Z" hostname="WIN-33AANMPCPKN" tests="11" failures="0" errors="0" skipped="0" time="0.0487169">
        <testcase classname="src/commands/extensions/install.test.ts" name="extensions install command &gt; should fail if no source is provided" time="0.031958">
        </testcase>
        <testcase classname="src/commands/extensions/install.test.ts" name="extensions install command &gt; should fail if both git source and local path are provided" time="0.003534">
        </testcase>
        <testcase classname="src/commands/extensions/install.test.ts" name="extensions install command &gt; should fail if both auto update and local path are provided" time="0.0021861">
        </testcase>
        <testcase classname="src/commands/extensions/install.test.ts" name="handleInstall &gt; should install an extension from a http source" time="0.0053101">
            <system-out>
Extension &quot;http-extension&quot; installed successfully and enabled.

            </system-out>
        </testcase>
        <testcase classname="src/commands/extensions/install.test.ts" name="handleInstall &gt; should install an extension from a https source" time="0.0008067">
            <system-out>
Extension &quot;https-extension&quot; installed successfully and enabled.

            </system-out>
        </testcase>
        <testcase classname="src/commands/extensions/install.test.ts" name="handleInstall &gt; should install an extension from a git source" time="0.0010142">
            <system-out>
Extension &quot;git-extension&quot; installed successfully and enabled.

            </system-out>
        </testcase>
        <testcase classname="src/commands/extensions/install.test.ts" name="handleInstall &gt; throws an error from an unknown source" time="0.000756">
            <system-err>
The source &quot;test://google.com&quot; is not a valid URL format.

            </system-err>
        </testcase>
        <testcase classname="src/commands/extensions/install.test.ts" name="handleInstall &gt; should install an extension from a sso source" time="0.0003291">
            <system-out>
Extension &quot;sso-extension&quot; installed successfully and enabled.

            </system-out>
        </testcase>
        <testcase classname="src/commands/extensions/install.test.ts" name="handleInstall &gt; should install an extension from a local path" time="0.0003435">
            <system-out>
Extension &quot;local-extension&quot; installed successfully and enabled.

            </system-out>
        </testcase>
        <testcase classname="src/commands/extensions/install.test.ts" name="handleInstall &gt; should throw an error if no source or path is provided" time="0.000618">
            <system-err>
Either --source or --path must be provided.

            </system-err>
        </testcase>
        <testcase classname="src/commands/extensions/install.test.ts" name="handleInstall &gt; should throw an error if install extension fails" time="0.0004327">
            <system-err>
Install extension failed

            </system-err>
        </testcase>
    </testsuite>
    <testsuite name="src/commands/extensions/new.test.ts" timestamp="2025-09-23T13:52:09.592Z" hostname="WIN-33AANMPCPKN" tests="4" failures="0" errors="0" skipped="0" time="0.03903">
        <testcase classname="src/commands/extensions/new.test.ts" name="extensions new command &gt; should fail if no path is provided" time="0.011786">
        </testcase>
        <testcase classname="src/commands/extensions/new.test.ts" name="extensions new command &gt; should fail if no template is provided" time="0.0013244">
        </testcase>
        <testcase classname="src/commands/extensions/new.test.ts" name="extensions new command &gt; should create directory and copy files when path does not exist" time="0.0203089">
            <system-out>
Successfully created new extension from template &quot;context&quot; at /some/path.
You can install this using &quot;gemini extensions link /some/path&quot; to test it out.

            </system-out>
        </testcase>
        <testcase classname="src/commands/extensions/new.test.ts" name="extensions new command &gt; should throw an error if the path already exists" time="0.0043328">
            <system-err>
Path already exists: /some/path

            </system-err>
        </testcase>
    </testsuite>
    <testsuite name="src/commands/extensions/uninstall.test.ts" timestamp="2025-09-23T13:52:09.593Z" hostname="WIN-33AANMPCPKN" tests="1" failures="0" errors="0" skipped="0" time="0.011">
        <testcase classname="src/commands/extensions/uninstall.test.ts" name="extensions uninstall command &gt; should fail if no source is provided" time="0.0097945">
        </testcase>
    </testsuite>
    <testsuite name="src/commands/mcp/add.test.ts" timestamp="2025-09-23T13:52:09.593Z" hostname="WIN-33AANMPCPKN" tests="17" failures="0" errors="0" skipped="0" time="0.1917094">
        <testcase classname="src/commands/mcp/add.test.ts" name="mcp add command &gt; should add a stdio server to project settings" time="0.0545462">
            <system-out>
MCP server &quot;my-server&quot; added to project settings. (stdio)

            </system-out>
        </testcase>
        <testcase classname="src/commands/mcp/add.test.ts" name="mcp add command &gt; should add an sse server to user settings" time="0.0048271">
            <system-out>
MCP server &quot;sse-server&quot; added to user settings. (sse)

            </system-out>
        </testcase>
        <testcase classname="src/commands/mcp/add.test.ts" name="mcp add command &gt; should add an http server to project settings" time="0.0030709">
            <system-out>
MCP server &quot;http-server&quot; added to project settings. (http)

            </system-out>
        </testcase>
        <testcase classname="src/commands/mcp/add.test.ts" name="mcp add command &gt; should handle MCP server args with -- separator" time="0.0230023">
            <system-out>
MCP server &quot;my-server&quot; added to project settings. (stdio)

            </system-out>
        </testcase>
        <testcase classname="src/commands/mcp/add.test.ts" name="mcp add command &gt; should handle unknown options as MCP server args" time="0.0037133">
            <system-out>
MCP server &quot;test-server&quot; added to project settings. (stdio)

            </system-out>
        </testcase>
        <testcase classname="src/commands/mcp/add.test.ts" name="mcp add command &gt; when handling scope and directory &gt; when in a project directory &gt; should use project scope by default" time="0.0196469">
            <system-out>
MCP server &quot;test-server&quot; added to project settings. (stdio)

            </system-out>
        </testcase>
        <testcase classname="src/commands/mcp/add.test.ts" name="mcp add command &gt; when handling scope and directory &gt; when in a project directory &gt; should use project scope when --scope=project is used" time="0.003727">
            <system-out>
MCP server &quot;test-server&quot; added to project settings. (stdio)

            </system-out>
        </testcase>
        <testcase classname="src/commands/mcp/add.test.ts" name="mcp add command &gt; when handling scope and directory &gt; when in a project directory &gt; should use user scope when --scope=user is used" time="0.0135289">
            <system-out>
MCP server &quot;test-server&quot; added to user settings. (stdio)

            </system-out>
        </testcase>
        <testcase classname="src/commands/mcp/add.test.ts" name="mcp add command &gt; when handling scope and directory &gt; when in a subdirectory of a project &gt; should use project scope by default" time="0.0039453">
            <system-out>
MCP server &quot;test-server&quot; added to project settings. (stdio)

            </system-out>
        </testcase>
        <testcase classname="src/commands/mcp/add.test.ts" name="mcp add command &gt; when handling scope and directory &gt; when in the home directory &gt; should show an error by default" time="0.0055832">
        </testcase>
        <testcase classname="src/commands/mcp/add.test.ts" name="mcp add command &gt; when handling scope and directory &gt; when in the home directory &gt; should show an error when --scope=project is used explicitly" time="0.0038754">
        </testcase>
        <testcase classname="src/commands/mcp/add.test.ts" name="mcp add command &gt; when handling scope and directory &gt; when in the home directory &gt; should use user scope when --scope=user is used" time="0.0166171">
            <system-out>
MCP server &quot;test-server&quot; added to user settings. (stdio)

            </system-out>
        </testcase>
        <testcase classname="src/commands/mcp/add.test.ts" name="mcp add command &gt; when handling scope and directory &gt; when in a subdirectory of home (not a project) &gt; should use project scope by default" time="0.0060689">
            <system-out>
MCP server &quot;test-server&quot; added to project settings. (stdio)

            </system-out>
        </testcase>
        <testcase classname="src/commands/mcp/add.test.ts" name="mcp add command &gt; when handling scope and directory &gt; when in a subdirectory of home (not a project) &gt; should write to the WORKSPACE scope, not the USER scope" time="0.0050005">
            <system-out>
MCP server &quot;my-new-server&quot; added to project settings. (stdio)

            </system-out>
        </testcase>
        <testcase classname="src/commands/mcp/add.test.ts" name="mcp add command &gt; when handling scope and directory &gt; when outside of home (not a project) &gt; should use project scope by default" time="0.0030837">
            <system-out>
MCP server &quot;test-server&quot; added to project settings. (stdio)

            </system-out>
        </testcase>
        <testcase classname="src/commands/mcp/add.test.ts" name="mcp add command &gt; when updating an existing server &gt; should update the existing server in the project scope" time="0.0123278">
            <system-out>
MCP server &quot;existing-server&quot; is already configured within project settings.
MCP server &quot;existing-server&quot; updated in project settings.

            </system-out>
        </testcase>
        <testcase classname="src/commands/mcp/add.test.ts" name="mcp add command &gt; when updating an existing server &gt; should update the existing server in the user scope" time="0.0066604">
            <system-out>
MCP server &quot;existing-server&quot; is already configured within user settings.
MCP server &quot;existing-server&quot; updated in user settings.

            </system-out>
        </testcase>
    </testsuite>
    <testsuite name="src/commands/mcp/list.test.ts" timestamp="2025-09-23T13:52:09.597Z" hostname="WIN-33AANMPCPKN" tests="4" failures="0" errors="0" skipped="0" time="0.0196698">
        <testcase classname="src/commands/mcp/list.test.ts" name="mcp list command &gt; should display message when no servers configured" time="0.0137603">
        </testcase>
        <testcase classname="src/commands/mcp/list.test.ts" name="mcp list command &gt; should display different server types with connected status" time="0.0030026">
        </testcase>
        <testcase classname="src/commands/mcp/list.test.ts" name="mcp list command &gt; should display disconnected status when connection fails" time="0.0006598">
        </testcase>
        <testcase classname="src/commands/mcp/list.test.ts" name="mcp list command &gt; should merge extension servers with config servers" time="0.0006064">
        </testcase>
    </testsuite>
    <testsuite name="src/commands/mcp/remove.test.ts" timestamp="2025-09-23T13:52:09.597Z" hostname="WIN-33AANMPCPKN" tests="2" failures="0" errors="0" skipped="0" time="0.0596125">
        <testcase classname="src/commands/mcp/remove.test.ts" name="mcp remove command &gt; should remove a server from project settings" time="0.0319658">
            <system-out>
Server &quot;test-server&quot; removed from project settings.

            </system-out>
        </testcase>
        <testcase classname="src/commands/mcp/remove.test.ts" name="mcp remove command &gt; should show a message if server not found" time="0.0263376">
        </testcase>
    </testsuite>
    <testsuite name="src/config/extensions/extensionEnablement.test.ts" timestamp="2025-09-23T13:52:09.598Z" hostname="WIN-33AANMPCPKN" tests="36" failures="0" errors="0" skipped="0" time="0.1372986">
        <testcase classname="src/config/extensions/extensionEnablement.test.ts" name="ExtensionEnablementManager &gt; isEnabled &gt; should return true if extension is not configured" time="0.0034324">
        </testcase>
        <testcase classname="src/config/extensions/extensionEnablement.test.ts" name="ExtensionEnablementManager &gt; isEnabled &gt; should return true if no overrides match" time="0.0033857">
        </testcase>
        <testcase classname="src/config/extensions/extensionEnablement.test.ts" name="ExtensionEnablementManager &gt; isEnabled &gt; should enable a path based on an override rule" time="0.0028178">
        </testcase>
        <testcase classname="src/config/extensions/extensionEnablement.test.ts" name="ExtensionEnablementManager &gt; isEnabled &gt; should disable a path based on a disable override rule" time="0.0016333">
        </testcase>
        <testcase classname="src/config/extensions/extensionEnablement.test.ts" name="ExtensionEnablementManager &gt; isEnabled &gt; should respect the last matching rule (enable wins)" time="0.0026079">
        </testcase>
        <testcase classname="src/config/extensions/extensionEnablement.test.ts" name="ExtensionEnablementManager &gt; isEnabled &gt; should respect the last matching rule (disable wins)" time="0.0028586">
        </testcase>
        <testcase classname="src/config/extensions/extensionEnablement.test.ts" name="ExtensionEnablementManager &gt; isEnabled &gt; should handle" time="0.0019078">
        </testcase>
        <testcase classname="src/config/extensions/extensionEnablement.test.ts" name="ExtensionEnablementManager &gt; includeSubdirs &gt; should add a glob when enabling with includeSubdirs" time="0.0028001">
        </testcase>
        <testcase classname="src/config/extensions/extensionEnablement.test.ts" name="ExtensionEnablementManager &gt; includeSubdirs &gt; should not add a glob when enabling without includeSubdirs" time="0.0026439">
        </testcase>
        <testcase classname="src/config/extensions/extensionEnablement.test.ts" name="ExtensionEnablementManager &gt; includeSubdirs &gt; should add a glob when disabling with includeSubdirs" time="0.0019424">
        </testcase>
        <testcase classname="src/config/extensions/extensionEnablement.test.ts" name="ExtensionEnablementManager &gt; includeSubdirs &gt; should remove conflicting glob rule when enabling without subdirs" time="0.0656531">
        </testcase>
        <testcase classname="src/config/extensions/extensionEnablement.test.ts" name="ExtensionEnablementManager &gt; includeSubdirs &gt; should remove conflicting non-glob rule when enabling with subdirs" time="0.0017492">
        </testcase>
        <testcase classname="src/config/extensions/extensionEnablement.test.ts" name="ExtensionEnablementManager &gt; includeSubdirs &gt; should remove conflicting rules when disabling" time="0.0017503">
        </testcase>
        <testcase classname="src/config/extensions/extensionEnablement.test.ts" name="ExtensionEnablementManager &gt; includeSubdirs &gt; should correctly evaluate isEnabled with subdirs" time="0.0036567">
        </testcase>
        <testcase classname="src/config/extensions/extensionEnablement.test.ts" name="ExtensionEnablementManager &gt; includeSubdirs &gt; should correctly evaluate isEnabled without subdirs" time="0.0030727">
        </testcase>
        <testcase classname="src/config/extensions/extensionEnablement.test.ts" name="ExtensionEnablementManager &gt; pruning child rules &gt; should remove child rules when enabling a parent with subdirs" time="0.0051769">
        </testcase>
        <testcase classname="src/config/extensions/extensionEnablement.test.ts" name="ExtensionEnablementManager &gt; pruning child rules &gt; should remove child rules when disabling a parent with subdirs" time="0.0157313">
        </testcase>
        <testcase classname="src/config/extensions/extensionEnablement.test.ts" name="ExtensionEnablementManager &gt; pruning child rules &gt; should not remove child rules if includeSubdirs is false" time="0.0046132">
        </testcase>
        <testcase classname="src/config/extensions/extensionEnablement.test.ts" name="ExtensionEnablementManager &gt; should enable a path based on an enable override" time="0.0050106">
        </testcase>
        <testcase classname="src/config/extensions/extensionEnablement.test.ts" name="ExtensionEnablementManager &gt; should ignore subdirs" time="0.0017945">
        </testcase>
        <testcase classname="src/config/extensions/extensionEnablement.test.ts" name="Override &gt; should create an override from input" time="0.0001856">
        </testcase>
        <testcase classname="src/config/extensions/extensionEnablement.test.ts" name="Override &gt; should create a disable override from input" time="0.0001151">
        </testcase>
        <testcase classname="src/config/extensions/extensionEnablement.test.ts" name="Override &gt; should create an override from a file rule" time="0.0001036">
        </testcase>
        <testcase classname="src/config/extensions/extensionEnablement.test.ts" name="Override &gt; should create a disable override from a file rule" time="0.000097">
        </testcase>
        <testcase classname="src/config/extensions/extensionEnablement.test.ts" name="Override &gt; should create an override with subdirs from a file rule" time="0.0000949">
        </testcase>
        <testcase classname="src/config/extensions/extensionEnablement.test.ts" name="Override &gt; should correctly identify conflicting overrides" time="0.000077">
        </testcase>
        <testcase classname="src/config/extensions/extensionEnablement.test.ts" name="Override &gt; should correctly identify non-conflicting overrides" time="0.0000737">
        </testcase>
        <testcase classname="src/config/extensions/extensionEnablement.test.ts" name="Override &gt; should correctly identify equal overrides" time="0.0000609">
        </testcase>
        <testcase classname="src/config/extensions/extensionEnablement.test.ts" name="Override &gt; should correctly identify unequal overrides" time="0.000061">
        </testcase>
        <testcase classname="src/config/extensions/extensionEnablement.test.ts" name="Override &gt; should generate the correct regex" time="0.0001067">
        </testcase>
        <testcase classname="src/config/extensions/extensionEnablement.test.ts" name="Override &gt; should correctly identify child overrides" time="0.0000634">
        </testcase>
        <testcase classname="src/config/extensions/extensionEnablement.test.ts" name="Override &gt; should correctly identify child overrides with glob" time="0.0001145">
        </testcase>
        <testcase classname="src/config/extensions/extensionEnablement.test.ts" name="Override &gt; should correctly identify non-child overrides" time="0.0000638">
        </testcase>
        <testcase classname="src/config/extensions/extensionEnablement.test.ts" name="Override &gt; should generate the correct output string" time="0.000058">
        </testcase>
        <testcase classname="src/config/extensions/extensionEnablement.test.ts" name="Override &gt; should generate the correct output string for a disable override" time="0.0000605">
        </testcase>
        <testcase classname="src/config/extensions/extensionEnablement.test.ts" name="Override &gt; should disable a path based on a disable override rule" time="0.0000555">
        </testcase>
    </testsuite>
    <testsuite name="src/config/extensions/github.test.ts" timestamp="2025-09-23T13:52:09.602Z" hostname="WIN-33AANMPCPKN" tests="21" failures="0" errors="0" skipped="0" time="0.0137413">
        <testcase classname="src/config/extensions/github.test.ts" name="git extension helpers &gt; cloneFromGit &gt; should clone, fetch and checkout a repo" time="0.0032167">
        </testcase>
        <testcase classname="src/config/extensions/github.test.ts" name="git extension helpers &gt; cloneFromGit &gt; should use HEAD if ref is not provided" time="0.0002117">
        </testcase>
        <testcase classname="src/config/extensions/github.test.ts" name="git extension helpers &gt; cloneFromGit &gt; should throw if no remotes are found" time="0.0012973">
        </testcase>
        <testcase classname="src/config/extensions/github.test.ts" name="git extension helpers &gt; cloneFromGit &gt; should throw on clone error" time="0.0002837">
        </testcase>
        <testcase classname="src/config/extensions/github.test.ts" name="git extension helpers &gt; checkForExtensionUpdate &gt; should return NOT_UPDATABLE for non-git extensions" time="0.0006573">
        </testcase>
        <testcase classname="src/config/extensions/github.test.ts" name="git extension helpers &gt; checkForExtensionUpdate &gt; should return ERROR if no remotes found" time="0.0014943">
            <system-err>
No git remotes found.

            </system-err>
        </testcase>
        <testcase classname="src/config/extensions/github.test.ts" name="git extension helpers &gt; checkForExtensionUpdate &gt; should return UPDATE_AVAILABLE when remote hash is different" time="0.000185">
        </testcase>
        <testcase classname="src/config/extensions/github.test.ts" name="git extension helpers &gt; checkForExtensionUpdate &gt; should return UP_TO_DATE when remote and local hashes are the same" time="0.0001474">
        </testcase>
        <testcase classname="src/config/extensions/github.test.ts" name="git extension helpers &gt; checkForExtensionUpdate &gt; should return ERROR on git error" time="0.000299">
            <system-err>
Failed to check for updates for extension &quot;my/ext&quot;: git error

            </system-err>
        </testcase>
        <testcase classname="src/config/extensions/github.test.ts" name="git extension helpers &gt; findReleaseAsset &gt; should find asset matching platform and architecture" time="0.0003626">
        </testcase>
        <testcase classname="src/config/extensions/github.test.ts" name="git extension helpers &gt; findReleaseAsset &gt; should find asset matching platform if arch does not match" time="0.0001244">
        </testcase>
        <testcase classname="src/config/extensions/github.test.ts" name="git extension helpers &gt; findReleaseAsset &gt; should return undefined if no matching asset is found" time="0.0001365">
        </testcase>
        <testcase classname="src/config/extensions/github.test.ts" name="git extension helpers &gt; findReleaseAsset &gt; should find generic asset if it is the only one" time="0.0001252">
        </testcase>
        <testcase classname="src/config/extensions/github.test.ts" name="git extension helpers &gt; findReleaseAsset &gt; should return undefined if multiple generic assets exist" time="0.0001037">
        </testcase>
        <testcase classname="src/config/extensions/github.test.ts" name="git extension helpers &gt; parseGitHubRepoForReleases &gt; should parse owner and repo from a full GitHub URL" time="0.0008221">
        </testcase>
        <testcase classname="src/config/extensions/github.test.ts" name="git extension helpers &gt; parseGitHubRepoForReleases &gt; should parse owner and repo from a full GitHub UR without .git" time="0.0008618">
        </testcase>
        <testcase classname="src/config/extensions/github.test.ts" name="git extension helpers &gt; parseGitHubRepoForReleases &gt; should fail on a GitHub SSH URL" time="0.0006381">
        </testcase>
        <testcase classname="src/config/extensions/github.test.ts" name="git extension helpers &gt; parseGitHubRepoForReleases &gt; should parse owner and repo from a shorthand string" time="0.0003439">
        </testcase>
        <testcase classname="src/config/extensions/github.test.ts" name="git extension helpers &gt; parseGitHubRepoForReleases &gt; should handle .git suffix in repo name" time="0.000278">
        </testcase>
        <testcase classname="src/config/extensions/github.test.ts" name="git extension helpers &gt; parseGitHubRepoForReleases &gt; should throw error for invalid source format" time="0.0003427">
        </testcase>
        <testcase classname="src/config/extensions/github.test.ts" name="git extension helpers &gt; parseGitHubRepoForReleases &gt; should throw error for source with too many parts" time="0.0003911">
        </testcase>
    </testsuite>
    <testsuite name="src/config/extensions/update.test.ts" timestamp="2025-09-23T13:52:09.605Z" hostname="WIN-33AANMPCPKN" tests="8" failures="0" errors="0" skipped="0" time="0.9765815">
        <testcase classname="src/config/extensions/update.test.ts" name="update tests &gt; updateExtension &gt; should update a git-installed extension" time="0.7913923">
        </testcase>
        <testcase classname="src/config/extensions/update.test.ts" name="update tests &gt; updateExtension &gt; should call setExtensionUpdateState with UPDATING and then UPDATED_NEEDS_RESTART on success" time="0.0555931">
        </testcase>
        <testcase classname="src/config/extensions/update.test.ts" name="update tests &gt; updateExtension &gt; should call setExtensionUpdateState with ERROR on failure" time="0.0430558">
            <system-err>
Error updating extension, rolling back. Failed to clone Git repository from https://some.git/repo

            </system-err>
        </testcase>
        <testcase classname="src/config/extensions/update.test.ts" name="update tests &gt; checkForAllExtensionUpdates &gt; should return UpdateAvailable for a git extension with updates" time="0.0050738">
        </testcase>
        <testcase classname="src/config/extensions/update.test.ts" name="update tests &gt; checkForAllExtensionUpdates &gt; should return UpToDate for a git extension with no updates" time="0.0052697">
        </testcase>
        <testcase classname="src/config/extensions/update.test.ts" name="update tests &gt; checkForAllExtensionUpdates &gt; should return UpToDate for a local extension with no updates" time="0.0610489">
        </testcase>
        <testcase classname="src/config/extensions/update.test.ts" name="update tests &gt; checkForAllExtensionUpdates &gt; should return UpdateAvailable for a local extension with updates" time="0.0085091">
        </testcase>
        <testcase classname="src/config/extensions/update.test.ts" name="update tests &gt; checkForAllExtensionUpdates &gt; should return Error when git check fails" time="0.0047791">
            <system-err>
Failed to check for updates for extension &quot;https://some.git/repo&quot;: Git error

            </system-err>
        </testcase>
    </testsuite>
    <testsuite name="src/config/extensions/variables.test.ts" timestamp="2025-09-23T13:52:09.606Z" hostname="WIN-33AANMPCPKN" tests="1" failures="0" errors="0" skipped="0" time="0.0028928">
        <testcase classname="src/config/extensions/variables.test.ts" name="hydrateString &gt; should replace a single variable" time="0.0016375">
        </testcase>
    </testsuite>
    <testsuite name="src/services/prompt-processors/argumentProcessor.test.ts" timestamp="2025-09-23T13:52:09.606Z" hostname="WIN-33AANMPCPKN" tests="2" failures="0" errors="0" skipped="0" time="0.0064964">
        <testcase classname="src/services/prompt-processors/argumentProcessor.test.ts" name="Argument Processors &gt; DefaultArgumentProcessor &gt; should append the full command if args are provided" time="0.0044467">
        </testcase>
        <testcase classname="src/services/prompt-processors/argumentProcessor.test.ts" name="Argument Processors &gt; DefaultArgumentProcessor &gt; should NOT append the full command if no args are provided" time="0.0005097">
        </testcase>
    </testsuite>
    <testsuite name="src/services/prompt-processors/atFileProcessor.test.ts" timestamp="2025-09-23T13:52:09.607Z" hostname="WIN-33AANMPCPKN" tests="11" failures="0" errors="0" skipped="0" time="0.013752">
        <testcase classname="src/services/prompt-processors/atFileProcessor.test.ts" name="AtFileProcessor &gt; should not change the prompt if no @{ trigger is present" time="0.0029561">
        </testcase>
        <testcase classname="src/services/prompt-processors/atFileProcessor.test.ts" name="AtFileProcessor &gt; should not change the prompt if config service is missing" time="0.0005761">
        </testcase>
        <testcase classname="src/services/prompt-processors/atFileProcessor.test.ts" name="AtFileProcessor &gt; Parsing Logic &gt; should replace a single valid @{path/to/file.txt} placeholder" time="0.0012577">
        </testcase>
        <testcase classname="src/services/prompt-processors/atFileProcessor.test.ts" name="AtFileProcessor &gt; Parsing Logic &gt; should replace multiple different @{...} placeholders" time="0.000559">
        </testcase>
        <testcase classname="src/services/prompt-processors/atFileProcessor.test.ts" name="AtFileProcessor &gt; Parsing Logic &gt; should handle placeholders at the beginning, middle, and end" time="0.0003483">
        </testcase>
        <testcase classname="src/services/prompt-processors/atFileProcessor.test.ts" name="AtFileProcessor &gt; Parsing Logic &gt; should correctly parse paths that contain balanced braces" time="0.0003532">
        </testcase>
        <testcase classname="src/services/prompt-processors/atFileProcessor.test.ts" name="AtFileProcessor &gt; Parsing Logic &gt; should throw an error if the prompt contains an unclosed trigger" time="0.0013725">
        </testcase>
        <testcase classname="src/services/prompt-processors/atFileProcessor.test.ts" name="AtFileProcessor &gt; Integration and Error Handling &gt; should leave the placeholder unmodified if readPathFromWorkspace throws" time="0.0017162">
            <system-err>
[AtFileProcessor] Failed to inject content for &apos;@{not-found.txt}&apos;: File not found. Leaving placeholder in prompt.

            </system-err>
        </testcase>
        <testcase classname="src/services/prompt-processors/atFileProcessor.test.ts" name="AtFileProcessor &gt; UI Feedback &gt; should call ui.addItem with an ERROR on failure" time="0.0020364">
            <system-err>
[AtFileProcessor] Failed to inject content for &apos;@{bad-file.txt}&apos;: Access denied. Leaving placeholder in prompt.

            </system-err>
        </testcase>
        <testcase classname="src/services/prompt-processors/atFileProcessor.test.ts" name="AtFileProcessor &gt; UI Feedback &gt; should call ui.addItem with a WARNING if the file was ignored" time="0.0008075">
        </testcase>
        <testcase classname="src/services/prompt-processors/atFileProcessor.test.ts" name="AtFileProcessor &gt; UI Feedback &gt; should NOT call ui.addItem on success" time="0.0003647">
        </testcase>
    </testsuite>
    <testsuite name="src/services/prompt-processors/injectionParser.test.ts" timestamp="2025-09-23T13:52:09.610Z" hostname="WIN-33AANMPCPKN" tests="21" failures="0" errors="0" skipped="0" time="0.009353">
        <testcase classname="src/services/prompt-processors/injectionParser.test.ts" name="extractInjections &gt; Basic Functionality &gt; should return an empty array if no trigger is present" time="0.002237">
        </testcase>
        <testcase classname="src/services/prompt-processors/injectionParser.test.ts" name="extractInjections &gt; Basic Functionality &gt; should extract a single, simple injection" time="0.0003102">
        </testcase>
        <testcase classname="src/services/prompt-processors/injectionParser.test.ts" name="extractInjections &gt; Basic Functionality &gt; should extract multiple injections" time="0.0013112">
        </testcase>
        <testcase classname="src/services/prompt-processors/injectionParser.test.ts" name="extractInjections &gt; Basic Functionality &gt; should handle different triggers (e.g., @{)" time="0.0001482">
        </testcase>
        <testcase classname="src/services/prompt-processors/injectionParser.test.ts" name="extractInjections &gt; Positioning and Edge Cases &gt; should handle injections at the start and end of the prompt" time="0.0002693">
        </testcase>
        <testcase classname="src/services/prompt-processors/injectionParser.test.ts" name="extractInjections &gt; Positioning and Edge Cases &gt; should handle adjacent injections" time="0.000239">
        </testcase>
        <testcase classname="src/services/prompt-processors/injectionParser.test.ts" name="extractInjections &gt; Positioning and Edge Cases &gt; should handle empty injections" time="0.0001157">
        </testcase>
        <testcase classname="src/services/prompt-processors/injectionParser.test.ts" name="extractInjections &gt; Positioning and Edge Cases &gt; should trim whitespace within the content" time="0.0001165">
        </testcase>
        <testcase classname="src/services/prompt-processors/injectionParser.test.ts" name="extractInjections &gt; Positioning and Edge Cases &gt; should ignore similar patterns that are not the exact trigger" time="0.0001018">
        </testcase>
        <testcase classname="src/services/prompt-processors/injectionParser.test.ts" name="extractInjections &gt; Positioning and Edge Cases &gt; should ignore extra closing braces before the trigger" time="0.0001124">
        </testcase>
        <testcase classname="src/services/prompt-processors/injectionParser.test.ts" name="extractInjections &gt; Positioning and Edge Cases &gt; should stop parsing at the first balanced closing brace (non-greedy)" time="0.0002736">
        </testcase>
        <testcase classname="src/services/prompt-processors/injectionParser.test.ts" name="extractInjections &gt; Nested Braces (Balanced) &gt; should correctly parse content with simple nested braces (e.g., JSON)" time="0.0003078">
        </testcase>
        <testcase classname="src/services/prompt-processors/injectionParser.test.ts" name="extractInjections &gt; Nested Braces (Balanced) &gt; should correctly parse content with shell constructs (e.g., awk)" time="0.0001671">
        </testcase>
        <testcase classname="src/services/prompt-processors/injectionParser.test.ts" name="extractInjections &gt; Nested Braces (Balanced) &gt; should correctly parse multiple levels of nesting" time="0.0001845">
        </testcase>
        <testcase classname="src/services/prompt-processors/injectionParser.test.ts" name="extractInjections &gt; Nested Braces (Balanced) &gt; should correctly parse paths containing balanced braces" time="0.0001514">
        </testcase>
        <testcase classname="src/services/prompt-processors/injectionParser.test.ts" name="extractInjections &gt; Nested Braces (Balanced) &gt; should correctly handle an injection containing the trigger itself" time="0.0001492">
        </testcase>
        <testcase classname="src/services/prompt-processors/injectionParser.test.ts" name="extractInjections &gt; Error Handling (Unbalanced/Unclosed) &gt; should throw an error for a simple unclosed injection" time="0.000827">
        </testcase>
        <testcase classname="src/services/prompt-processors/injectionParser.test.ts" name="extractInjections &gt; Error Handling (Unbalanced/Unclosed) &gt; should throw an error if the prompt ends inside a nested block" time="0.0001701">
        </testcase>
        <testcase classname="src/services/prompt-processors/injectionParser.test.ts" name="extractInjections &gt; Error Handling (Unbalanced/Unclosed) &gt; should include the context name in the error message if provided" time="0.0001537">
        </testcase>
        <testcase classname="src/services/prompt-processors/injectionParser.test.ts" name="extractInjections &gt; Error Handling (Unbalanced/Unclosed) &gt; should throw if content contains unbalanced braces (e.g., missing closing)" time="0.000145">
        </testcase>
        <testcase classname="src/services/prompt-processors/injectionParser.test.ts" name="extractInjections &gt; Error Handling (Unbalanced/Unclosed) &gt; should clearly state that unbalanced braces in content are not supported in the error" time="0.0001383">
        </testcase>
    </testsuite>
    <testsuite name="src/services/prompt-processors/shellProcessor.test.ts" timestamp="2025-09-23T13:52:09.613Z" hostname="WIN-33AANMPCPKN" tests="33" failures="0" errors="0" skipped="0" time="0.0458558">
        <testcase classname="src/services/prompt-processors/shellProcessor.test.ts" name="ShellProcessor &gt; should throw an error if config is missing" time="0.0053709">
        </testcase>
        <testcase classname="src/services/prompt-processors/shellProcessor.test.ts" name="ShellProcessor &gt; should not change the prompt if no shell injections are present" time="0.0018777">
        </testcase>
        <testcase classname="src/services/prompt-processors/shellProcessor.test.ts" name="ShellProcessor &gt; should process a single valid shell injection if allowed" time="0.0036181">
        </testcase>
        <testcase classname="src/services/prompt-processors/shellProcessor.test.ts" name="ShellProcessor &gt; should process multiple valid shell injections if all are allowed" time="0.0010238">
        </testcase>
        <testcase classname="src/services/prompt-processors/shellProcessor.test.ts" name="ShellProcessor &gt; should throw ConfirmationRequiredError if a command is not allowed in default mode" time="0.000778">
        </testcase>
        <testcase classname="src/services/prompt-processors/shellProcessor.test.ts" name="ShellProcessor &gt; should NOT throw ConfirmationRequiredError if a command is not allowed but approval mode is YOLO" time="0.0010131">
        </testcase>
        <testcase classname="src/services/prompt-processors/shellProcessor.test.ts" name="ShellProcessor &gt; should still throw an error for a hard-denied command even in YOLO mode" time="0.0008778">
        </testcase>
        <testcase classname="src/services/prompt-processors/shellProcessor.test.ts" name="ShellProcessor &gt; should throw ConfirmationRequiredError with the correct command" time="0.0008909">
        </testcase>
        <testcase classname="src/services/prompt-processors/shellProcessor.test.ts" name="ShellProcessor &gt; should throw ConfirmationRequiredError with multiple commands if multiple are disallowed" time="0.0009768">
        </testcase>
        <testcase classname="src/services/prompt-processors/shellProcessor.test.ts" name="ShellProcessor &gt; should not execute any commands if at least one requires confirmation" time="0.0008341">
        </testcase>
        <testcase classname="src/services/prompt-processors/shellProcessor.test.ts" name="ShellProcessor &gt; should only request confirmation for disallowed commands in a mixed prompt" time="0.0015296">
        </testcase>
        <testcase classname="src/services/prompt-processors/shellProcessor.test.ts" name="ShellProcessor &gt; should execute all commands if they are on the session allowlist" time="0.0013814">
        </testcase>
        <testcase classname="src/services/prompt-processors/shellProcessor.test.ts" name="ShellProcessor &gt; should trim whitespace from the command inside the injection before interpolation" time="0.0010103">
        </testcase>
        <testcase classname="src/services/prompt-processors/shellProcessor.test.ts" name="ShellProcessor &gt; should handle an empty command inside the injection gracefully (skips execution)" time="0.0008191">
        </testcase>
        <testcase classname="src/services/prompt-processors/shellProcessor.test.ts" name="ShellProcessor &gt; Error Reporting &gt; should append exit code and command name on failure" time="0.000977">
        </testcase>
        <testcase classname="src/services/prompt-processors/shellProcessor.test.ts" name="ShellProcessor &gt; Error Reporting &gt; should append signal info and command name if terminated by signal" time="0.0007872">
        </testcase>
        <testcase classname="src/services/prompt-processors/shellProcessor.test.ts" name="ShellProcessor &gt; Error Reporting &gt; should throw a detailed error if the shell fails to spawn" time="0.0008268">
        </testcase>
        <testcase classname="src/services/prompt-processors/shellProcessor.test.ts" name="ShellProcessor &gt; Error Reporting &gt; should report abort status with command name if aborted" time="0.0007969">
        </testcase>
        <testcase classname="src/services/prompt-processors/shellProcessor.test.ts" name="ShellProcessor &gt; Context-Aware Argument Interpolation ({{args}}) &gt; should perform raw replacement if no shell injections are present (optimization path)" time="0.000946">
        </testcase>
        <testcase classname="src/services/prompt-processors/shellProcessor.test.ts" name="ShellProcessor &gt; Context-Aware Argument Interpolation ({{args}}) &gt; should perform raw replacement outside !{} blocks" time="0.0015559">
        </testcase>
        <testcase classname="src/services/prompt-processors/shellProcessor.test.ts" name="ShellProcessor &gt; Context-Aware Argument Interpolation ({{args}}) &gt; should perform escaped replacement inside !{} blocks" time="0.0011576">
        </testcase>
        <testcase classname="src/services/prompt-processors/shellProcessor.test.ts" name="ShellProcessor &gt; Context-Aware Argument Interpolation ({{args}}) &gt; should handle both raw (outside) and escaped (inside) injection simultaneously" time="0.0009103">
        </testcase>
        <testcase classname="src/services/prompt-processors/shellProcessor.test.ts" name="ShellProcessor &gt; Context-Aware Argument Interpolation ({{args}}) &gt; should perform security checks on the final, resolved (escaped) command" time="0.0010003">
        </testcase>
        <testcase classname="src/services/prompt-processors/shellProcessor.test.ts" name="ShellProcessor &gt; Context-Aware Argument Interpolation ({{args}}) &gt; should report the resolved command if a hard denial occurs" time="0.000828">
        </testcase>
        <testcase classname="src/services/prompt-processors/shellProcessor.test.ts" name="ShellProcessor &gt; Real-World Escaping Scenarios &gt; should correctly handle multiline arguments" time="0.0007966">
        </testcase>
        <testcase classname="src/services/prompt-processors/shellProcessor.test.ts" name="ShellProcessor &gt; Real-World Escaping Scenarios &gt; should safely escape args containing &apos;spaces&apos;" time="0.0008027">
        </testcase>
        <testcase classname="src/services/prompt-processors/shellProcessor.test.ts" name="ShellProcessor &gt; Real-World Escaping Scenarios &gt; should safely escape args containing &apos;double quotes&apos;" time="0.0010394">
        </testcase>
        <testcase classname="src/services/prompt-processors/shellProcessor.test.ts" name="ShellProcessor &gt; Real-World Escaping Scenarios &gt; should safely escape args containing &apos;single quotes&apos;" time="0.0010078">
        </testcase>
        <testcase classname="src/services/prompt-processors/shellProcessor.test.ts" name="ShellProcessor &gt; Real-World Escaping Scenarios &gt; should safely escape args containing &apos;command substitution (backticks)&apos;" time="0.0014013">
        </testcase>
        <testcase classname="src/services/prompt-processors/shellProcessor.test.ts" name="ShellProcessor &gt; Real-World Escaping Scenarios &gt; should safely escape args containing &apos;command substitution (dollar)&apos;" time="0.0008514">
        </testcase>
        <testcase classname="src/services/prompt-processors/shellProcessor.test.ts" name="ShellProcessor &gt; Real-World Escaping Scenarios &gt; should safely escape args containing &apos;variable expansion&apos;" time="0.0010813">
        </testcase>
        <testcase classname="src/services/prompt-processors/shellProcessor.test.ts" name="ShellProcessor &gt; Real-World Escaping Scenarios &gt; should safely escape args containing &apos;command chaining (semicolon)&apos;" time="0.0010884">
        </testcase>
        <testcase classname="src/services/prompt-processors/shellProcessor.test.ts" name="ShellProcessor &gt; Real-World Escaping Scenarios &gt; should safely escape args containing &apos;command chaining (ampersand)&apos;" time="0.0008298">
        </testcase>
    </testsuite>
    <testsuite name="src/ui/auth/AuthDialog.test.tsx" timestamp="2025-09-23T13:52:09.616Z" hostname="WIN-33AANMPCPKN" tests="14" failures="0" errors="0" skipped="0" time="0.2523174">
        <testcase classname="src/ui/auth/AuthDialog.test.tsx" name="AuthDialog &gt; shows Cloud Shell option when in Cloud Shell environment" time="0.0561703">
        </testcase>
        <testcase classname="src/ui/auth/AuthDialog.test.tsx" name="AuthDialog &gt; filters auth types when enforcedType is set" time="0.0171151">
        </testcase>
        <testcase classname="src/ui/auth/AuthDialog.test.tsx" name="AuthDialog &gt; sets initial index to 0 when enforcedType is set" time="0.0109771">
        </testcase>
        <testcase classname="src/ui/auth/AuthDialog.test.tsx" name="AuthDialog &gt; selects initial auth type from settings" time="0.0118433">
        </testcase>
        <testcase classname="src/ui/auth/AuthDialog.test.tsx" name="AuthDialog &gt; selects initial auth type from GEMINI_DEFAULT_AUTH_TYPE env var" time="0.0121192">
        </testcase>
        <testcase classname="src/ui/auth/AuthDialog.test.tsx" name="AuthDialog &gt; selects initial auth type from GEMINI_API_KEY env var" time="0.0168567">
        </testcase>
        <testcase classname="src/ui/auth/AuthDialog.test.tsx" name="AuthDialog &gt; defaults to Login with Google" time="0.0105496">
        </testcase>
        <testcase classname="src/ui/auth/AuthDialog.test.tsx" name="AuthDialog &gt; handleAuthSelect &gt; calls onAuthError if validation fails" time="0.0116565">
        </testcase>
        <testcase classname="src/ui/auth/AuthDialog.test.tsx" name="AuthDialog &gt; handleAuthSelect &gt; calls onSelect if validation passes" time="0.0102905">
        </testcase>
        <testcase classname="src/ui/auth/AuthDialog.test.tsx" name="AuthDialog &gt; handleAuthSelect &gt; exits process for Login with Google when browser is suppressed" time="0.0122802">
        </testcase>
        <testcase classname="src/ui/auth/AuthDialog.test.tsx" name="AuthDialog &gt; displays authError when provided" time="0.0523803">
        </testcase>
        <testcase classname="src/ui/auth/AuthDialog.test.tsx" name="AuthDialog &gt; useKeypress &gt; does nothing on escape if authError is present" time="0.0103925">
        </testcase>
        <testcase classname="src/ui/auth/AuthDialog.test.tsx" name="AuthDialog &gt; useKeypress &gt; calls onAuthError on escape if no auth method is set" time="0.0090189">
        </testcase>
        <testcase classname="src/ui/auth/AuthDialog.test.tsx" name="AuthDialog &gt; useKeypress &gt; calls onSelect(undefined) on escape if auth method is set" time="0.0086121">
        </testcase>
    </testsuite>
    <testsuite name="src/ui/commands/aboutCommand.test.ts" timestamp="2025-09-23T13:52:09.619Z" hostname="WIN-33AANMPCPKN" tests="5" failures="0" errors="0" skipped="0" time="0.0130464">
        <testcase classname="src/ui/commands/aboutCommand.test.ts" name="aboutCommand &gt; should have the correct name and description" time="0.0029942">
        </testcase>
        <testcase classname="src/ui/commands/aboutCommand.test.ts" name="aboutCommand &gt; should call addItem with all version info" time="0.0051624">
        </testcase>
        <testcase classname="src/ui/commands/aboutCommand.test.ts" name="aboutCommand &gt; should show the correct sandbox environment variable" time="0.0014484">
        </testcase>
        <testcase classname="src/ui/commands/aboutCommand.test.ts" name="aboutCommand &gt; should show sandbox-exec profile when applicable" time="0.0007006">
        </testcase>
        <testcase classname="src/ui/commands/aboutCommand.test.ts" name="aboutCommand &gt; should not show ide client when it is not detected" time="0.001086">
        </testcase>
    </testsuite>
    <testsuite name="src/ui/commands/authCommand.test.ts" timestamp="2025-09-23T13:52:09.620Z" hostname="WIN-33AANMPCPKN" tests="2" failures="0" errors="0" skipped="0" time="0.0061326">
        <testcase classname="src/ui/commands/authCommand.test.ts" name="authCommand &gt; should return a dialog action to open the auth dialog" time="0.0037822">
        </testcase>
        <testcase classname="src/ui/commands/authCommand.test.ts" name="authCommand &gt; should have the correct name and description" time="0.000712">
        </testcase>
    </testsuite>
    <testsuite name="src/ui/commands/bugCommand.test.ts" timestamp="2025-09-23T13:52:09.621Z" hostname="WIN-33AANMPCPKN" tests="2" failures="0" errors="0" skipped="0" time="0.007728">
        <testcase classname="src/ui/commands/bugCommand.test.ts" name="bugCommand &gt; should generate the default GitHub issue URL" time="0.0052625">
        </testcase>
        <testcase classname="src/ui/commands/bugCommand.test.ts" name="bugCommand &gt; should use a custom URL template from config if provided" time="0.0009454">
        </testcase>
    </testsuite>
    <testsuite name="src/ui/commands/chatCommand.test.ts" timestamp="2025-09-23T13:52:09.621Z" hostname="WIN-33AANMPCPKN" tests="30" failures="0" errors="0" skipped="0" time="0.0611141">
        <testcase classname="src/ui/commands/chatCommand.test.ts" name="chatCommand &gt; should have the correct main command definition" time="0.0029243">
        </testcase>
        <testcase classname="src/ui/commands/chatCommand.test.ts" name="chatCommand &gt; list subcommand &gt; should inform when no checkpoints are found" time="0.00163">
        </testcase>
        <testcase classname="src/ui/commands/chatCommand.test.ts" name="chatCommand &gt; list subcommand &gt; should list found checkpoints" time="0.0012375">
        </testcase>
        <testcase classname="src/ui/commands/chatCommand.test.ts" name="chatCommand &gt; list subcommand &gt; should handle invalid date formats gracefully" time="0.0005512">
        </testcase>
        <testcase classname="src/ui/commands/chatCommand.test.ts" name="chatCommand &gt; save subcommand &gt; should return an error if tag is missing" time="0.0006022">
        </testcase>
        <testcase classname="src/ui/commands/chatCommand.test.ts" name="chatCommand &gt; save subcommand &gt; should inform if conversation history is empty or only contains system context" time="0.0007973">
        </testcase>
        <testcase classname="src/ui/commands/chatCommand.test.ts" name="chatCommand &gt; save subcommand &gt; should return confirm_action if checkpoint already exists" time="0.0023095">
        </testcase>
        <testcase classname="src/ui/commands/chatCommand.test.ts" name="chatCommand &gt; save subcommand &gt; should save the conversation if overwrite is confirmed" time="0.0010673">
        </testcase>
        <testcase classname="src/ui/commands/chatCommand.test.ts" name="chatCommand &gt; resume subcommand &gt; should return an error if tag is missing" time="0.0005988">
        </testcase>
        <testcase classname="src/ui/commands/chatCommand.test.ts" name="chatCommand &gt; resume subcommand &gt; should inform if checkpoint is not found" time="0.0005769">
        </testcase>
        <testcase classname="src/ui/commands/chatCommand.test.ts" name="chatCommand &gt; resume subcommand &gt; should resume a conversation" time="0.0006865">
        </testcase>
        <testcase classname="src/ui/commands/chatCommand.test.ts" name="chatCommand &gt; resume subcommand &gt; completion &gt; should provide completion suggestions" time="0.0006847">
        </testcase>
        <testcase classname="src/ui/commands/chatCommand.test.ts" name="chatCommand &gt; resume subcommand &gt; completion &gt; should suggest filenames sorted by modified time (newest first)" time="0.0019825">
        </testcase>
        <testcase classname="src/ui/commands/chatCommand.test.ts" name="chatCommand &gt; delete subcommand &gt; should return an error if tag is missing" time="0.0008605">
        </testcase>
        <testcase classname="src/ui/commands/chatCommand.test.ts" name="chatCommand &gt; delete subcommand &gt; should return an error if checkpoint is not found" time="0.0049999">
        </testcase>
        <testcase classname="src/ui/commands/chatCommand.test.ts" name="chatCommand &gt; delete subcommand &gt; should delete the conversation" time="0.0011253">
        </testcase>
        <testcase classname="src/ui/commands/chatCommand.test.ts" name="chatCommand &gt; delete subcommand &gt; completion &gt; should provide completion suggestions" time="0.0008645">
        </testcase>
        <testcase classname="src/ui/commands/chatCommand.test.ts" name="chatCommand &gt; share subcommand &gt; should default to a json file if no path is provided" time="0.0013542">
        </testcase>
        <testcase classname="src/ui/commands/chatCommand.test.ts" name="chatCommand &gt; share subcommand &gt; should share the conversation to a JSON file" time="0.0008702">
        </testcase>
        <testcase classname="src/ui/commands/chatCommand.test.ts" name="chatCommand &gt; share subcommand &gt; should share the conversation to a Markdown file" time="0.0009447">
        </testcase>
        <testcase classname="src/ui/commands/chatCommand.test.ts" name="chatCommand &gt; share subcommand &gt; should return an error for unsupported file extensions" time="0.0007491">
        </testcase>
        <testcase classname="src/ui/commands/chatCommand.test.ts" name="chatCommand &gt; share subcommand &gt; should inform if there is no conversation to share" time="0.0007395">
        </testcase>
        <testcase classname="src/ui/commands/chatCommand.test.ts" name="chatCommand &gt; share subcommand &gt; should handle errors during file writing" time="0.0008176">
        </testcase>
        <testcase classname="src/ui/commands/chatCommand.test.ts" name="chatCommand &gt; share subcommand &gt; should output valid JSON schema" time="0.0010233">
        </testcase>
        <testcase classname="src/ui/commands/chatCommand.test.ts" name="chatCommand &gt; share subcommand &gt; should output correct markdown format" time="0.0196034">
        </testcase>
        <testcase classname="src/ui/commands/chatCommand.test.ts" name="chatCommand &gt; serializeHistoryToMarkdown &gt; should correctly serialize chat history to Markdown with icons" time="0.001624">
        </testcase>
        <testcase classname="src/ui/commands/chatCommand.test.ts" name="chatCommand &gt; serializeHistoryToMarkdown &gt; should handle empty history" time="0.0017425">
        </testcase>
        <testcase classname="src/ui/commands/chatCommand.test.ts" name="chatCommand &gt; serializeHistoryToMarkdown &gt; should handle items with no text parts" time="0.0041519">
        </testcase>
        <testcase classname="src/ui/commands/chatCommand.test.ts" name="chatCommand &gt; serializeHistoryToMarkdown &gt; should correctly serialize function calls and responses" time="0.001093">
        </testcase>
        <testcase classname="src/ui/commands/chatCommand.test.ts" name="chatCommand &gt; serializeHistoryToMarkdown &gt; should handle items with undefined role" time="0.000866">
        </testcase>
    </testsuite>
    <testsuite name="src/ui/commands/clearCommand.test.ts" timestamp="2025-09-23T13:52:09.626Z" hostname="WIN-33AANMPCPKN" tests="2" failures="0" errors="0" skipped="0" time="0.0058433">
        <testcase classname="src/ui/commands/clearCommand.test.ts" name="clearCommand &gt; should set debug message, reset chat, reset telemetry, and clear UI when config is available" time="0.003861">
        </testcase>
        <testcase classname="src/ui/commands/clearCommand.test.ts" name="clearCommand &gt; should not attempt to reset chat if config service is not available" time="0.0009056">
        </testcase>
    </testsuite>
    <testsuite name="src/ui/commands/compressCommand.test.ts" timestamp="2025-09-23T13:52:09.626Z" hostname="WIN-33AANMPCPKN" tests="5" failures="0" errors="0" skipped="0" time="0.0099057">
        <testcase classname="src/ui/commands/compressCommand.test.ts" name="compressCommand &gt; should do nothing if a compression is already pending" time="0.0052128">
        </testcase>
        <testcase classname="src/ui/commands/compressCommand.test.ts" name="compressCommand &gt; should set pending item, call tryCompressChat, and add result on success" time="0.0018264">
        </testcase>
        <testcase classname="src/ui/commands/compressCommand.test.ts" name="compressCommand &gt; should add an error message if tryCompressChat returns falsy" time="0.0006414">
        </testcase>
        <testcase classname="src/ui/commands/compressCommand.test.ts" name="compressCommand &gt; should add an error message if tryCompressChat throws" time="0.0005495">
        </testcase>
        <testcase classname="src/ui/commands/compressCommand.test.ts" name="compressCommand &gt; should clear the pending item in a finally block" time="0.0003348">
        </testcase>
    </testsuite>
    <testsuite name="src/ui/commands/copyCommand.test.ts" timestamp="2025-09-23T13:52:09.627Z" hostname="WIN-33AANMPCPKN" tests="11" failures="0" errors="0" skipped="0" time="0.011659">
        <testcase classname="src/ui/commands/copyCommand.test.ts" name="copyCommand &gt; should return info message when no history is available" time="0.0031632">
        </testcase>
        <testcase classname="src/ui/commands/copyCommand.test.ts" name="copyCommand &gt; should return info message when history is empty" time="0.0004812">
        </testcase>
        <testcase classname="src/ui/commands/copyCommand.test.ts" name="copyCommand &gt; should return info message when no AI messages are found in history" time="0.0003945">
        </testcase>
        <testcase classname="src/ui/commands/copyCommand.test.ts" name="copyCommand &gt; should copy last AI message to clipboard successfully" time="0.0010564">
        </testcase>
        <testcase classname="src/ui/commands/copyCommand.test.ts" name="copyCommand &gt; should handle multiple text parts in AI message" time="0.0004782">
        </testcase>
        <testcase classname="src/ui/commands/copyCommand.test.ts" name="copyCommand &gt; should filter out non-text parts" time="0.0003865">
        </testcase>
        <testcase classname="src/ui/commands/copyCommand.test.ts" name="copyCommand &gt; should get the last AI message when multiple AI messages exist" time="0.0003786">
        </testcase>
        <testcase classname="src/ui/commands/copyCommand.test.ts" name="copyCommand &gt; should handle clipboard copy error" time="0.0017628">
            <system-out>
Clipboard access denied

            </system-out>
        </testcase>
        <testcase classname="src/ui/commands/copyCommand.test.ts" name="copyCommand &gt; should handle non-Error clipboard errors" time="0.0005313">
            <system-out>
String error

            </system-out>
        </testcase>
        <testcase classname="src/ui/commands/copyCommand.test.ts" name="copyCommand &gt; should return info message when no text parts found in AI message" time="0.0007602">
        </testcase>
        <testcase classname="src/ui/commands/copyCommand.test.ts" name="copyCommand &gt; should handle unavailable config service" time="0.0008642">
        </testcase>
    </testsuite>
    <testsuite name="src/ui/commands/corgiCommand.test.ts" timestamp="2025-09-23T13:52:09.629Z" hostname="WIN-33AANMPCPKN" tests="2" failures="0" errors="0" skipped="0" time="0.0057969">
        <testcase classname="src/ui/commands/corgiCommand.test.ts" name="corgiCommand &gt; should call the toggleCorgiMode function on the UI context" time="0.003618">
        </testcase>
        <testcase classname="src/ui/commands/corgiCommand.test.ts" name="corgiCommand &gt; should have the correct name and description" time="0.0005781">
        </testcase>
    </testsuite>
    <testsuite name="src/ui/commands/directoryCommand.test.tsx" timestamp="2025-09-23T13:52:09.630Z" hostname="WIN-33AANMPCPKN" tests="7" failures="0" errors="0" skipped="0" time="0.0102382">
        <testcase classname="src/ui/commands/directoryCommand.test.tsx" name="directoryCommand &gt; show &gt; should display the list of directories" time="0.0052961">
        </testcase>
        <testcase classname="src/ui/commands/directoryCommand.test.tsx" name="directoryCommand &gt; add &gt; should show an error if no path is provided" time="0.0006933">
        </testcase>
        <testcase classname="src/ui/commands/directoryCommand.test.tsx" name="directoryCommand &gt; add &gt; should call addDirectory and show a success message for a single path" time="0.0008643">
        </testcase>
        <testcase classname="src/ui/commands/directoryCommand.test.tsx" name="directoryCommand &gt; add &gt; should call addDirectory for each path and show a success message for multiple paths" time="0.0005623">
        </testcase>
        <testcase classname="src/ui/commands/directoryCommand.test.tsx" name="directoryCommand &gt; add &gt; should show an error if addDirectory throws an exception" time="0.0004639">
        </testcase>
        <testcase classname="src/ui/commands/directoryCommand.test.tsx" name="directoryCommand &gt; add &gt; should handle a mix of successful and failed additions" time="0.0006877">
        </testcase>
        <testcase classname="src/ui/commands/directoryCommand.test.tsx" name="directoryCommand &gt; should correctly expand a Windows-style home directory path" time="0.0004492">
        </testcase>
    </testsuite>
    <testsuite name="src/ui/commands/docsCommand.test.ts" timestamp="2025-09-23T13:52:09.631Z" hostname="WIN-33AANMPCPKN" tests="3" failures="0" errors="0" skipped="0" time="0.0082662">
        <testcase classname="src/ui/commands/docsCommand.test.ts" name="docsCommand &gt; should add an info message and call &apos;open&apos; in a non-sandbox environment" time="0.0049391">
        </testcase>
        <testcase classname="src/ui/commands/docsCommand.test.ts" name="docsCommand &gt; should only add an info message in a sandbox environment" time="0.0009175">
        </testcase>
        <testcase classname="src/ui/commands/docsCommand.test.ts" name="docsCommand &gt; should not open browser for &apos;sandbox-exec&apos;" time="0.0009284">
        </testcase>
    </testsuite>
    <testsuite name="src/ui/commands/editorCommand.test.ts" timestamp="2025-09-23T13:52:09.632Z" hostname="WIN-33AANMPCPKN" tests="2" failures="0" errors="0" skipped="0" time="0.0044874">
        <testcase classname="src/ui/commands/editorCommand.test.ts" name="editorCommand &gt; should return a dialog action to open the editor dialog" time="0.002947">
        </testcase>
        <testcase classname="src/ui/commands/editorCommand.test.ts" name="editorCommand &gt; should have the correct name and description" time="0.0002295">
        </testcase>
    </testsuite>
    <testsuite name="src/ui/commands/extensionsCommand.test.ts" timestamp="2025-09-23T13:52:09.632Z" hostname="WIN-33AANMPCPKN" tests="8" failures="0" errors="0" skipped="0" time="0.010216">
        <testcase classname="src/ui/commands/extensionsCommand.test.ts" name="extensionsCommand &gt; list &gt; should add an EXTENSIONS_LIST item to the UI" time="0.0045588">
        </testcase>
        <testcase classname="src/ui/commands/extensionsCommand.test.ts" name="extensionsCommand &gt; update &gt; should show usage if no args are provided" time="0.001025">
        </testcase>
        <testcase classname="src/ui/commands/extensionsCommand.test.ts" name="extensionsCommand &gt; update &gt; should inform user if there are no extensions to update with --all" time="0.0004836">
        </testcase>
        <testcase classname="src/ui/commands/extensionsCommand.test.ts" name="extensionsCommand &gt; update &gt; should call setPendingItem and addItem in a finally block on success" time="0.0004835">
        </testcase>
        <testcase classname="src/ui/commands/extensionsCommand.test.ts" name="extensionsCommand &gt; update &gt; should call setPendingItem and addItem in a finally block on failure" time="0.0007925">
        </testcase>
        <testcase classname="src/ui/commands/extensionsCommand.test.ts" name="extensionsCommand &gt; update &gt; should update a single extension by name" time="0.0004763">
        </testcase>
        <testcase classname="src/ui/commands/extensionsCommand.test.ts" name="extensionsCommand &gt; update &gt; should handle errors when updating a single extension" time="0.0003953">
        </testcase>
        <testcase classname="src/ui/commands/extensionsCommand.test.ts" name="extensionsCommand &gt; update &gt; should update multiple extensions by name" time="0.0006851">
        </testcase>
    </testsuite>
    <testsuite name="src/ui/commands/helpCommand.test.ts" timestamp="2025-09-23T13:52:09.633Z" hostname="WIN-33AANMPCPKN" tests="2" failures="0" errors="0" skipped="0" time="0.0064917">
        <testcase classname="src/ui/commands/helpCommand.test.ts" name="helpCommand &gt; should add a help message to the UI history" time="0.0047412">
        </testcase>
        <testcase classname="src/ui/commands/helpCommand.test.ts" name="helpCommand &gt; should have the correct command properties" time="0.0006364">
        </testcase>
    </testsuite>
    <testsuite name="src/ui/commands/ideCommand.test.ts" timestamp="2025-09-23T13:52:09.633Z" hostname="WIN-33AANMPCPKN" tests="8" failures="0" errors="0" skipped="0" time="0.0149097">
        <testcase classname="src/ui/commands/ideCommand.test.ts" name="ideCommand &gt; should return the ide command" time="0.0032251">
        </testcase>
        <testcase classname="src/ui/commands/ideCommand.test.ts" name="ideCommand &gt; should show disable command when connected" time="0.0007748">
        </testcase>
        <testcase classname="src/ui/commands/ideCommand.test.ts" name="ideCommand &gt; status subcommand &gt; should show connected status" time="0.001235">
        </testcase>
        <testcase classname="src/ui/commands/ideCommand.test.ts" name="ideCommand &gt; status subcommand &gt; should show connecting status" time="0.0006558">
        </testcase>
        <testcase classname="src/ui/commands/ideCommand.test.ts" name="ideCommand &gt; status subcommand &gt; should show disconnected status" time="0.0004836">
        </testcase>
        <testcase classname="src/ui/commands/ideCommand.test.ts" name="ideCommand &gt; status subcommand &gt; should show disconnected status with details" time="0.0004997">
        </testcase>
        <testcase classname="src/ui/commands/ideCommand.test.ts" name="ideCommand &gt; install subcommand &gt; should install the extension" time="0.0059858">
        </testcase>
        <testcase classname="src/ui/commands/ideCommand.test.ts" name="ideCommand &gt; install subcommand &gt; should show an error if installation fails" time="0.0008008">
        </testcase>
    </testsuite>
    <testsuite name="src/ui/commands/initCommand.test.ts" timestamp="2025-09-23T13:52:09.634Z" hostname="WIN-33AANMPCPKN" tests="3" failures="0" errors="0" skipped="0" time="0.0094224">
        <testcase classname="src/ui/commands/initCommand.test.ts" name="initCommand &gt; should inform the user if GEMINI.md already exists" time="0.0039251">
        </testcase>
        <testcase classname="src/ui/commands/initCommand.test.ts" name="initCommand &gt; should create GEMINI.md and submit a prompt if it does not exist" time="0.0031934">
        </testcase>
        <testcase classname="src/ui/commands/initCommand.test.ts" name="initCommand &gt; should return an error if config is not available" time="0.0007367">
        </testcase>
    </testsuite>
    <testsuite name="src/ui/commands/mcpCommand.test.ts" timestamp="2025-09-23T13:52:09.634Z" hostname="WIN-33AANMPCPKN" tests="35" failures="0" errors="0" skipped="0" time="0.1825792">
        <testcase classname="src/ui/commands/mcpCommand.test.ts" name="mcpCommand &gt; basic functionality &gt; should show an error if config is not available" time="0.0032398">
        </testcase>
        <testcase classname="src/ui/commands/mcpCommand.test.ts" name="mcpCommand &gt; basic functionality &gt; should show an error if tool registry is not available" time="0.0007183">
        </testcase>
        <testcase classname="src/ui/commands/mcpCommand.test.ts" name="mcpCommand &gt; no MCP servers configured &gt; should display a message with a URL when no MCP servers are configured" time="0.0005225">
        </testcase>
        <testcase classname="src/ui/commands/mcpCommand.test.ts" name="mcpCommand &gt; with configured MCP servers &gt; should display configured MCP servers with status indicators and their tools" time="0.001742">
        </testcase>
        <testcase classname="src/ui/commands/mcpCommand.test.ts" name="mcpCommand &gt; with configured MCP servers &gt; should display tool descriptions when desc argument is used" time="0.001125">
        </testcase>
        <testcase classname="src/ui/commands/mcpCommand.test.ts" name="mcpCommand &gt; with configured MCP servers &gt; should not display descriptions when nodesc argument is used" time="0.0007117">
        </testcase>
        <testcase classname="src/ui/commands/mcpCommand.test.ts" name="mcpCommand &gt; with configured MCP servers &gt; should indicate when a server has no tools" time="0.0007888">
        </testcase>
        <testcase classname="src/ui/commands/mcpCommand.test.ts" name="mcpCommand &gt; with configured MCP servers &gt; should show startup indicator when servers are connecting" time="0.0006962">
        </testcase>
        <testcase classname="src/ui/commands/mcpCommand.test.ts" name="mcpCommand &gt; with configured MCP servers &gt; should display the extension name for servers from extensions" time="0.0004981">
        </testcase>
        <testcase classname="src/ui/commands/mcpCommand.test.ts" name="mcpCommand &gt; with configured MCP servers &gt; should display blocked MCP servers" time="0.000498">
        </testcase>
        <testcase classname="src/ui/commands/mcpCommand.test.ts" name="mcpCommand &gt; with configured MCP servers &gt; should display both active and blocked servers correctly" time="0.0006759">
        </testcase>
        <testcase classname="src/ui/commands/mcpCommand.test.ts" name="mcpCommand &gt; schema functionality &gt; should display tool schemas when schema argument is used" time="0.0014928">
        </testcase>
        <testcase classname="src/ui/commands/mcpCommand.test.ts" name="mcpCommand &gt; schema functionality &gt; should handle tools without parameter schemas gracefully" time="0.0008086">
        </testcase>
        <testcase classname="src/ui/commands/mcpCommand.test.ts" name="mcpCommand &gt; argument parsing &gt; should handle &quot;descriptions&quot; as alias for &quot;desc&quot;" time="0.0006963">
        </testcase>
        <testcase classname="src/ui/commands/mcpCommand.test.ts" name="mcpCommand &gt; argument parsing &gt; should handle &quot;nodescriptions&quot; as alias for &quot;nodesc&quot;" time="0.0006376">
        </testcase>
        <testcase classname="src/ui/commands/mcpCommand.test.ts" name="mcpCommand &gt; argument parsing &gt; should handle mixed case arguments" time="0.0006064">
        </testcase>
        <testcase classname="src/ui/commands/mcpCommand.test.ts" name="mcpCommand &gt; argument parsing &gt; should handle multiple arguments - &quot;schema desc&quot;" time="0.000775">
        </testcase>
        <testcase classname="src/ui/commands/mcpCommand.test.ts" name="mcpCommand &gt; argument parsing &gt; should handle multiple arguments - &quot;desc schema&quot;" time="0.0010253">
        </testcase>
        <testcase classname="src/ui/commands/mcpCommand.test.ts" name="mcpCommand &gt; argument parsing &gt; should handle &quot;schema&quot; alone showing descriptions" time="0.000944">
        </testcase>
        <testcase classname="src/ui/commands/mcpCommand.test.ts" name="mcpCommand &gt; argument parsing &gt; should handle &quot;nodesc&quot; overriding &quot;schema&quot; - &quot;schema nodesc&quot;" time="0.0008106">
        </testcase>
        <testcase classname="src/ui/commands/mcpCommand.test.ts" name="mcpCommand &gt; argument parsing &gt; should handle &quot;nodesc&quot; overriding &quot;desc&quot; - &quot;desc nodesc&quot;" time="0.0010992">
        </testcase>
        <testcase classname="src/ui/commands/mcpCommand.test.ts" name="mcpCommand &gt; argument parsing &gt; should handle &quot;nodesc&quot; overriding both &quot;desc&quot; and &quot;schema&quot; - &quot;desc schema nodesc&quot;" time="0.0006336">
        </testcase>
        <testcase classname="src/ui/commands/mcpCommand.test.ts" name="mcpCommand &gt; argument parsing &gt; should handle extra whitespace in arguments" time="0.0005766">
        </testcase>
        <testcase classname="src/ui/commands/mcpCommand.test.ts" name="mcpCommand &gt; argument parsing &gt; should handle empty arguments gracefully" time="0.0006065">
        </testcase>
        <testcase classname="src/ui/commands/mcpCommand.test.ts" name="mcpCommand &gt; argument parsing &gt; should handle unknown arguments gracefully" time="0.0043199">
        </testcase>
        <testcase classname="src/ui/commands/mcpCommand.test.ts" name="mcpCommand &gt; edge cases &gt; should handle empty server names gracefully" time="0.0008188">
        </testcase>
        <testcase classname="src/ui/commands/mcpCommand.test.ts" name="mcpCommand &gt; edge cases &gt; should handle servers with special characters in names" time="0.0513998">
        </testcase>
        <testcase classname="src/ui/commands/mcpCommand.test.ts" name="mcpCommand &gt; auth subcommand &gt; should list OAuth-enabled servers when no server name is provided" time="0.0028579">
        </testcase>
        <testcase classname="src/ui/commands/mcpCommand.test.ts" name="mcpCommand &gt; auth subcommand &gt; should show message when no OAuth servers are configured" time="0.0012288">
        </testcase>
        <testcase classname="src/ui/commands/mcpCommand.test.ts" name="mcpCommand &gt; auth subcommand &gt; should authenticate with a specific server" time="0.0339336">
        </testcase>
        <testcase classname="src/ui/commands/mcpCommand.test.ts" name="mcpCommand &gt; auth subcommand &gt; should handle authentication errors" time="0.0083606">
        </testcase>
        <testcase classname="src/ui/commands/mcpCommand.test.ts" name="mcpCommand &gt; auth subcommand &gt; should handle non-existent server" time="0.0019292">
        </testcase>
        <testcase classname="src/ui/commands/mcpCommand.test.ts" name="mcpCommand &gt; refresh subcommand &gt; should refresh the list of tools and display the status" time="0.0510283">
        </testcase>
        <testcase classname="src/ui/commands/mcpCommand.test.ts" name="mcpCommand &gt; refresh subcommand &gt; should show an error if config is not available" time="0.0016895">
        </testcase>
        <testcase classname="src/ui/commands/mcpCommand.test.ts" name="mcpCommand &gt; refresh subcommand &gt; should show an error if tool registry is not available" time="0.0007252">
        </testcase>
    </testsuite>
    <testsuite name="src/ui/commands/memoryCommand.test.ts" timestamp="2025-09-23T13:52:09.638Z" hostname="WIN-33AANMPCPKN" tests="8" failures="0" errors="0" skipped="0" time="0.0114516">
        <testcase classname="src/ui/commands/memoryCommand.test.ts" name="memoryCommand &gt; /memory show &gt; should display a message if memory is empty" time="0.0048754">
        </testcase>
        <testcase classname="src/ui/commands/memoryCommand.test.ts" name="memoryCommand &gt; /memory show &gt; should display the memory content and file count if it exists" time="0.0006006">
        </testcase>
        <testcase classname="src/ui/commands/memoryCommand.test.ts" name="memoryCommand &gt; /memory add &gt; should return an error message if no arguments are provided" time="0.0005893">
        </testcase>
        <testcase classname="src/ui/commands/memoryCommand.test.ts" name="memoryCommand &gt; /memory add &gt; should return a tool action and add an info message when arguments are provided" time="0.0004145">
        </testcase>
        <testcase classname="src/ui/commands/memoryCommand.test.ts" name="memoryCommand &gt; /memory refresh &gt; should display success message when memory is refreshed with content" time="0.0009188">
        </testcase>
        <testcase classname="src/ui/commands/memoryCommand.test.ts" name="memoryCommand &gt; /memory refresh &gt; should display success message when memory is refreshed with no content" time="0.0005039">
        </testcase>
        <testcase classname="src/ui/commands/memoryCommand.test.ts" name="memoryCommand &gt; /memory refresh &gt; should display an error message if refreshing fails" time="0.0009581">
        </testcase>
        <testcase classname="src/ui/commands/memoryCommand.test.ts" name="memoryCommand &gt; /memory refresh &gt; should not throw if config service is unavailable" time="0.0010477">
        </testcase>
    </testsuite>
    <testsuite name="src/ui/commands/permissionsCommand.test.ts" timestamp="2025-09-23T13:52:09.639Z" hostname="WIN-33AANMPCPKN" tests="3" failures="0" errors="0" skipped="0" time="0.0064143">
        <testcase classname="src/ui/commands/permissionsCommand.test.ts" name="permissionsCommand &gt; should have the correct name and description" time="0.0031981">
        </testcase>
        <testcase classname="src/ui/commands/permissionsCommand.test.ts" name="permissionsCommand &gt; should be a built-in command" time="0.0004288">
        </testcase>
        <testcase classname="src/ui/commands/permissionsCommand.test.ts" name="permissionsCommand &gt; should return an action to open the permissions dialog" time="0.0011551">
        </testcase>
    </testsuite>
    <testsuite name="src/ui/commands/privacyCommand.test.ts" timestamp="2025-09-23T13:52:09.639Z" hostname="WIN-33AANMPCPKN" tests="2" failures="0" errors="0" skipped="0" time="0.0045072">
        <testcase classname="src/ui/commands/privacyCommand.test.ts" name="privacyCommand &gt; should return a dialog action to open the privacy dialog" time="0.002833">
        </testcase>
        <testcase classname="src/ui/commands/privacyCommand.test.ts" name="privacyCommand &gt; should have the correct name and description" time="0.0004265">
        </testcase>
    </testsuite>
    <testsuite name="src/ui/commands/quitCommand.test.ts" timestamp="2025-09-23T13:52:09.639Z" hostname="WIN-33AANMPCPKN" tests="1" failures="0" errors="0" skipped="0" time="0.0060584">
        <testcase classname="src/ui/commands/quitCommand.test.ts" name="quitCommand &gt; returns a QuitActionReturn object with the correct messages" time="0.005026">
        </testcase>
    </testsuite>
    <testsuite name="src/ui/commands/restoreCommand.test.ts" timestamp="2025-09-23T13:52:09.640Z" hostname="WIN-33AANMPCPKN" tests="13" failures="0" errors="0" skipped="0" time="0.1114742">
        <testcase classname="src/ui/commands/restoreCommand.test.ts" name="restoreCommand &gt; should return null if checkpointing is not enabled" time="0.0111596">
        </testcase>
        <testcase classname="src/ui/commands/restoreCommand.test.ts" name="restoreCommand &gt; should return the command if checkpointing is enabled" time="0.005385">
        </testcase>
        <testcase classname="src/ui/commands/restoreCommand.test.ts" name="restoreCommand &gt; action &gt; should return an error if temp dir is not found" time="0.005217">
        </testcase>
        <testcase classname="src/ui/commands/restoreCommand.test.ts" name="restoreCommand &gt; action &gt; should inform when no checkpoints are found if no args are passed" time="0.0071935">
        </testcase>
        <testcase classname="src/ui/commands/restoreCommand.test.ts" name="restoreCommand &gt; action &gt; should list available checkpoints if no args are passed" time="0.0058199">
        </testcase>
        <testcase classname="src/ui/commands/restoreCommand.test.ts" name="restoreCommand &gt; action &gt; should return an error if the specified file is not found" time="0.0046161">
        </testcase>
        <testcase classname="src/ui/commands/restoreCommand.test.ts" name="restoreCommand &gt; action &gt; should handle file read errors gracefully" time="0.0082768">
        </testcase>
        <testcase classname="src/ui/commands/restoreCommand.test.ts" name="restoreCommand &gt; action &gt; should restore a tool call and project state" time="0.0146513">
        </testcase>
        <testcase classname="src/ui/commands/restoreCommand.test.ts" name="restoreCommand &gt; action &gt; should restore even if only toolCall is present" time="0.0114388">
        </testcase>
        <testcase classname="src/ui/commands/restoreCommand.test.ts" name="restoreCommand &gt; should return an error for a checkpoint file missing the toolCall property" time="0.0128944">
        </testcase>
        <testcase classname="src/ui/commands/restoreCommand.test.ts" name="restoreCommand &gt; completion &gt; should return an empty array if temp dir is not found" time="0.0050331">
        </testcase>
        <testcase classname="src/ui/commands/restoreCommand.test.ts" name="restoreCommand &gt; completion &gt; should return an empty array on readdir error" time="0.0046427">
        </testcase>
        <testcase classname="src/ui/commands/restoreCommand.test.ts" name="restoreCommand &gt; completion &gt; should return a list of checkpoint names" time="0.0130096">
        </testcase>
    </testsuite>
    <testsuite name="src/ui/commands/settingsCommand.test.ts" timestamp="2025-09-23T13:52:09.641Z" hostname="WIN-33AANMPCPKN" tests="2" failures="0" errors="0" skipped="0" time="0.0047752">
        <testcase classname="src/ui/commands/settingsCommand.test.ts" name="settingsCommand &gt; should return a dialog action to open the settings dialog" time="0.0030162">
        </testcase>
        <testcase classname="src/ui/commands/settingsCommand.test.ts" name="settingsCommand &gt; should have the correct name and description" time="0.0004572">
        </testcase>
    </testsuite>
    <testsuite name="src/ui/commands/setupGithubCommand.test.ts" timestamp="2025-09-23T13:52:09.642Z" hostname="WIN-33AANMPCPKN" tests="8" failures="0" errors="0" skipped="0" time="0.087242">
        <testcase classname="src/ui/commands/setupGithubCommand.test.ts" name="setupGithubCommand &gt; returns a tool action to download github workflows and handles paths" time="0.0373867">
        </testcase>
        <testcase classname="src/ui/commands/setupGithubCommand.test.ts" name="updateGitignore &gt; creates a new .gitignore file when none exists" time="0.005035">
        </testcase>
        <testcase classname="src/ui/commands/setupGithubCommand.test.ts" name="updateGitignore &gt; appends entries to existing .gitignore file" time="0.0047225">
        </testcase>
        <testcase classname="src/ui/commands/setupGithubCommand.test.ts" name="updateGitignore &gt; does not add duplicate entries" time="0.0034868">
        </testcase>
        <testcase classname="src/ui/commands/setupGithubCommand.test.ts" name="updateGitignore &gt; adds only missing entries when some already exist" time="0.003343">
        </testcase>
        <testcase classname="src/ui/commands/setupGithubCommand.test.ts" name="updateGitignore &gt; does not get confused by entries in comments or as substrings" time="0.007398">
        </testcase>
        <testcase classname="src/ui/commands/setupGithubCommand.test.ts" name="updateGitignore &gt; handles file system errors gracefully" time="0.014697">
            <system-out>
Failed to update .gitignore: Error: ENOENT: no such file or directory, open &apos;C:\Users\alroh\AppData\Local\Temp\update-gitignore-ftjxQh\non-existent\.gitignore&apos;
[90m    at open (node:internal/fs/promises:638:25)[39m
[90m    at Object.writeFile (node:internal/fs/promises:1212:14)[39m
    at Module.updateGitignore [90m(E:\claude-code\pipedream\modelcontextprotocol\agentrpc\gemini-cli\packages\cli\[39msrc\ui\commands\setupGithubCommand.ts:71:7[90m)[39m
    at [90mE:\claude-code\pipedream\modelcontextprotocol\agentrpc\gemini-cli\packages\cli\[39msrc\ui\commands\setupGithubCommand.test.ts:218:5
    at file:///E:/claude-code/pipedream/modelcontextprotocol/agentrpc/gemini-cli/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:752:20 {
  errno: [33m-4058[39m,
  code: [32m&apos;ENOENT&apos;[39m,
  syscall: [32m&apos;open&apos;[39m,
  path: [32m&apos;C:\\Users\\alroh\\AppData\\Local\\Temp\\update-gitignore-ftjxQh\\non-existent\\.gitignore&apos;[39m
}

            </system-out>
        </testcase>
        <testcase classname="src/ui/commands/setupGithubCommand.test.ts" name="updateGitignore &gt; handles permission errors gracefully" time="0.0094545">
        </testcase>
    </testsuite>
    <testsuite name="src/ui/commands/statsCommand.test.ts" timestamp="2025-09-23T13:52:09.642Z" hostname="WIN-33AANMPCPKN" tests="3" failures="0" errors="0" skipped="0" time="0.0117689">
        <testcase classname="src/ui/commands/statsCommand.test.ts" name="statsCommand &gt; should display general session stats when run with no subcommand" time="0.0088305">
        </testcase>
        <testcase classname="src/ui/commands/statsCommand.test.ts" name="statsCommand &gt; should display model stats when using the &quot;model&quot; subcommand" time="0.0008398">
        </testcase>
        <testcase classname="src/ui/commands/statsCommand.test.ts" name="statsCommand &gt; should display tool stats when using the &quot;tools&quot; subcommand" time="0.000555">
        </testcase>
    </testsuite>
    <testsuite name="src/ui/commands/terminalSetupCommand.test.ts" timestamp="2025-09-23T13:52:09.643Z" hostname="WIN-33AANMPCPKN" tests="5" failures="0" errors="0" skipped="0" time="0.0054292">
        <testcase classname="src/ui/commands/terminalSetupCommand.test.ts" name="terminalSetupCommand &gt; should have correct metadata" time="0.0019953">
        </testcase>
        <testcase classname="src/ui/commands/terminalSetupCommand.test.ts" name="terminalSetupCommand &gt; should return success message when terminal setup succeeds" time="0.0012641">
        </testcase>
        <testcase classname="src/ui/commands/terminalSetupCommand.test.ts" name="terminalSetupCommand &gt; should append restart message when terminal setup requires restart" time="0.0002388">
        </testcase>
        <testcase classname="src/ui/commands/terminalSetupCommand.test.ts" name="terminalSetupCommand &gt; should return error message when terminal setup fails" time="0.0001858">
        </testcase>
        <testcase classname="src/ui/commands/terminalSetupCommand.test.ts" name="terminalSetupCommand &gt; should handle exceptions from terminal setup" time="0.0002738">
        </testcase>
    </testsuite>
    <testsuite name="src/ui/commands/themeCommand.test.ts" timestamp="2025-09-23T13:52:09.644Z" hostname="WIN-33AANMPCPKN" tests="2" failures="0" errors="0" skipped="0" time="0.0046395">
        <testcase classname="src/ui/commands/themeCommand.test.ts" name="themeCommand &gt; should return a dialog action to open the theme dialog" time="0.0028702">
        </testcase>
        <testcase classname="src/ui/commands/themeCommand.test.ts" name="themeCommand &gt; should have the correct name and description" time="0.0004413">
        </testcase>
    </testsuite>
    <testsuite name="src/ui/commands/toolsCommand.test.ts" timestamp="2025-09-23T13:52:09.644Z" hostname="WIN-33AANMPCPKN" tests="4" failures="0" errors="0" skipped="0" time="0.0084596">
        <testcase classname="src/ui/commands/toolsCommand.test.ts" name="toolsCommand &gt; should display an error if the tool registry is unavailable" time="0.0052482">
        </testcase>
        <testcase classname="src/ui/commands/toolsCommand.test.ts" name="toolsCommand &gt; should display &quot;No tools available&quot; when none are found" time="0.0011318">
        </testcase>
        <testcase classname="src/ui/commands/toolsCommand.test.ts" name="toolsCommand &gt; should list tools without descriptions by default" time="0.0006413">
        </testcase>
        <testcase classname="src/ui/commands/toolsCommand.test.ts" name="toolsCommand &gt; should list tools with descriptions when &quot;desc&quot; arg is passed" time="0.0003308">
        </testcase>
    </testsuite>
    <testsuite name="src/ui/contexts/KeypressContext.test.tsx" timestamp="2025-09-23T13:52:09.645Z" hostname="WIN-33AANMPCPKN" tests="1" failures="1" errors="0" skipped="0" time="0">
        <testcase classname="src/ui/contexts/KeypressContext.test.tsx" name="src/ui/contexts/KeypressContext.test.tsx" time="0">
            <failure message="Cannot read properties of undefined (reading &apos;S&apos;)" type="TypeError">
TypeError: Cannot read properties of undefined (reading &apos;S&apos;)
 ❯ ../../node_modules/react-dom/cjs/react-dom-client.development.js:22587:58
 ❯ Object.&lt;anonymous&gt; ../../node_modules/react-dom/cjs/react-dom-client.development.js:24993:5
            </failure>
        </testcase>
    </testsuite>
    <testsuite name="src/ui/contexts/SessionContext.test.tsx" timestamp="2025-09-23T13:52:09.647Z" hostname="WIN-33AANMPCPKN" tests="1" failures="1" errors="0" skipped="0" time="0">
        <testcase classname="src/ui/contexts/SessionContext.test.tsx" name="src/ui/contexts/SessionContext.test.tsx" time="0">
            <failure message="Cannot read properties of undefined (reading &apos;S&apos;)" type="TypeError">
TypeError: Cannot read properties of undefined (reading &apos;S&apos;)
 ❯ ../../node_modules/react-dom/cjs/react-dom-client.development.js:22587:58
 ❯ Object.&lt;anonymous&gt; ../../node_modules/react-dom/cjs/react-dom-client.development.js:24993:5
            </failure>
        </testcase>
    </testsuite>
    <testsuite name="src/ui/components/AnsiOutput.test.tsx" timestamp="2025-09-23T13:52:09.648Z" hostname="WIN-33AANMPCPKN" tests="6" failures="0" errors="0" skipped="0" time="0.0869379">
        <testcase classname="src/ui/components/AnsiOutput.test.tsx" name="&lt;AnsiOutputText /&gt; &gt; renders a simple AnsiOutput object correctly" time="0.0260994">
        </testcase>
        <testcase classname="src/ui/components/AnsiOutput.test.tsx" name="&lt;AnsiOutputText /&gt; &gt; correctly applies all the styles" time="0.0131451">
        </testcase>
        <testcase classname="src/ui/components/AnsiOutput.test.tsx" name="&lt;AnsiOutputText /&gt; &gt; correctly applies foreground and background colors" time="0.0011418">
        </testcase>
        <testcase classname="src/ui/components/AnsiOutput.test.tsx" name="&lt;AnsiOutputText /&gt; &gt; handles empty lines and empty tokens" time="0.0017215">
        </testcase>
        <testcase classname="src/ui/components/AnsiOutput.test.tsx" name="&lt;AnsiOutputText /&gt; &gt; respects the availableTerminalHeight prop and slices the lines correctly" time="0.0028262">
        </testcase>
        <testcase classname="src/ui/components/AnsiOutput.test.tsx" name="&lt;AnsiOutputText /&gt; &gt; renders a large AnsiOutput object without crashing" time="0.0405408">
        </testcase>
    </testsuite>
    <testsuite name="src/ui/components/Composer.test.tsx" timestamp="2025-09-23T13:52:09.649Z" hostname="WIN-33AANMPCPKN" tests="18" failures="0" errors="0" skipped="0" time="0.4632403">
        <testcase classname="src/ui/components/Composer.test.tsx" name="Composer &gt; Footer Display Settings &gt; renders Footer by default when hideFooter is false" time="0.0561155">
        </testcase>
        <testcase classname="src/ui/components/Composer.test.tsx" name="Composer &gt; Footer Display Settings &gt; does NOT render Footer when hideFooter is true" time="0.0252437">
        </testcase>
        <testcase classname="src/ui/components/Composer.test.tsx" name="Composer &gt; Footer Display Settings &gt; passes correct props to Footer including vim mode when enabled" time="0.0211214">
        </testcase>
        <testcase classname="src/ui/components/Composer.test.tsx" name="Composer &gt; Loading Indicator &gt; renders LoadingIndicator with thought when streaming" time="0.0065208">
        </testcase>
        <testcase classname="src/ui/components/Composer.test.tsx" name="Composer &gt; Loading Indicator &gt; renders LoadingIndicator without thought when accessibility disables loading phrases" time="0.0251351">
        </testcase>
        <testcase classname="src/ui/components/Composer.test.tsx" name="Composer &gt; Loading Indicator &gt; suppresses thought when waiting for confirmation" time="0.0311743">
        </testcase>
        <testcase classname="src/ui/components/Composer.test.tsx" name="Composer &gt; Message Queue Display &gt; displays queued messages when present" time="0.0068153">
        </testcase>
        <testcase classname="src/ui/components/Composer.test.tsx" name="Composer &gt; Message Queue Display &gt; renders QueuedMessageDisplay with empty message queue" time="0.036835">
        </testcase>
        <testcase classname="src/ui/components/Composer.test.tsx" name="Composer &gt; Context and Status Display &gt; shows ContextSummaryDisplay in normal state" time="0.007191">
        </testcase>
        <testcase classname="src/ui/components/Composer.test.tsx" name="Composer &gt; Context and Status Display &gt; shows Ctrl+C exit prompt when ctrlCPressedOnce is true" time="0.0175712">
        </testcase>
        <testcase classname="src/ui/components/Composer.test.tsx" name="Composer &gt; Context and Status Display &gt; shows Ctrl+D exit prompt when ctrlDPressedOnce is true" time="0.0055143">
        </testcase>
        <testcase classname="src/ui/components/Composer.test.tsx" name="Composer &gt; Context and Status Display &gt; shows escape prompt when showEscapePrompt is true" time="0.1194372">
        </testcase>
        <testcase classname="src/ui/components/Composer.test.tsx" name="Composer &gt; Input and Indicators &gt; renders InputPrompt when input is active" time="0.0195211">
        </testcase>
        <testcase classname="src/ui/components/Composer.test.tsx" name="Composer &gt; Input and Indicators &gt; does not render InputPrompt when input is inactive" time="0.0063746">
        </testcase>
        <testcase classname="src/ui/components/Composer.test.tsx" name="Composer &gt; Input and Indicators &gt; shows AutoAcceptIndicator when approval mode is not default and shell mode is inactive" time="0.0291605">
        </testcase>
        <testcase classname="src/ui/components/Composer.test.tsx" name="Composer &gt; Input and Indicators &gt; shows ShellModeIndicator when shell mode is active" time="0.0047937">
        </testcase>
        <testcase classname="src/ui/components/Composer.test.tsx" name="Composer &gt; Error Details Display &gt; shows DetailedMessagesDisplay when showErrorDetails is true" time="0.0351445">
        </testcase>
        <testcase classname="src/ui/components/Composer.test.tsx" name="Composer &gt; Error Details Display &gt; does not show error details when showErrorDetails is false" time="0.0041718">
        </testcase>
    </testsuite>
    <testsuite name="src/ui/components/ContextSummaryDisplay.test.tsx" timestamp="2025-09-23T13:52:09.650Z" hostname="WIN-33AANMPCPKN" tests="4" failures="0" errors="0" skipped="0" time="0.0748201">
        <testcase classname="src/ui/components/ContextSummaryDisplay.test.tsx" name="&lt;ContextSummaryDisplay /&gt; &gt; should render on a single line on a wide screen" time="0.0224917">
        </testcase>
        <testcase classname="src/ui/components/ContextSummaryDisplay.test.tsx" name="&lt;ContextSummaryDisplay /&gt; &gt; should render on multiple lines on a narrow screen" time="0.0370662">
        </testcase>
        <testcase classname="src/ui/components/ContextSummaryDisplay.test.tsx" name="&lt;ContextSummaryDisplay /&gt; &gt; should switch layout at the 80-column breakpoint" time="0.0106428">
        </testcase>
        <testcase classname="src/ui/components/ContextSummaryDisplay.test.tsx" name="&lt;ContextSummaryDisplay /&gt; &gt; should not render empty parts" time="0.0033432">
        </testcase>
    </testsuite>
    <testsuite name="src/ui/components/FolderTrustDialog.test.tsx" timestamp="2025-09-23T13:52:09.651Z" hostname="WIN-33AANMPCPKN" tests="1" failures="1" errors="0" skipped="0" time="0">
        <testcase classname="src/ui/components/FolderTrustDialog.test.tsx" name="src/ui/components/FolderTrustDialog.test.tsx" time="0">
            <failure message="Cannot read properties of undefined (reading &apos;S&apos;)" type="TypeError">
TypeError: Cannot read properties of undefined (reading &apos;S&apos;)
 ❯ ../../node_modules/react-dom/cjs/react-dom-client.development.js:22587:58
 ❯ Object.&lt;anonymous&gt; ../../node_modules/react-dom/cjs/react-dom-client.development.js:24993:5
            </failure>
        </testcase>
    </testsuite>
    <testsuite name="src/ui/components/Footer.test.tsx" timestamp="2025-09-23T13:52:09.652Z" hostname="WIN-33AANMPCPKN" tests="18" failures="0" errors="0" skipped="0" time="0.2380875">
        <testcase classname="src/ui/components/Footer.test.tsx" name="&lt;Footer /&gt; &gt; renders the component" time="0.0811915">
        </testcase>
        <testcase classname="src/ui/components/Footer.test.tsx" name="&lt;Footer /&gt; &gt; path display &gt; should display shortened path on a wide terminal" time="0.0056465">
        </testcase>
        <testcase classname="src/ui/components/Footer.test.tsx" name="&lt;Footer /&gt; &gt; path display &gt; should display only the base directory name on a narrow terminal" time="0.0050668">
        </testcase>
        <testcase classname="src/ui/components/Footer.test.tsx" name="&lt;Footer /&gt; &gt; path display &gt; should use wide layout at 80 columns" time="0.0048757">
        </testcase>
        <testcase classname="src/ui/components/Footer.test.tsx" name="&lt;Footer /&gt; &gt; path display &gt; should use narrow layout at 79 columns" time="0.0035283">
        </testcase>
        <testcase classname="src/ui/components/Footer.test.tsx" name="&lt;Footer /&gt; &gt; displays the branch name when provided" time="0.0270409">
        </testcase>
        <testcase classname="src/ui/components/Footer.test.tsx" name="&lt;Footer /&gt; &gt; does not display the branch name when not provided" time="0.0215955">
        </testcase>
        <testcase classname="src/ui/components/Footer.test.tsx" name="&lt;Footer /&gt; &gt; displays the model name and context percentage" time="0.0088434">
        </testcase>
        <testcase classname="src/ui/components/Footer.test.tsx" name="&lt;Footer /&gt; &gt; sandbox and trust info &gt; should display untrusted when isTrustedFolder is false" time="0.0044989">
        </testcase>
        <testcase classname="src/ui/components/Footer.test.tsx" name="&lt;Footer /&gt; &gt; sandbox and trust info &gt; should display custom sandbox info when SANDBOX env is set" time="0.0136125">
        </testcase>
        <testcase classname="src/ui/components/Footer.test.tsx" name="&lt;Footer /&gt; &gt; sandbox and trust info &gt; should display macOS Seatbelt info when SANDBOX is sandbox-exec" time="0.0142812">
        </testcase>
        <testcase classname="src/ui/components/Footer.test.tsx" name="&lt;Footer /&gt; &gt; sandbox and trust info &gt; should display &quot;no sandbox&quot; when SANDBOX is not set and folder is trusted" time="0.0037407">
        </testcase>
        <testcase classname="src/ui/components/Footer.test.tsx" name="&lt;Footer /&gt; &gt; sandbox and trust info &gt; should prioritize untrusted message over sandbox info" time="0.0038792">
        </testcase>
        <testcase classname="src/ui/components/Footer.test.tsx" name="&lt;Footer /&gt; &gt; footer configuration filtering (golden snapshots) &gt; renders complete footer with all sections visible (baseline)" time="0.0053093">
        </testcase>
        <testcase classname="src/ui/components/Footer.test.tsx" name="&lt;Footer /&gt; &gt; footer configuration filtering (golden snapshots) &gt; renders footer with all optional sections hidden (minimal footer)" time="0.0009288">
        </testcase>
        <testcase classname="src/ui/components/Footer.test.tsx" name="&lt;Footer /&gt; &gt; footer configuration filtering (golden snapshots) &gt; renders footer with only model info hidden (partial filtering)" time="0.0026107">
        </testcase>
        <testcase classname="src/ui/components/Footer.test.tsx" name="&lt;Footer /&gt; &gt; footer configuration filtering (golden snapshots) &gt; renders footer with CWD and model info hidden to test alignment (only sandbox visible)" time="0.0013586">
        </testcase>
        <testcase classname="src/ui/components/Footer.test.tsx" name="&lt;Footer /&gt; &gt; footer configuration filtering (golden snapshots) &gt; renders complete footer in narrow terminal (baseline narrow)" time="0.0209428">
        </testcase>
    </testsuite>
    <testsuite name="src/ui/components/Header.test.tsx" timestamp="2025-09-23T13:52:09.654Z" hostname="WIN-33AANMPCPKN" tests="4" failures="0" errors="0" skipped="0" time="0.1149969">
        <testcase classname="src/ui/components/Header.test.tsx" name="&lt;Header /&gt; &gt; renders the long logo on a wide terminal" time="0.0696543">
        </testcase>
        <testcase classname="src/ui/components/Header.test.tsx" name="&lt;Header /&gt; &gt; renders custom ASCII art when provided" time="0.0025356">
        </testcase>
        <testcase classname="src/ui/components/Header.test.tsx" name="&lt;Header /&gt; &gt; displays the version number when nightly is true" time="0.0250267">
        </testcase>
        <testcase classname="src/ui/components/Header.test.tsx" name="&lt;Header /&gt; &gt; does not display the version number when nightly is false" time="0.0156905">
        </testcase>
    </testsuite>
    <testsuite name="src/ui/components/Help.test.tsx" timestamp="2025-09-23T13:52:09.655Z" hostname="WIN-33AANMPCPKN" tests="2" failures="0" errors="0" skipped="0" time="0.1920734">
        <testcase classname="src/ui/components/Help.test.tsx" name="Help Component &gt; should not render hidden commands" time="0.1326663">
        </testcase>
        <testcase classname="src/ui/components/Help.test.tsx" name="Help Component &gt; should not render hidden subcommands" time="0.0569261">
        </testcase>
    </testsuite>
    <testsuite name="src/ui/components/HistoryItemDisplay.test.tsx" timestamp="2025-09-23T13:52:09.655Z" hostname="WIN-33AANMPCPKN" tests="7" failures="0" errors="0" skipped="0" time="0.1733376">
        <testcase classname="src/ui/components/HistoryItemDisplay.test.tsx" name="&lt;HistoryItemDisplay /&gt; &gt; renders UserMessage for &quot;user&quot; type" time="0.0604749">
        </testcase>
        <testcase classname="src/ui/components/HistoryItemDisplay.test.tsx" name="&lt;HistoryItemDisplay /&gt; &gt; renders UserMessage for &quot;user&quot; type with slash command" time="0.0078887">
        </testcase>
        <testcase classname="src/ui/components/HistoryItemDisplay.test.tsx" name="&lt;HistoryItemDisplay /&gt; &gt; renders StatsDisplay for &quot;stats&quot; type" time="0.0380764">
        </testcase>
        <testcase classname="src/ui/components/HistoryItemDisplay.test.tsx" name="&lt;HistoryItemDisplay /&gt; &gt; renders AboutBox for &quot;about&quot; type" time="0.0164261">
        </testcase>
        <testcase classname="src/ui/components/HistoryItemDisplay.test.tsx" name="&lt;HistoryItemDisplay /&gt; &gt; renders ModelStatsDisplay for &quot;model_stats&quot; type" time="0.0064119">
        </testcase>
        <testcase classname="src/ui/components/HistoryItemDisplay.test.tsx" name="&lt;HistoryItemDisplay /&gt; &gt; renders ToolStatsDisplay for &quot;tool_stats&quot; type" time="0.0153134">
        </testcase>
        <testcase classname="src/ui/components/HistoryItemDisplay.test.tsx" name="&lt;HistoryItemDisplay /&gt; &gt; renders SessionSummaryDisplay for &quot;quit&quot; type" time="0.0269405">
        </testcase>
    </testsuite>
    <testsuite name="src/ui/components/InputPrompt.test.tsx" timestamp="2025-09-23T13:52:09.656Z" hostname="WIN-33AANMPCPKN" tests="1" failures="1" errors="0" skipped="0" time="0">
        <testcase classname="src/ui/components/InputPrompt.test.tsx" name="src/ui/components/InputPrompt.test.tsx" time="0">
            <failure message="Cannot read properties of undefined (reading &apos;S&apos;)" type="TypeError">
TypeError: Cannot read properties of undefined (reading &apos;S&apos;)
 ❯ ../../node_modules/react-dom/cjs/react-dom-client.development.js:22587:58
 ❯ Object.&lt;anonymous&gt; ../../node_modules/react-dom/cjs/react-dom-client.development.js:24993:5
            </failure>
        </testcase>
    </testsuite>
    <testsuite name="src/ui/components/LoadingIndicator.test.tsx" timestamp="2025-09-23T13:52:09.657Z" hostname="WIN-33AANMPCPKN" tests="15" failures="0" errors="0" skipped="0" time="0.118714">
        <testcase classname="src/ui/components/LoadingIndicator.test.tsx" name="&lt;LoadingIndicator /&gt; &gt; should not render when streamingState is Idle" time="0.0150738">
        </testcase>
        <testcase classname="src/ui/components/LoadingIndicator.test.tsx" name="&lt;LoadingIndicator /&gt; &gt; should render spinner, phrase, and time when streamingState is Responding" time="0.0547586">
        </testcase>
        <testcase classname="src/ui/components/LoadingIndicator.test.tsx" name="&lt;LoadingIndicator /&gt; &gt; should render spinner (static), phrase but no time/cancel when streamingState is WaitingForConfirmation" time="0.0042349">
        </testcase>
        <testcase classname="src/ui/components/LoadingIndicator.test.tsx" name="&lt;LoadingIndicator /&gt; &gt; should display the currentLoadingPhrase correctly" time="0.0030475">
        </testcase>
        <testcase classname="src/ui/components/LoadingIndicator.test.tsx" name="&lt;LoadingIndicator /&gt; &gt; should display the elapsedTime correctly when Responding" time="0.0036008">
        </testcase>
        <testcase classname="src/ui/components/LoadingIndicator.test.tsx" name="&lt;LoadingIndicator /&gt; &gt; should display the elapsedTime correctly in human-readable format" time="0.0034911">
        </testcase>
        <testcase classname="src/ui/components/LoadingIndicator.test.tsx" name="&lt;LoadingIndicator /&gt; &gt; should render rightContent when provided" time="0.0032059">
        </testcase>
        <testcase classname="src/ui/components/LoadingIndicator.test.tsx" name="&lt;LoadingIndicator /&gt; &gt; should transition correctly between states using rerender" time="0.008539">
        </testcase>
        <testcase classname="src/ui/components/LoadingIndicator.test.tsx" name="&lt;LoadingIndicator /&gt; &gt; should display fallback phrase if thought is empty" time="0.0023911">
        </testcase>
        <testcase classname="src/ui/components/LoadingIndicator.test.tsx" name="&lt;LoadingIndicator /&gt; &gt; should display the subject of a thought" time="0.0030383">
        </testcase>
        <testcase classname="src/ui/components/LoadingIndicator.test.tsx" name="&lt;LoadingIndicator /&gt; &gt; should prioritize thought.subject over currentLoadingPhrase" time="0.0027972">
        </testcase>
        <testcase classname="src/ui/components/LoadingIndicator.test.tsx" name="&lt;LoadingIndicator /&gt; &gt; responsive layout &gt; should render on a single line on a wide terminal" time="0.0031274">
        </testcase>
        <testcase classname="src/ui/components/LoadingIndicator.test.tsx" name="&lt;LoadingIndicator /&gt; &gt; responsive layout &gt; should render on multiple lines on a narrow terminal" time="0.0041959">
        </testcase>
        <testcase classname="src/ui/components/LoadingIndicator.test.tsx" name="&lt;LoadingIndicator /&gt; &gt; responsive layout &gt; should use wide layout at 80 columns" time="0.0026405">
        </testcase>
        <testcase classname="src/ui/components/LoadingIndicator.test.tsx" name="&lt;LoadingIndicator /&gt; &gt; responsive layout &gt; should use narrow layout at 79 columns" time="0.0025053">
        </testcase>
    </testsuite>
    <testsuite name="src/ui/components/LoopDetectionConfirmation.test.tsx" timestamp="2025-09-23T13:52:09.659Z" hostname="WIN-33AANMPCPKN" tests="2" failures="0" errors="0" skipped="0" time="0.0854603">
        <testcase classname="src/ui/components/LoopDetectionConfirmation.test.tsx" name="LoopDetectionConfirmation &gt; renders correctly" time="0.065676">
        </testcase>
        <testcase classname="src/ui/components/LoopDetectionConfirmation.test.tsx" name="LoopDetectionConfirmation &gt; contains the expected options" time="0.0181768">
        </testcase>
    </testsuite>
    <testsuite name="src/ui/components/ModelStatsDisplay.test.tsx" timestamp="2025-09-23T13:52:09.659Z" hostname="WIN-33AANMPCPKN" tests="6" failures="0" errors="0" skipped="0" time="0.343294">
        <testcase classname="src/ui/components/ModelStatsDisplay.test.tsx" name="&lt;ModelStatsDisplay /&gt; &gt; should render &quot;no API calls&quot; message when there are no active models" time="0.047276">
        </testcase>
        <testcase classname="src/ui/components/ModelStatsDisplay.test.tsx" name="&lt;ModelStatsDisplay /&gt; &gt; should not display conditional rows if no model has data for them" time="0.0658594">
        </testcase>
        <testcase classname="src/ui/components/ModelStatsDisplay.test.tsx" name="&lt;ModelStatsDisplay /&gt; &gt; should display conditional rows if at least one model has data" time="0.0423036">
        </testcase>
        <testcase classname="src/ui/components/ModelStatsDisplay.test.tsx" name="&lt;ModelStatsDisplay /&gt; &gt; should display stats for multiple models correctly" time="0.0643212">
        </testcase>
        <testcase classname="src/ui/components/ModelStatsDisplay.test.tsx" name="&lt;ModelStatsDisplay /&gt; &gt; should handle large values without wrapping or overlapping" time="0.1074927">
        </testcase>
        <testcase classname="src/ui/components/ModelStatsDisplay.test.tsx" name="&lt;ModelStatsDisplay /&gt; &gt; should display a single model correctly" time="0.0124976">
        </testcase>
    </testsuite>
    <testsuite name="src/ui/components/PermissionsModifyTrustDialog.test.tsx" timestamp="2025-09-23T13:52:09.660Z" hostname="WIN-33AANMPCPKN" tests="1" failures="1" errors="0" skipped="0" time="0">
        <testcase classname="src/ui/components/PermissionsModifyTrustDialog.test.tsx" name="src/ui/components/PermissionsModifyTrustDialog.test.tsx" time="0">
            <failure message="Cannot read properties of undefined (reading &apos;S&apos;)" type="TypeError">
TypeError: Cannot read properties of undefined (reading &apos;S&apos;)
 ❯ ../../node_modules/react-dom/cjs/react-dom-client.development.js:22587:58
 ❯ Object.&lt;anonymous&gt; ../../node_modules/react-dom/cjs/react-dom-client.development.js:24993:5
            </failure>
        </testcase>
    </testsuite>
    <testsuite name="src/ui/components/PrepareLabel.test.tsx" timestamp="2025-09-23T13:52:09.661Z" hostname="WIN-33AANMPCPKN" tests="6" failures="0" errors="0" skipped="0" time="0.0954501">
        <testcase classname="src/ui/components/PrepareLabel.test.tsx" name="PrepareLabel &gt; renders plain label when no match (short label)" time="0.0272483">
        </testcase>
        <testcase classname="src/ui/components/PrepareLabel.test.tsx" name="PrepareLabel &gt; truncates long label when collapsed and no match" time="0.0135586">
        </testcase>
        <testcase classname="src/ui/components/PrepareLabel.test.tsx" name="PrepareLabel &gt; shows full long label when expanded and no match" time="0.0106436">
        </testcase>
        <testcase classname="src/ui/components/PrepareLabel.test.tsx" name="PrepareLabel &gt; highlights matched substring when expanded (text only visible)" time="0.0036996">
        </testcase>
        <testcase classname="src/ui/components/PrepareLabel.test.tsx" name="PrepareLabel &gt; creates centered window around match when collapsed" time="0.0118166">
        </testcase>
        <testcase classname="src/ui/components/PrepareLabel.test.tsx" name="PrepareLabel &gt; truncates match itself when match is very long" time="0.0268888">
        </testcase>
    </testsuite>
    <testsuite name="src/ui/components/ProQuotaDialog.test.tsx" timestamp="2025-09-23T13:52:09.661Z" hostname="WIN-33AANMPCPKN" tests="3" failures="0" errors="0" skipped="0" time="0.0521302">
        <testcase classname="src/ui/components/ProQuotaDialog.test.tsx" name="ProQuotaDialog &gt; should render with correct title and options" time="0.039122">
        </testcase>
        <testcase classname="src/ui/components/ProQuotaDialog.test.tsx" name="ProQuotaDialog &gt; should call onChoice with &quot;auth&quot; when &quot;Change auth&quot; is selected" time="0.0060106">
        </testcase>
        <testcase classname="src/ui/components/ProQuotaDialog.test.tsx" name="ProQuotaDialog &gt; should call onChoice with &quot;continue&quot; when &quot;Continue with flash&quot; is selected" time="0.00533">
        </testcase>
    </testsuite>
    <testsuite name="src/ui/components/QueuedMessageDisplay.test.tsx" timestamp="2025-09-23T13:52:09.662Z" hostname="WIN-33AANMPCPKN" tests="5" failures="0" errors="0" skipped="0" time="0.1237729">
        <testcase classname="src/ui/components/QueuedMessageDisplay.test.tsx" name="QueuedMessageDisplay &gt; renders nothing when message queue is empty" time="0.017173">
        </testcase>
        <testcase classname="src/ui/components/QueuedMessageDisplay.test.tsx" name="QueuedMessageDisplay &gt; displays single queued message" time="0.0894996">
        </testcase>
        <testcase classname="src/ui/components/QueuedMessageDisplay.test.tsx" name="QueuedMessageDisplay &gt; displays multiple queued messages" time="0.0051223">
        </testcase>
        <testcase classname="src/ui/components/QueuedMessageDisplay.test.tsx" name="QueuedMessageDisplay &gt; shows overflow indicator when more than 3 messages are queued" time="0.0048894">
        </testcase>
        <testcase classname="src/ui/components/QueuedMessageDisplay.test.tsx" name="QueuedMessageDisplay &gt; normalizes whitespace in messages" time="0.0052063">
        </testcase>
    </testsuite>
    <testsuite name="src/ui/components/SessionSummaryDisplay.test.tsx" timestamp="2025-09-23T13:52:09.662Z" hostname="WIN-33AANMPCPKN" tests="1" failures="0" errors="0" skipped="0" time="0.111083">
        <testcase classname="src/ui/components/SessionSummaryDisplay.test.tsx" name="&lt;SessionSummaryDisplay /&gt; &gt; renders the summary display with a title" time="0.1096097">
        </testcase>
    </testsuite>
    <testsuite name="src/ui/components/SettingsDialog.test.tsx" timestamp="2025-09-23T13:52:09.663Z" hostname="WIN-33AANMPCPKN" tests="52" failures="0" errors="0" skipped="0" time="7.2451486">
        <testcase classname="src/ui/components/SettingsDialog.test.tsx" name="SettingsDialog &gt; Initial Rendering &gt; should render the settings dialog with default state" time="0.1065788">
        </testcase>
        <testcase classname="src/ui/components/SettingsDialog.test.tsx" name="SettingsDialog &gt; Initial Rendering &gt; should accept availableTerminalHeight prop without errors" time="0.0314357">
        </testcase>
        <testcase classname="src/ui/components/SettingsDialog.test.tsx" name="SettingsDialog &gt; Initial Rendering &gt; should show settings list with default values" time="0.0377511">
        </testcase>
        <testcase classname="src/ui/components/SettingsDialog.test.tsx" name="SettingsDialog &gt; Initial Rendering &gt; should highlight first setting by default" time="0.0301011">
        </testcase>
        <testcase classname="src/ui/components/SettingsDialog.test.tsx" name="SettingsDialog &gt; Settings Navigation &gt; should navigate down with arrow key" time="0.2654701">
            <system-err>
The current testing environment is not configured to support act(...)
The current testing environment is not configured to support act(...)
The current testing environment is not configured to support act(...)
The current testing environment is not configured to support act(...)
The current testing environment is not configured to support act(...)

            </system-err>
        </testcase>
        <testcase classname="src/ui/components/SettingsDialog.test.tsx" name="SettingsDialog &gt; Settings Navigation &gt; should navigate up with arrow key" time="0.1999554">
        </testcase>
        <testcase classname="src/ui/components/SettingsDialog.test.tsx" name="SettingsDialog &gt; Settings Navigation &gt; should navigate with vim keys (j/k)" time="0.1575033">
        </testcase>
        <testcase classname="src/ui/components/SettingsDialog.test.tsx" name="SettingsDialog &gt; Settings Navigation &gt; wraps around when at the top of the list" time="0.1232277">
            <system-err>
The current testing environment is not configured to support act(...)
The current testing environment is not configured to support act(...)
The current testing environment is not configured to support act(...)

            </system-err>
        </testcase>
        <testcase classname="src/ui/components/SettingsDialog.test.tsx" name="SettingsDialog &gt; Settings Toggling &gt; should toggle setting with Enter key" time="0.1495826">
            <system-out>
[DEBUG SettingsDialog] Saving general.disableAutoUpdate immediately with value: [33mtrue[39m

            </system-out>
            <system-err>
The current testing environment is not configured to support act(...)
The current testing environment is not configured to support act(...)

The current testing environment is not configured to support act(...)
The current testing environment is not configured to support act(...)
The current testing environment is not configured to support act(...)
The current testing environment is not configured to support act(...)
The current testing environment is not configured to support act(...)
The current testing environment is not configured to support act(...)
The current testing environment is not configured to support act(...)

            </system-err>
        </testcase>
        <testcase classname="src/ui/components/SettingsDialog.test.tsx" name="SettingsDialog &gt; Settings Toggling &gt; enum values &gt; toggles enum values with the enter key" time="0.1881312">
            <system-out>
[DEBUG SettingsDialog] Saving ui.theme immediately with value: baz

            </system-out>
        </testcase>
        <testcase classname="src/ui/components/SettingsDialog.test.tsx" name="SettingsDialog &gt; Settings Toggling &gt; enum values &gt; loops back when reaching the end of an enum" time="0.2078934">
            <system-out>
[DEBUG SettingsDialog] Saving ui.theme immediately with value: foo

            </system-out>
        </testcase>
        <testcase classname="src/ui/components/SettingsDialog.test.tsx" name="SettingsDialog &gt; Settings Toggling &gt; should toggle setting with Space key" time="0.1530971">
            <system-out>
[DEBUG SettingsDialog] Saving general.vimMode immediately with value: [33mtrue[39m

            </system-out>
        </testcase>
        <testcase classname="src/ui/components/SettingsDialog.test.tsx" name="SettingsDialog &gt; Settings Toggling &gt; should handle vim mode setting specially" time="0.1619257">
            <system-out>
[DEBUG SettingsDialog] Saving general.vimMode immediately with value: [33mtrue[39m

            </system-out>
        </testcase>
        <testcase classname="src/ui/components/SettingsDialog.test.tsx" name="SettingsDialog &gt; Scope Selection &gt; should switch between scopes" time="0.2617322">
        </testcase>
        <testcase classname="src/ui/components/SettingsDialog.test.tsx" name="SettingsDialog &gt; Scope Selection &gt; should reset to settings focus when scope is selected" time="0.0396026">
        </testcase>
        <testcase classname="src/ui/components/SettingsDialog.test.tsx" name="SettingsDialog &gt; Restart Prompt &gt; should show restart prompt for restart-required settings" time="0.1494443">
        </testcase>
        <testcase classname="src/ui/components/SettingsDialog.test.tsx" name="SettingsDialog &gt; Restart Prompt &gt; should handle restart request when r is pressed" time="0.1021424">
        </testcase>
        <testcase classname="src/ui/components/SettingsDialog.test.tsx" name="SettingsDialog &gt; Escape Key Behavior &gt; should call onSelect with undefined when Escape is pressed" time="0.1173037">
        </testcase>
        <testcase classname="src/ui/components/SettingsDialog.test.tsx" name="SettingsDialog &gt; Settings Persistence &gt; should persist settings across scope changes" time="0.1750088">
        </testcase>
        <testcase classname="src/ui/components/SettingsDialog.test.tsx" name="SettingsDialog &gt; Settings Persistence &gt; should show different values for different scopes" time="0.0385951">
        </testcase>
        <testcase classname="src/ui/components/SettingsDialog.test.tsx" name="SettingsDialog &gt; Error Handling &gt; should handle vim mode toggle errors gracefully" time="0.1978081">
            <system-out>
[DEBUG SettingsDialog] Saving general.vimMode immediately with value: [33mtrue[39m

            </system-out>
            <system-err>
Failed to toggle vim mode: Error: Toggle failed
    at [90mE:\claude-code\pipedream\modelcontextprotocol\agentrpc\gemini-cli\packages\cli\[39msrc\ui\components\SettingsDialog.test.tsx:727:46
    at file:///E:/claude-code/pipedream/modelcontextprotocol/agentrpc/gemini-cli/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:155:11
    at file:///E:/claude-code/pipedream/modelcontextprotocol/agentrpc/gemini-cli/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:752:26
    at file:///E:/claude-code/pipedream/modelcontextprotocol/agentrpc/gemini-cli/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:1897:20
    at new Promise (&lt;anonymous&gt;)
    at runWithTimeout (file:///E:/claude-code/pipedream/modelcontextprotocol/agentrpc/gemini-cli/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:1863:10)
    at runTest (file:///E:/claude-code/pipedream/modelcontextprotocol/agentrpc/gemini-cli/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:1574:12)
    at runSuite (file:///E:/claude-code/pipedream/modelcontextprotocol/agentrpc/gemini-cli/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:1729:8)
    at runSuite (file:///E:/claude-code/pipedream/modelcontextprotocol/agentrpc/gemini-cli/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:1729:8)
    at runSuite (file:///E:/claude-code/pipedream/modelcontextprotocol/agentrpc/gemini-cli/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:1729:8)

            </system-err>
        </testcase>
        <testcase classname="src/ui/components/SettingsDialog.test.tsx" name="SettingsDialog &gt; Complex State Management &gt; should track modified settings correctly" time="0.2475314">
            <system-out>
[DEBUG SettingsDialog] Saving general.vimMode immediately with value: [33mtrue[39m

[DEBUG SettingsDialog] Saving general.disableAutoUpdate immediately with value: [33mtrue[39m

            </system-out>
        </testcase>
        <testcase classname="src/ui/components/SettingsDialog.test.tsx" name="SettingsDialog &gt; Complex State Management &gt; should handle scrolling when there are many settings" time="0.3337412">
        </testcase>
        <testcase classname="src/ui/components/SettingsDialog.test.tsx" name="SettingsDialog &gt; VimMode Integration &gt; should sync with VimModeContext when vim mode is toggled" time="0.1259852">
            <system-out>
[DEBUG SettingsDialog] Saving general.vimMode immediately with value: [33mtrue[39m

            </system-out>
        </testcase>
        <testcase classname="src/ui/components/SettingsDialog.test.tsx" name="SettingsDialog &gt; Specific Settings Behavior &gt; should show correct display values for settings with different states" time="0.0141377">
        </testcase>
        <testcase classname="src/ui/components/SettingsDialog.test.tsx" name="SettingsDialog &gt; Specific Settings Behavior &gt; should handle immediate settings save for non-restart-required settings" time="0.0964058">
            <system-out>
[DEBUG SettingsDialog] Saving general.vimMode immediately with value: [33mtrue[39m

            </system-out>
        </testcase>
        <testcase classname="src/ui/components/SettingsDialog.test.tsx" name="SettingsDialog &gt; Specific Settings Behavior &gt; should show restart prompt for restart-required settings" time="0.0956236">
        </testcase>
        <testcase classname="src/ui/components/SettingsDialog.test.tsx" name="SettingsDialog &gt; Specific Settings Behavior &gt; should clear restart prompt when switching scopes" time="0.0525134">
        </testcase>
        <testcase classname="src/ui/components/SettingsDialog.test.tsx" name="SettingsDialog &gt; Settings Display Values &gt; should show correct values for inherited settings" time="0.0816802">
        </testcase>
        <testcase classname="src/ui/components/SettingsDialog.test.tsx" name="SettingsDialog &gt; Settings Display Values &gt; should show override indicator for overridden settings" time="0.067563">
        </testcase>
        <testcase classname="src/ui/components/SettingsDialog.test.tsx" name="SettingsDialog &gt; Keyboard Shortcuts Edge Cases &gt; should handle rapid key presses gracefully" time="0.214141">
        </testcase>
        <testcase classname="src/ui/components/SettingsDialog.test.tsx" name="SettingsDialog &gt; Keyboard Shortcuts Edge Cases &gt; should handle Ctrl+C to reset current setting to default" time="0.1275692">
        </testcase>
        <testcase classname="src/ui/components/SettingsDialog.test.tsx" name="SettingsDialog &gt; Keyboard Shortcuts Edge Cases &gt; should handle Ctrl+L to reset current setting to default" time="0.1259381">
        </testcase>
        <testcase classname="src/ui/components/SettingsDialog.test.tsx" name="SettingsDialog &gt; Keyboard Shortcuts Edge Cases &gt; should handle navigation when only one setting exists" time="0.1856254">
        </testcase>
        <testcase classname="src/ui/components/SettingsDialog.test.tsx" name="SettingsDialog &gt; Keyboard Shortcuts Edge Cases &gt; should properly handle Tab navigation between sections" time="0.0306267">
        </testcase>
        <testcase classname="src/ui/components/SettingsDialog.test.tsx" name="SettingsDialog &gt; Error Recovery &gt; should handle malformed settings gracefully" time="0.0570431">
        </testcase>
        <testcase classname="src/ui/components/SettingsDialog.test.tsx" name="SettingsDialog &gt; Error Recovery &gt; should handle missing setting definitions gracefully" time="0.0157401">
        </testcase>
        <testcase classname="src/ui/components/SettingsDialog.test.tsx" name="SettingsDialog &gt; Complex User Interactions &gt; should handle complete user workflow: navigate, toggle, change scope, exit" time="0.0553365">
        </testcase>
        <testcase classname="src/ui/components/SettingsDialog.test.tsx" name="SettingsDialog &gt; Complex User Interactions &gt; should allow changing multiple settings without losing pending changes" time="0.3696562">
            <system-out>
[DEBUG SettingsDialog] Saving general.vimMode immediately with value: [33mtrue[39m

[DEBUG SettingsDialog] Saving general.disableAutoUpdate immediately with value: [33mtrue[39m

[DEBUG SettingsDialog] Modified settings: [ [32m&apos;general.enablePromptCompletion&apos;[39m ] Needs restart: [33mtrue[39m

            </system-out>
        </testcase>
        <testcase classname="src/ui/components/SettingsDialog.test.tsx" name="SettingsDialog &gt; Complex User Interactions &gt; should maintain state consistency during complex interactions" time="0.420465">
        </testcase>
        <testcase classname="src/ui/components/SettingsDialog.test.tsx" name="SettingsDialog &gt; Complex User Interactions &gt; should handle restart workflow correctly" time="0.1232061">
        </testcase>
        <testcase classname="src/ui/components/SettingsDialog.test.tsx" name="SettingsDialog &gt; String Settings Editing &gt; should allow editing and committing a string setting" time="1.019293">
            <system-out>
[DEBUG SettingsDialog] Saving ui.footer.hideSandboxStatus immediately with value: [33mtrue[39m

[DEBUG SettingsDialog] Saving ui.footer.hideSandboxStatus immediately with value: [33mtrue[39m

[DEBUG SettingsDialog] Saving ui.footer.hideSandboxStatus immediately with value: [33mtrue[39m

            </system-out>
        </testcase>
        <testcase classname="src/ui/components/SettingsDialog.test.tsx" name="SettingsDialog &gt; Snapshot Tests &gt; should render default state correctly" time="0.0921528">
        </testcase>
        <testcase classname="src/ui/components/SettingsDialog.test.tsx" name="SettingsDialog &gt; Snapshot Tests &gt; should render with various boolean settings enabled" time="0.0324998">
        </testcase>
        <testcase classname="src/ui/components/SettingsDialog.test.tsx" name="SettingsDialog &gt; Snapshot Tests &gt; should render with mixed boolean and number settings" time="0.0354412">
        </testcase>
        <testcase classname="src/ui/components/SettingsDialog.test.tsx" name="SettingsDialog &gt; Snapshot Tests &gt; should render focused on scope selector" time="0.0338749">
        </testcase>
        <testcase classname="src/ui/components/SettingsDialog.test.tsx" name="SettingsDialog &gt; Snapshot Tests &gt; should render with different scope selected (System)" time="0.0492726">
            <system-out>
[DEBUG SettingsDialog] Saving general.vimMode immediately with value: [33mtrue[39m

            </system-out>
        </testcase>
        <testcase classname="src/ui/components/SettingsDialog.test.tsx" name="SettingsDialog &gt; Snapshot Tests &gt; should render with different scope selected (Workspace)" time="0.0344585">
            <system-out>
[DEBUG SettingsDialog] Saving general.vimMode immediately with value: [33mtrue[39m

            </system-out>
        </testcase>
        <testcase classname="src/ui/components/SettingsDialog.test.tsx" name="SettingsDialog &gt; Snapshot Tests &gt; should render with accessibility settings enabled" time="0.0474361">
        </testcase>
        <testcase classname="src/ui/components/SettingsDialog.test.tsx" name="SettingsDialog &gt; Snapshot Tests &gt; should render with file filtering settings configured" time="0.020483">
        </testcase>
        <testcase classname="src/ui/components/SettingsDialog.test.tsx" name="SettingsDialog &gt; Snapshot Tests &gt; should render with tools and security settings" time="0.1047943">
        </testcase>
        <testcase classname="src/ui/components/SettingsDialog.test.tsx" name="SettingsDialog &gt; Snapshot Tests &gt; should render with all boolean settings disabled" time="0.0378934">
        </testcase>
    </testsuite>
    <testsuite name="src/ui/components/ShellConfirmationDialog.test.tsx" timestamp="2025-09-23T13:52:09.672Z" hostname="WIN-33AANMPCPKN" tests="4" failures="0" errors="0" skipped="0" time="0.246375">
        <testcase classname="src/ui/components/ShellConfirmationDialog.test.tsx" name="ShellConfirmationDialog &gt; renders correctly" time="0.1126167">
        </testcase>
        <testcase classname="src/ui/components/ShellConfirmationDialog.test.tsx" name="ShellConfirmationDialog &gt; calls onConfirm with ProceedOnce when &quot;Yes, allow once&quot; is selected" time="0.064777">
        </testcase>
        <testcase classname="src/ui/components/ShellConfirmationDialog.test.tsx" name="ShellConfirmationDialog &gt; calls onConfirm with ProceedAlways when &quot;Yes, allow always for this session&quot; is selected" time="0.0114573">
        </testcase>
        <testcase classname="src/ui/components/ShellConfirmationDialog.test.tsx" name="ShellConfirmationDialog &gt; calls onConfirm with Cancel when &quot;No (esc)&quot; is selected" time="0.0552451">
        </testcase>
    </testsuite>
    <testsuite name="src/ui/components/StatsDisplay.test.tsx" timestamp="2025-09-23T13:52:09.673Z" hostname="WIN-33AANMPCPKN" tests="12" failures="0" errors="0" skipped="0" time="0.4907078">
        <testcase classname="src/ui/components/StatsDisplay.test.tsx" name="&lt;StatsDisplay /&gt; &gt; renders only the Performance section in its zero state" time="0.0965336">
        </testcase>
        <testcase classname="src/ui/components/StatsDisplay.test.tsx" name="&lt;StatsDisplay /&gt; &gt; renders a table with two models correctly" time="0.1023841">
        </testcase>
        <testcase classname="src/ui/components/StatsDisplay.test.tsx" name="&lt;StatsDisplay /&gt; &gt; renders all sections when all data is present" time="0.0334256">
        </testcase>
        <testcase classname="src/ui/components/StatsDisplay.test.tsx" name="&lt;StatsDisplay /&gt; &gt; Conditional Rendering Tests &gt; hides User Agreement when no decisions are made" time="0.0316251">
        </testcase>
        <testcase classname="src/ui/components/StatsDisplay.test.tsx" name="&lt;StatsDisplay /&gt; &gt; Conditional Rendering Tests &gt; hides Efficiency section when cache is not used" time="0.0254692">
        </testcase>
        <testcase classname="src/ui/components/StatsDisplay.test.tsx" name="&lt;StatsDisplay /&gt; &gt; Conditional Color Tests &gt; renders success rate in green for high values" time="0.0272072">
        </testcase>
        <testcase classname="src/ui/components/StatsDisplay.test.tsx" name="&lt;StatsDisplay /&gt; &gt; Conditional Color Tests &gt; renders success rate in yellow for medium values" time="0.016437">
        </testcase>
        <testcase classname="src/ui/components/StatsDisplay.test.tsx" name="&lt;StatsDisplay /&gt; &gt; Conditional Color Tests &gt; renders success rate in red for low values" time="0.0381003">
        </testcase>
        <testcase classname="src/ui/components/StatsDisplay.test.tsx" name="&lt;StatsDisplay /&gt; &gt; Code Changes Display &gt; displays Code Changes when line counts are present" time="0.0337849">
        </testcase>
        <testcase classname="src/ui/components/StatsDisplay.test.tsx" name="&lt;StatsDisplay /&gt; &gt; Code Changes Display &gt; hides Code Changes when no lines are added or removed" time="0.0142463">
        </testcase>
        <testcase classname="src/ui/components/StatsDisplay.test.tsx" name="&lt;StatsDisplay /&gt; &gt; Title Rendering &gt; renders the default title when no title prop is provided" time="0.0244683">
        </testcase>
        <testcase classname="src/ui/components/StatsDisplay.test.tsx" name="&lt;StatsDisplay /&gt; &gt; Title Rendering &gt; renders the custom title when a title prop is provided" time="0.0429909">
        </testcase>
    </testsuite>
    <testsuite name="src/ui/components/ThemeDialog.test.tsx" timestamp="2025-09-23T13:52:09.675Z" hostname="WIN-33AANMPCPKN" tests="2" failures="0" errors="0" skipped="0" time="0.9297428">
        <testcase classname="src/ui/components/ThemeDialog.test.tsx" name="ThemeDialog Snapshots &gt; should render correctly in theme selection mode" time="0.5802557">
        </testcase>
        <testcase classname="src/ui/components/ThemeDialog.test.tsx" name="ThemeDialog Snapshots &gt; should render correctly in scope selector mode" time="0.3479899">
            <system-err>
The current testing environment is not configured to support act(...)
The current testing environment is not configured to support act(...)

            </system-err>
        </testcase>
    </testsuite>
    <testsuite name="src/ui/components/ToolStatsDisplay.test.tsx" timestamp="2025-09-23T13:52:09.675Z" hostname="WIN-33AANMPCPKN" tests="5" failures="0" errors="0" skipped="0" time="0.2586733">
        <testcase classname="src/ui/components/ToolStatsDisplay.test.tsx" name="&lt;ToolStatsDisplay /&gt; &gt; should render &quot;no tool calls&quot; message when there are no active tools" time="0.0488127">
        </testcase>
        <testcase classname="src/ui/components/ToolStatsDisplay.test.tsx" name="&lt;ToolStatsDisplay /&gt; &gt; should display stats for a single tool correctly" time="0.0510037">
        </testcase>
        <testcase classname="src/ui/components/ToolStatsDisplay.test.tsx" name="&lt;ToolStatsDisplay /&gt; &gt; should display stats for multiple tools correctly" time="0.0411425">
        </testcase>
        <testcase classname="src/ui/components/ToolStatsDisplay.test.tsx" name="&lt;ToolStatsDisplay /&gt; &gt; should handle large values without wrapping or overlapping" time="0.0675438">
        </testcase>
        <testcase classname="src/ui/components/ToolStatsDisplay.test.tsx" name="&lt;ToolStatsDisplay /&gt; &gt; should handle zero decisions gracefully" time="0.0477319">
        </testcase>
    </testsuite>
    <testsuite name="src/ui/themes/color-utils.test.ts" timestamp="2025-09-23T13:52:09.676Z" hostname="WIN-33AANMPCPKN" tests="16" failures="0" errors="0" skipped="0" time="0.0083904">
        <testcase classname="src/ui/themes/color-utils.test.ts" name="Color Utils &gt; isValidColor &gt; should validate hex colors" time="0.0014382">
        </testcase>
        <testcase classname="src/ui/themes/color-utils.test.ts" name="Color Utils &gt; isValidColor &gt; should validate Ink-supported color names" time="0.0005809">
        </testcase>
        <testcase classname="src/ui/themes/color-utils.test.ts" name="Color Utils &gt; isValidColor &gt; should validate Ink-supported color names case insensitive" time="0.00011">
        </testcase>
        <testcase classname="src/ui/themes/color-utils.test.ts" name="Color Utils &gt; isValidColor &gt; should validate CSS color names" time="0.0002163">
        </testcase>
        <testcase classname="src/ui/themes/color-utils.test.ts" name="Color Utils &gt; isValidColor &gt; should validate CSS color names case insensitive" time="0.0000978">
        </testcase>
        <testcase classname="src/ui/themes/color-utils.test.ts" name="Color Utils &gt; isValidColor &gt; should reject invalid color names" time="0.0000952">
        </testcase>
        <testcase classname="src/ui/themes/color-utils.test.ts" name="Color Utils &gt; resolveColor &gt; should resolve hex colors" time="0.000182">
        </testcase>
        <testcase classname="src/ui/themes/color-utils.test.ts" name="Color Utils &gt; resolveColor &gt; should resolve Ink-supported color names" time="0.0002252">
        </testcase>
        <testcase classname="src/ui/themes/color-utils.test.ts" name="Color Utils &gt; resolveColor &gt; should resolve CSS color names to hex" time="0.0002106">
        </testcase>
        <testcase classname="src/ui/themes/color-utils.test.ts" name="Color Utils &gt; resolveColor &gt; should handle case insensitive color names" time="0.0001028">
        </testcase>
        <testcase classname="src/ui/themes/color-utils.test.ts" name="Color Utils &gt; resolveColor &gt; should return undefined for invalid colors" time="0.0018467">
            <system-err>
[ColorUtils] Could not resolve color &quot;invalidcolor&quot; to an Ink-compatible format.
[ColorUtils] Could not resolve color &quot;notacolor&quot; to an Ink-compatible format.
[ColorUtils] Could not resolve color &quot;&quot; to an Ink-compatible format.

            </system-err>
        </testcase>
        <testcase classname="src/ui/themes/color-utils.test.ts" name="Color Utils &gt; CSS_NAME_TO_HEX_MAP &gt; should contain expected CSS color mappings" time="0.0001845">
        </testcase>
        <testcase classname="src/ui/themes/color-utils.test.ts" name="Color Utils &gt; CSS_NAME_TO_HEX_MAP &gt; should not contain Ink-supported color names" time="0.0001195">
        </testcase>
        <testcase classname="src/ui/themes/color-utils.test.ts" name="Color Utils &gt; INK_SUPPORTED_NAMES &gt; should contain all Ink-supported color names" time="0.0003726">
        </testcase>
        <testcase classname="src/ui/themes/color-utils.test.ts" name="Color Utils &gt; INK_SUPPORTED_NAMES &gt; should not contain CSS color names" time="0.0000926">
        </testcase>
        <testcase classname="src/ui/themes/color-utils.test.ts" name="Color Utils &gt; Consistency between validation and resolution &gt; should have consistent behavior between isValidColor and resolveColor" time="0.0011684">
            <system-err>
[ColorUtils] Could not resolve color &quot;invalidcolor&quot; to an Ink-compatible format.
[ColorUtils] Could not resolve color &quot;notacolor&quot; to an Ink-compatible format.
[ColorUtils] Could not resolve color &quot;&quot; to an Ink-compatible format.

            </system-err>
        </testcase>
    </testsuite>
    <testsuite name="src/ui/themes/theme-manager.test.ts" timestamp="2025-09-23T13:52:09.679Z" hostname="WIN-33AANMPCPKN" tests="12" failures="0" errors="0" skipped="0" time="0.0339811">
        <testcase classname="src/ui/themes/theme-manager.test.ts" name="ThemeManager &gt; should load valid custom themes" time="0.0043743">
        </testcase>
        <testcase classname="src/ui/themes/theme-manager.test.ts" name="ThemeManager &gt; should set and get the active theme" time="0.0007328">
        </testcase>
        <testcase classname="src/ui/themes/theme-manager.test.ts" name="ThemeManager &gt; should set and get a custom active theme" time="0.0005575">
        </testcase>
        <testcase classname="src/ui/themes/theme-manager.test.ts" name="ThemeManager &gt; should return false when setting a non-existent theme" time="0.0003675">
        </testcase>
        <testcase classname="src/ui/themes/theme-manager.test.ts" name="ThemeManager &gt; should list available themes including custom themes" time="0.0167635">
        </testcase>
        <testcase classname="src/ui/themes/theme-manager.test.ts" name="ThemeManager &gt; should get a theme by name" time="0.0005779">
        </testcase>
        <testcase classname="src/ui/themes/theme-manager.test.ts" name="ThemeManager &gt; should fall back to default theme if active theme is invalid" time="0.0003325">
        </testcase>
        <testcase classname="src/ui/themes/theme-manager.test.ts" name="ThemeManager &gt; should return NoColorTheme if NO_COLOR is set" time="0.0003771">
        </testcase>
        <testcase classname="src/ui/themes/theme-manager.test.ts" name="ThemeManager &gt; when loading a theme from a file &gt; should load a theme from a valid file path" time="0.0039618">
        </testcase>
        <testcase classname="src/ui/themes/theme-manager.test.ts" name="ThemeManager &gt; when loading a theme from a file &gt; should not load a theme if the file does not exist" time="0.0027682">
            <system-err>
Theme file at &quot;./my-theme.json&quot; is outside your home directory. Only load themes from trusted sources.

            </system-err>
        </testcase>
        <testcase classname="src/ui/themes/theme-manager.test.ts" name="ThemeManager &gt; when loading a theme from a file &gt; should not load a theme from a file with invalid JSON" time="0.0007541">
            <system-err>
Theme file at &quot;./my-theme.json&quot; is outside your home directory. Only load themes from trusted sources.

            </system-err>
        </testcase>
        <testcase classname="src/ui/themes/theme-manager.test.ts" name="ThemeManager &gt; when loading a theme from a file &gt; should not load a theme from an untrusted file path and log a message" time="0.0007819">
        </testcase>
    </testsuite>
    <testsuite name="src/ui/themes/theme.test.ts" timestamp="2025-09-23T13:52:09.681Z" hostname="WIN-33AANMPCPKN" tests="5" failures="0" errors="0" skipped="0" time="0.0034446">
        <testcase classname="src/ui/themes/theme.test.ts" name="validateCustomTheme &gt; should return isValid: true for a valid theme" time="0.0012317">
        </testcase>
        <testcase classname="src/ui/themes/theme.test.ts" name="validateCustomTheme &gt; should return isValid: false for a theme with an invalid name" time="0.0001344">
        </testcase>
        <testcase classname="src/ui/themes/theme.test.ts" name="validateCustomTheme &gt; should return isValid: true for a theme missing optional DiffAdded and DiffRemoved colors" time="0.0000999">
        </testcase>
        <testcase classname="src/ui/themes/theme.test.ts" name="validateCustomTheme &gt; should return isValid: false for a theme with a very long name" time="0.0001003">
        </testcase>
        <testcase classname="src/ui/themes/theme.test.ts" name="themeManager.loadCustomThemes &gt; should use values from DEFAULT_THEME when DiffAdded and DiffRemoved are not provided" time="0.0007094">
        </testcase>
    </testsuite>
    <testsuite name="src/ui/hooks/atCommandProcessor.test.ts" timestamp="2025-09-23T13:52:09.682Z" hostname="WIN-33AANMPCPKN" tests="39" failures="0" errors="0" skipped="0" time="7.2001438">
        <testcase classname="src/ui/hooks/atCommandProcessor.test.ts" name="handleAtCommand &gt; should pass through query if no @ command is present" time="0.0077697">
        </testcase>
        <testcase classname="src/ui/hooks/atCommandProcessor.test.ts" name="handleAtCommand &gt; should pass through original query if only a lone @ symbol is present" time="0.0847398">
        </testcase>
        <testcase classname="src/ui/hooks/atCommandProcessor.test.ts" name="handleAtCommand &gt; should process a valid text file path" time="0.4267684">
        </testcase>
        <testcase classname="src/ui/hooks/atCommandProcessor.test.ts" name="handleAtCommand &gt; should process a valid directory path and convert to glob" time="0.2892785">
        </testcase>
        <testcase classname="src/ui/hooks/atCommandProcessor.test.ts" name="handleAtCommand &gt; should handle query with text before and after @command" time="0.0100904">
        </testcase>
        <testcase classname="src/ui/hooks/atCommandProcessor.test.ts" name="handleAtCommand &gt; should correctly unescape paths with escaped spaces" time="0.0110422">
        </testcase>
        <testcase classname="src/ui/hooks/atCommandProcessor.test.ts" name="handleAtCommand &gt; should handle multiple @file references" time="0.0092628">
        </testcase>
        <testcase classname="src/ui/hooks/atCommandProcessor.test.ts" name="handleAtCommand &gt; should handle multiple @file references with interleaved text" time="0.2030912">
        </testcase>
        <testcase classname="src/ui/hooks/atCommandProcessor.test.ts" name="handleAtCommand &gt; should handle a mix of valid, invalid, and lone @ references" time="0.46299">
        </testcase>
        <testcase classname="src/ui/hooks/atCommandProcessor.test.ts" name="handleAtCommand &gt; should return original query if all @paths are invalid or lone @" time="0.10576">
        </testcase>
        <testcase classname="src/ui/hooks/atCommandProcessor.test.ts" name="handleAtCommand &gt; git-aware filtering &gt; should skip git-ignored files in @ commands" time="0.2680681">
            <system-out>
Ignored 1 files:
Git-ignored: C:\Users\alroh\AppData\Local\Temp\folder-structure-test-AgG63O\node_modules\package.json

            </system-out>
        </testcase>
        <testcase classname="src/ui/hooks/atCommandProcessor.test.ts" name="handleAtCommand &gt; git-aware filtering &gt; should process non-git-ignored files normally" time="0.6944369">
        </testcase>
        <testcase classname="src/ui/hooks/atCommandProcessor.test.ts" name="handleAtCommand &gt; git-aware filtering &gt; should handle mixed git-ignored and valid files" time="0.9719041">
            <system-out>
Ignored 1 files:
Git-ignored: C:\Users\alroh\AppData\Local\Temp\folder-structure-test-gBRsjL\.env

            </system-out>
        </testcase>
        <testcase classname="src/ui/hooks/atCommandProcessor.test.ts" name="handleAtCommand &gt; git-aware filtering &gt; should always ignore .git directory files" time="0.2952169">
            <system-out>
Ignored 1 files:
Git-ignored: C:\Users\alroh\AppData\Local\Temp\folder-structure-test-CxIkLs\.git\config

            </system-out>
        </testcase>
        <testcase classname="src/ui/hooks/atCommandProcessor.test.ts" name="handleAtCommand &gt; when recursive file search is disabled &gt; should not use glob search for a nonexistent file" time="0.0707489">
        </testcase>
        <testcase classname="src/ui/hooks/atCommandProcessor.test.ts" name="handleAtCommand &gt; gemini-ignore filtering &gt; should skip gemini-ignored files in @ commands" time="0.0312951">
            <system-out>
Ignored 1 files:
Gemini-ignored: C:\Users\alroh\AppData\Local\Temp\folder-structure-test-DNZBaH\build\output.js

            </system-out>
        </testcase>
        <testcase classname="src/ui/hooks/atCommandProcessor.test.ts" name="handleAtCommand &gt; should process non-ignored files when .geminiignore is present" time="0.0099328">
        </testcase>
        <testcase classname="src/ui/hooks/atCommandProcessor.test.ts" name="handleAtCommand &gt; should handle mixed gemini-ignored and valid files" time="0.0096893">
            <system-out>
Ignored 1 files:
Gemini-ignored: C:\Users\alroh\AppData\Local\Temp\folder-structure-test-tcpbYY\dist\bundle.js

            </system-out>
        </testcase>
        <testcase classname="src/ui/hooks/atCommandProcessor.test.ts" name="handleAtCommand &gt; punctuation termination in @ commands &gt; should terminate @path at &apos;comma&apos;" time="0.0079075">
        </testcase>
        <testcase classname="src/ui/hooks/atCommandProcessor.test.ts" name="handleAtCommand &gt; punctuation termination in @ commands &gt; should terminate @path at &apos;period&apos;" time="0.5555">
        </testcase>
        <testcase classname="src/ui/hooks/atCommandProcessor.test.ts" name="handleAtCommand &gt; punctuation termination in @ commands &gt; should terminate @path at &apos;semicolon&apos;" time="0.3794731">
        </testcase>
        <testcase classname="src/ui/hooks/atCommandProcessor.test.ts" name="handleAtCommand &gt; punctuation termination in @ commands &gt; should terminate @path at &apos;exclamation mark&apos;" time="0.0315035">
        </testcase>
        <testcase classname="src/ui/hooks/atCommandProcessor.test.ts" name="handleAtCommand &gt; punctuation termination in @ commands &gt; should terminate @path at &apos;question mark&apos;" time="0.0091308">
        </testcase>
        <testcase classname="src/ui/hooks/atCommandProcessor.test.ts" name="handleAtCommand &gt; punctuation termination in @ commands &gt; should terminate @path at &apos;opening parenthesis&apos;" time="0.0082668">
        </testcase>
        <testcase classname="src/ui/hooks/atCommandProcessor.test.ts" name="handleAtCommand &gt; punctuation termination in @ commands &gt; should terminate @path at &apos;closing parenthesis&apos;" time="0.0107973">
        </testcase>
        <testcase classname="src/ui/hooks/atCommandProcessor.test.ts" name="handleAtCommand &gt; punctuation termination in @ commands &gt; should terminate @path at &apos;opening square bracket&apos;" time="0.4535828">
        </testcase>
        <testcase classname="src/ui/hooks/atCommandProcessor.test.ts" name="handleAtCommand &gt; punctuation termination in @ commands &gt; should terminate @path at &apos;closing square bracket&apos;" time="0.2732417">
        </testcase>
        <testcase classname="src/ui/hooks/atCommandProcessor.test.ts" name="handleAtCommand &gt; punctuation termination in @ commands &gt; should terminate @path at &apos;opening curly brace&apos;" time="0.3397192">
        </testcase>
        <testcase classname="src/ui/hooks/atCommandProcessor.test.ts" name="handleAtCommand &gt; punctuation termination in @ commands &gt; should terminate @path at &apos;closing curly brace&apos;" time="0.1176457">
        </testcase>
        <testcase classname="src/ui/hooks/atCommandProcessor.test.ts" name="handleAtCommand &gt; punctuation termination in @ commands &gt; should handle multiple @paths terminated by different punctuation" time="0.0094044">
        </testcase>
        <testcase classname="src/ui/hooks/atCommandProcessor.test.ts" name="handleAtCommand &gt; punctuation termination in @ commands &gt; should still handle escaped spaces in paths before punctuation" time="0.3051257">
        </testcase>
        <testcase classname="src/ui/hooks/atCommandProcessor.test.ts" name="handleAtCommand &gt; punctuation termination in @ commands &gt; should not break file paths with periods in extensions" time="0.2359497">
        </testcase>
        <testcase classname="src/ui/hooks/atCommandProcessor.test.ts" name="handleAtCommand &gt; punctuation termination in @ commands &gt; should handle file paths ending with period followed by space" time="0.0087761">
        </testcase>
        <testcase classname="src/ui/hooks/atCommandProcessor.test.ts" name="handleAtCommand &gt; punctuation termination in @ commands &gt; should handle comma termination with complex file paths" time="0.0077561">
        </testcase>
        <testcase classname="src/ui/hooks/atCommandProcessor.test.ts" name="handleAtCommand &gt; punctuation termination in @ commands &gt; should not terminate at period within file name" time="0.0080502">
        </testcase>
        <testcase classname="src/ui/hooks/atCommandProcessor.test.ts" name="handleAtCommand &gt; punctuation termination in @ commands &gt; should handle end of string termination for period and comma" time="0.0084249">
        </testcase>
        <testcase classname="src/ui/hooks/atCommandProcessor.test.ts" name="handleAtCommand &gt; punctuation termination in @ commands &gt; should handle files with special characters in names" time="0.0078065">
        </testcase>
        <testcase classname="src/ui/hooks/atCommandProcessor.test.ts" name="handleAtCommand &gt; punctuation termination in @ commands &gt; should handle basic file names without special characters" time="0.2956746">
        </testcase>
        <testcase classname="src/ui/hooks/atCommandProcessor.test.ts" name="handleAtCommand &gt; should not add the user&apos;s turn to history, as that is the caller&apos;s responsibility" time="0.1617288">
        </testcase>
    </testsuite>
    <testsuite name="src/ui/hooks/shellCommandProcessor.test.ts" timestamp="2025-09-23T13:52:09.687Z" hostname="WIN-33AANMPCPKN" tests="1" failures="1" errors="0" skipped="0" time="0">
        <testcase classname="src/ui/hooks/shellCommandProcessor.test.ts" name="src/ui/hooks/shellCommandProcessor.test.ts" time="0">
            <failure message="Cannot read properties of undefined (reading &apos;S&apos;)" type="TypeError">
TypeError: Cannot read properties of undefined (reading &apos;S&apos;)
 ❯ ../../node_modules/react-dom/cjs/react-dom-client.development.js:22587:58
 ❯ Object.&lt;anonymous&gt; ../../node_modules/react-dom/cjs/react-dom-client.development.js:24993:5
            </failure>
        </testcase>
    </testsuite>
    <testsuite name="src/ui/hooks/slashCommandProcessor.test.ts" timestamp="2025-09-23T13:52:09.688Z" hostname="WIN-33AANMPCPKN" tests="1" failures="1" errors="0" skipped="0" time="0">
        <testcase classname="src/ui/hooks/slashCommandProcessor.test.ts" name="src/ui/hooks/slashCommandProcessor.test.ts" time="0">
            <failure message="Cannot read properties of undefined (reading &apos;S&apos;)" type="TypeError">
TypeError: Cannot read properties of undefined (reading &apos;S&apos;)
 ❯ ../../node_modules/react-dom/cjs/react-dom-client.development.js:22587:58
 ❯ Object.&lt;anonymous&gt; ../../node_modules/react-dom/cjs/react-dom-client.development.js:24993:5
            </failure>
        </testcase>
    </testsuite>
    <testsuite name="src/ui/hooks/useAtCompletion.test.ts" timestamp="2025-09-23T13:52:09.689Z" hostname="WIN-33AANMPCPKN" tests="1" failures="1" errors="0" skipped="0" time="0">
        <testcase classname="src/ui/hooks/useAtCompletion.test.ts" name="src/ui/hooks/useAtCompletion.test.ts" time="0">
            <failure message="Cannot read properties of undefined (reading &apos;S&apos;)" type="TypeError">
TypeError: Cannot read properties of undefined (reading &apos;S&apos;)
 ❯ ../../node_modules/react-dom/cjs/react-dom-client.development.js:22587:58
 ❯ Object.&lt;anonymous&gt; ../../node_modules/react-dom/cjs/react-dom-client.development.js:24993:5
            </failure>
        </testcase>
    </testsuite>
    <testsuite name="src/ui/hooks/useAutoAcceptIndicator.test.ts" timestamp="2025-09-23T13:52:09.690Z" hostname="WIN-33AANMPCPKN" tests="1" failures="1" errors="0" skipped="0" time="0">
        <testcase classname="src/ui/hooks/useAutoAcceptIndicator.test.ts" name="src/ui/hooks/useAutoAcceptIndicator.test.ts" time="0">
            <failure message="Cannot read properties of undefined (reading &apos;S&apos;)" type="TypeError">
TypeError: Cannot read properties of undefined (reading &apos;S&apos;)
 ❯ ../../node_modules/react-dom/cjs/react-dom-client.development.js:22587:58
 ❯ Object.&lt;anonymous&gt; ../../node_modules/react-dom/cjs/react-dom-client.development.js:24993:5
            </failure>
        </testcase>
    </testsuite>
    <testsuite name="src/ui/hooks/useCommandCompletion.test.ts" timestamp="2025-09-23T13:52:09.691Z" hostname="WIN-33AANMPCPKN" tests="1" failures="1" errors="0" skipped="0" time="0">
        <testcase classname="src/ui/hooks/useCommandCompletion.test.ts" name="src/ui/hooks/useCommandCompletion.test.ts" time="0">
            <failure message="Cannot read properties of undefined (reading &apos;S&apos;)" type="TypeError">
TypeError: Cannot read properties of undefined (reading &apos;S&apos;)
 ❯ ../../node_modules/react-dom/cjs/react-dom-client.development.js:22587:58
 ❯ Object.&lt;anonymous&gt; ../../node_modules/react-dom/cjs/react-dom-client.development.js:24993:5
            </failure>
        </testcase>
    </testsuite>
    <testsuite name="src/ui/hooks/useConsoleMessages.test.ts" timestamp="2025-09-23T13:52:09.691Z" hostname="WIN-33AANMPCPKN" tests="1" failures="1" errors="0" skipped="0" time="0">
        <testcase classname="src/ui/hooks/useConsoleMessages.test.ts" name="src/ui/hooks/useConsoleMessages.test.ts" time="0">
            <failure message="Cannot read properties of undefined (reading &apos;S&apos;)" type="TypeError">
TypeError: Cannot read properties of undefined (reading &apos;S&apos;)
 ❯ ../../node_modules/react-dom/cjs/react-dom-client.development.js:22587:58
 ❯ Object.&lt;anonymous&gt; ../../node_modules/react-dom/cjs/react-dom-client.development.js:24993:5
            </failure>
        </testcase>
    </testsuite>
    <testsuite name="src/ui/hooks/useEditorSettings.test.ts" timestamp="2025-09-23T13:52:09.692Z" hostname="WIN-33AANMPCPKN" tests="1" failures="1" errors="0" skipped="0" time="0">
        <testcase classname="src/ui/hooks/useEditorSettings.test.ts" name="src/ui/hooks/useEditorSettings.test.ts" time="0">
            <failure message="Cannot read properties of undefined (reading &apos;S&apos;)" type="TypeError">
TypeError: Cannot read properties of undefined (reading &apos;S&apos;)
 ❯ ../../node_modules/react-dom/cjs/react-dom-client.development.js:22587:58
 ❯ Object.&lt;anonymous&gt; ../../node_modules/react-dom/cjs/react-dom-client.development.js:24993:5
            </failure>
        </testcase>
    </testsuite>
    <testsuite name="src/ui/hooks/useExtensionUpdates.test.ts" timestamp="2025-09-23T13:52:09.693Z" hostname="WIN-33AANMPCPKN" tests="1" failures="1" errors="0" skipped="0" time="0">
        <testcase classname="src/ui/hooks/useExtensionUpdates.test.ts" name="src/ui/hooks/useExtensionUpdates.test.ts" time="0">
            <failure message="Cannot read properties of undefined (reading &apos;S&apos;)" type="TypeError">
TypeError: Cannot read properties of undefined (reading &apos;S&apos;)
 ❯ ../../node_modules/react-dom/cjs/react-dom-client.development.js:22587:58
 ❯ Object.&lt;anonymous&gt; ../../node_modules/react-dom/cjs/react-dom-client.development.js:24993:5
            </failure>
        </testcase>
    </testsuite>
    <testsuite name="src/ui/hooks/useFocus.test.ts" timestamp="2025-09-23T13:52:09.694Z" hostname="WIN-33AANMPCPKN" tests="1" failures="1" errors="0" skipped="0" time="0">
        <testcase classname="src/ui/hooks/useFocus.test.ts" name="src/ui/hooks/useFocus.test.ts" time="0">
            <failure message="Cannot read properties of undefined (reading &apos;S&apos;)" type="TypeError">
TypeError: Cannot read properties of undefined (reading &apos;S&apos;)
 ❯ ../../node_modules/react-dom/cjs/react-dom-client.development.js:22587:58
 ❯ Object.&lt;anonymous&gt; ../../node_modules/react-dom/cjs/react-dom-client.development.js:24993:5
            </failure>
        </testcase>
    </testsuite>
    <testsuite name="src/ui/hooks/useFolderTrust.test.ts" timestamp="2025-09-23T13:52:09.695Z" hostname="WIN-33AANMPCPKN" tests="1" failures="1" errors="0" skipped="0" time="0">
        <testcase classname="src/ui/hooks/useFolderTrust.test.ts" name="src/ui/hooks/useFolderTrust.test.ts" time="0">
            <failure message="Cannot read properties of undefined (reading &apos;S&apos;)" type="TypeError">
TypeError: Cannot read properties of undefined (reading &apos;S&apos;)
 ❯ ../../node_modules/react-dom/cjs/react-dom-client.development.js:22587:58
 ❯ Object.&lt;anonymous&gt; ../../node_modules/react-dom/cjs/react-dom-client.development.js:24993:5
            </failure>
        </testcase>
    </testsuite>
    <testsuite name="src/ui/hooks/useGeminiStream.test.tsx" timestamp="2025-09-23T13:52:09.695Z" hostname="WIN-33AANMPCPKN" tests="1" failures="1" errors="0" skipped="0" time="0">
        <testcase classname="src/ui/hooks/useGeminiStream.test.tsx" name="src/ui/hooks/useGeminiStream.test.tsx" time="0">
            <failure message="Cannot read properties of undefined (reading &apos;S&apos;)" type="TypeError">
TypeError: Cannot read properties of undefined (reading &apos;S&apos;)
 ❯ ../../node_modules/react-dom/cjs/react-dom-client.development.js:22587:58
 ❯ Object.&lt;anonymous&gt; ../../node_modules/react-dom/cjs/react-dom-client.development.js:24993:5
            </failure>
        </testcase>
    </testsuite>
    <testsuite name="src/ui/hooks/useGitBranchName.test.ts" timestamp="2025-09-23T13:52:09.696Z" hostname="WIN-33AANMPCPKN" tests="1" failures="1" errors="0" skipped="0" time="0">
        <testcase classname="src/ui/hooks/useGitBranchName.test.ts" name="src/ui/hooks/useGitBranchName.test.ts" time="0">
            <failure message="Cannot read properties of undefined (reading &apos;S&apos;)" type="TypeError">
TypeError: Cannot read properties of undefined (reading &apos;S&apos;)
 ❯ ../../node_modules/react-dom/cjs/react-dom-client.development.js:22587:58
 ❯ Object.&lt;anonymous&gt; ../../node_modules/react-dom/cjs/react-dom-client.development.js:24993:5
            </failure>
        </testcase>
    </testsuite>
    <testsuite name="src/ui/hooks/useHistoryManager.test.ts" timestamp="2025-09-23T13:52:09.697Z" hostname="WIN-33AANMPCPKN" tests="1" failures="1" errors="0" skipped="0" time="0">
        <testcase classname="src/ui/hooks/useHistoryManager.test.ts" name="src/ui/hooks/useHistoryManager.test.ts" time="0">
            <failure message="Cannot read properties of undefined (reading &apos;S&apos;)" type="TypeError">
TypeError: Cannot read properties of undefined (reading &apos;S&apos;)
 ❯ ../../node_modules/react-dom/cjs/react-dom-client.development.js:22587:58
 ❯ Object.&lt;anonymous&gt; ../../node_modules/react-dom/cjs/react-dom-client.development.js:24993:5
            </failure>
        </testcase>
    </testsuite>
    <testsuite name="src/ui/hooks/useInputHistory.test.ts" timestamp="2025-09-23T13:52:09.697Z" hostname="WIN-33AANMPCPKN" tests="1" failures="1" errors="0" skipped="0" time="0">
        <testcase classname="src/ui/hooks/useInputHistory.test.ts" name="src/ui/hooks/useInputHistory.test.ts" time="0">
            <failure message="Cannot read properties of undefined (reading &apos;S&apos;)" type="TypeError">
TypeError: Cannot read properties of undefined (reading &apos;S&apos;)
 ❯ ../../node_modules/react-dom/cjs/react-dom-client.development.js:22587:58
 ❯ Object.&lt;anonymous&gt; ../../node_modules/react-dom/cjs/react-dom-client.development.js:24993:5
            </failure>
        </testcase>
    </testsuite>
    <testsuite name="src/ui/hooks/useInputHistoryStore.test.ts" timestamp="2025-09-23T13:52:09.698Z" hostname="WIN-33AANMPCPKN" tests="1" failures="1" errors="0" skipped="0" time="0">
        <testcase classname="src/ui/hooks/useInputHistoryStore.test.ts" name="src/ui/hooks/useInputHistoryStore.test.ts" time="0">
            <failure message="Cannot read properties of undefined (reading &apos;S&apos;)" type="TypeError">
TypeError: Cannot read properties of undefined (reading &apos;S&apos;)
 ❯ ../../node_modules/react-dom/cjs/react-dom-client.development.js:22587:58
 ❯ Object.&lt;anonymous&gt; ../../node_modules/react-dom/cjs/react-dom-client.development.js:24993:5
            </failure>
        </testcase>
    </testsuite>
    <testsuite name="src/ui/hooks/useKeypress.test.ts" timestamp="2025-09-23T13:52:09.699Z" hostname="WIN-33AANMPCPKN" tests="1" failures="1" errors="0" skipped="0" time="0">
        <testcase classname="src/ui/hooks/useKeypress.test.ts" name="src/ui/hooks/useKeypress.test.ts" time="0">
            <failure message="Cannot read properties of undefined (reading &apos;S&apos;)" type="TypeError">
TypeError: Cannot read properties of undefined (reading &apos;S&apos;)
 ❯ ../../node_modules/react-dom/cjs/react-dom-client.development.js:22587:58
 ❯ Object.&lt;anonymous&gt; ../../node_modules/react-dom/cjs/react-dom-client.development.js:24993:5
            </failure>
        </testcase>
    </testsuite>
    <testsuite name="src/ui/hooks/useLoadingIndicator.test.ts" timestamp="2025-09-23T13:52:09.699Z" hostname="WIN-33AANMPCPKN" tests="1" failures="1" errors="0" skipped="0" time="0">
        <testcase classname="src/ui/hooks/useLoadingIndicator.test.ts" name="src/ui/hooks/useLoadingIndicator.test.ts" time="0">
            <failure message="Cannot read properties of undefined (reading &apos;S&apos;)" type="TypeError">
TypeError: Cannot read properties of undefined (reading &apos;S&apos;)
 ❯ ../../node_modules/react-dom/cjs/react-dom-client.development.js:22587:58
 ❯ Object.&lt;anonymous&gt; ../../node_modules/react-dom/cjs/react-dom-client.development.js:24993:5
            </failure>
        </testcase>
    </testsuite>
    <testsuite name="src/ui/hooks/useMemoryMonitor.test.ts" timestamp="2025-09-23T13:52:09.700Z" hostname="WIN-33AANMPCPKN" tests="1" failures="1" errors="0" skipped="0" time="0">
        <testcase classname="src/ui/hooks/useMemoryMonitor.test.ts" name="src/ui/hooks/useMemoryMonitor.test.ts" time="0">
            <failure message="Cannot read properties of undefined (reading &apos;S&apos;)" type="TypeError">
TypeError: Cannot read properties of undefined (reading &apos;S&apos;)
 ❯ ../../node_modules/react-dom/cjs/react-dom-client.development.js:22587:58
 ❯ Object.&lt;anonymous&gt; ../../node_modules/react-dom/cjs/react-dom-client.development.js:24993:5
            </failure>
        </testcase>
    </testsuite>
    <testsuite name="src/ui/hooks/useMessageQueue.test.ts" timestamp="2025-09-23T13:52:09.700Z" hostname="WIN-33AANMPCPKN" tests="1" failures="1" errors="0" skipped="0" time="0">
        <testcase classname="src/ui/hooks/useMessageQueue.test.ts" name="src/ui/hooks/useMessageQueue.test.ts" time="0">
            <failure message="Cannot read properties of undefined (reading &apos;S&apos;)" type="TypeError">
TypeError: Cannot read properties of undefined (reading &apos;S&apos;)
 ❯ ../../node_modules/react-dom/cjs/react-dom-client.development.js:22587:58
 ❯ Object.&lt;anonymous&gt; ../../node_modules/react-dom/cjs/react-dom-client.development.js:24993:5
            </failure>
        </testcase>
    </testsuite>
    <testsuite name="src/ui/hooks/usePermissionsModifyTrust.test.ts" timestamp="2025-09-23T13:52:09.701Z" hostname="WIN-33AANMPCPKN" tests="1" failures="1" errors="0" skipped="0" time="0">
        <testcase classname="src/ui/hooks/usePermissionsModifyTrust.test.ts" name="src/ui/hooks/usePermissionsModifyTrust.test.ts" time="0">
            <failure message="Cannot read properties of undefined (reading &apos;S&apos;)" type="TypeError">
TypeError: Cannot read properties of undefined (reading &apos;S&apos;)
 ❯ ../../node_modules/react-dom/cjs/react-dom-client.development.js:22587:58
 ❯ Object.&lt;anonymous&gt; ../../node_modules/react-dom/cjs/react-dom-client.development.js:24993:5
            </failure>
        </testcase>
    </testsuite>
    <testsuite name="src/ui/hooks/usePhraseCycler.test.ts" timestamp="2025-09-23T13:52:09.701Z" hostname="WIN-33AANMPCPKN" tests="1" failures="1" errors="0" skipped="0" time="0">
        <testcase classname="src/ui/hooks/usePhraseCycler.test.ts" name="src/ui/hooks/usePhraseCycler.test.ts" time="0">
            <failure message="Cannot read properties of undefined (reading &apos;S&apos;)" type="TypeError">
TypeError: Cannot read properties of undefined (reading &apos;S&apos;)
 ❯ ../../node_modules/react-dom/cjs/react-dom-client.development.js:22587:58
 ❯ Object.&lt;anonymous&gt; ../../node_modules/react-dom/cjs/react-dom-client.development.js:24993:5
            </failure>
        </testcase>
    </testsuite>
    <testsuite name="src/ui/hooks/usePrivacySettings.test.ts" timestamp="2025-09-23T13:52:09.702Z" hostname="WIN-33AANMPCPKN" tests="1" failures="1" errors="0" skipped="0" time="0">
        <testcase classname="src/ui/hooks/usePrivacySettings.test.ts" name="src/ui/hooks/usePrivacySettings.test.ts" time="0">
            <failure message="Cannot read properties of undefined (reading &apos;S&apos;)" type="TypeError">
TypeError: Cannot read properties of undefined (reading &apos;S&apos;)
 ❯ ../../node_modules/react-dom/cjs/react-dom-client.development.js:22587:58
 ❯ Object.&lt;anonymous&gt; ../../node_modules/react-dom/cjs/react-dom-client.development.js:24993:5
            </failure>
        </testcase>
    </testsuite>
    <testsuite name="src/ui/hooks/useQuotaAndFallback.test.ts" timestamp="2025-09-23T13:52:09.703Z" hostname="WIN-33AANMPCPKN" tests="1" failures="1" errors="0" skipped="0" time="0">
        <testcase classname="src/ui/hooks/useQuotaAndFallback.test.ts" name="src/ui/hooks/useQuotaAndFallback.test.ts" time="0">
            <failure message="Cannot read properties of undefined (reading &apos;S&apos;)" type="TypeError">
TypeError: Cannot read properties of undefined (reading &apos;S&apos;)
 ❯ ../../node_modules/react-dom/cjs/react-dom-client.development.js:22587:58
 ❯ Object.&lt;anonymous&gt; ../../node_modules/react-dom/cjs/react-dom-client.development.js:24993:5
            </failure>
        </testcase>
    </testsuite>
    <testsuite name="src/ui/hooks/useReverseSearchCompletion.test.tsx" timestamp="2025-09-23T13:52:09.704Z" hostname="WIN-33AANMPCPKN" tests="1" failures="1" errors="0" skipped="0" time="0">
        <testcase classname="src/ui/hooks/useReverseSearchCompletion.test.tsx" name="src/ui/hooks/useReverseSearchCompletion.test.tsx" time="0">
            <failure message="Cannot read properties of undefined (reading &apos;S&apos;)" type="TypeError">
TypeError: Cannot read properties of undefined (reading &apos;S&apos;)
 ❯ ../../node_modules/react-dom/cjs/react-dom-client.development.js:22587:58
 ❯ Object.&lt;anonymous&gt; ../../node_modules/react-dom/cjs/react-dom-client.development.js:24993:5
            </failure>
        </testcase>
    </testsuite>
    <testsuite name="src/ui/hooks/useSelectionList.test.ts" timestamp="2025-09-23T13:52:09.704Z" hostname="WIN-33AANMPCPKN" tests="1" failures="1" errors="0" skipped="0" time="0">
        <testcase classname="src/ui/hooks/useSelectionList.test.ts" name="src/ui/hooks/useSelectionList.test.ts" time="0">
            <failure message="Cannot read properties of undefined (reading &apos;S&apos;)" type="TypeError">
TypeError: Cannot read properties of undefined (reading &apos;S&apos;)
 ❯ ../../node_modules/react-dom/cjs/react-dom-client.development.js:22587:58
 ❯ Object.&lt;anonymous&gt; ../../node_modules/react-dom/cjs/react-dom-client.development.js:24993:5
            </failure>
        </testcase>
    </testsuite>
    <testsuite name="src/ui/hooks/useShellHistory.test.ts" timestamp="2025-09-23T13:52:09.705Z" hostname="WIN-33AANMPCPKN" tests="1" failures="1" errors="0" skipped="0" time="0">
        <testcase classname="src/ui/hooks/useShellHistory.test.ts" name="src/ui/hooks/useShellHistory.test.ts" time="0">
            <failure message="Cannot read properties of undefined (reading &apos;S&apos;)" type="TypeError">
TypeError: Cannot read properties of undefined (reading &apos;S&apos;)
 ❯ ../../node_modules/react-dom/cjs/react-dom-client.development.js:22587:58
 ❯ Object.&lt;anonymous&gt; ../../node_modules/react-dom/cjs/react-dom-client.development.js:24993:5
            </failure>
        </testcase>
    </testsuite>
    <testsuite name="src/ui/hooks/useSlashCompletion.test.ts" timestamp="2025-09-23T13:52:09.705Z" hostname="WIN-33AANMPCPKN" tests="1" failures="1" errors="0" skipped="0" time="0">
        <testcase classname="src/ui/hooks/useSlashCompletion.test.ts" name="src/ui/hooks/useSlashCompletion.test.ts" time="0">
            <failure message="Cannot read properties of undefined (reading &apos;S&apos;)" type="TypeError">
TypeError: Cannot read properties of undefined (reading &apos;S&apos;)
 ❯ ../../node_modules/react-dom/cjs/react-dom-client.development.js:22587:58
 ❯ Object.&lt;anonymous&gt; ../../node_modules/react-dom/cjs/react-dom-client.development.js:24993:5
            </failure>
        </testcase>
    </testsuite>
    <testsuite name="src/ui/hooks/useTimer.test.ts" timestamp="2025-09-23T13:52:09.706Z" hostname="WIN-33AANMPCPKN" tests="1" failures="1" errors="0" skipped="0" time="0">
        <testcase classname="src/ui/hooks/useTimer.test.ts" name="src/ui/hooks/useTimer.test.ts" time="0">
            <failure message="Cannot read properties of undefined (reading &apos;S&apos;)" type="TypeError">
TypeError: Cannot read properties of undefined (reading &apos;S&apos;)
 ❯ ../../node_modules/react-dom/cjs/react-dom-client.development.js:22587:58
 ❯ Object.&lt;anonymous&gt; ../../node_modules/react-dom/cjs/react-dom-client.development.js:24993:5
            </failure>
        </testcase>
    </testsuite>
    <testsuite name="src/ui/hooks/useToolScheduler.test.ts" timestamp="2025-09-23T13:52:09.707Z" hostname="WIN-33AANMPCPKN" tests="1" failures="1" errors="0" skipped="0" time="0">
        <testcase classname="src/ui/hooks/useToolScheduler.test.ts" name="src/ui/hooks/useToolScheduler.test.ts" time="0">
            <failure message="Cannot read properties of undefined (reading &apos;S&apos;)" type="TypeError">
TypeError: Cannot read properties of undefined (reading &apos;S&apos;)
 ❯ ../../node_modules/react-dom/cjs/react-dom-client.development.js:22587:58
 ❯ Object.&lt;anonymous&gt; ../../node_modules/react-dom/cjs/react-dom-client.development.js:24993:5
            </failure>
        </testcase>
    </testsuite>
    <testsuite name="src/ui/hooks/vim.test.ts" timestamp="2025-09-23T13:52:09.707Z" hostname="WIN-33AANMPCPKN" tests="1" failures="1" errors="0" skipped="0" time="0">
        <testcase classname="src/ui/hooks/vim.test.ts" name="src/ui/hooks/vim.test.ts" time="0">
            <failure message="Cannot read properties of undefined (reading &apos;S&apos;)" type="TypeError">
TypeError: Cannot read properties of undefined (reading &apos;S&apos;)
 ❯ ../../node_modules/react-dom/cjs/react-dom-client.development.js:22587:58
 ❯ Object.&lt;anonymous&gt; ../../node_modules/react-dom/cjs/react-dom-client.development.js:24993:5
            </failure>
        </testcase>
    </testsuite>
    <testsuite name="src/ui/utils/clipboardUtils.test.ts" timestamp="2025-09-23T13:52:09.708Z" hostname="WIN-33AANMPCPKN" tests="6" failures="0" errors="0" skipped="0" time="0.0042755">
        <testcase classname="src/ui/utils/clipboardUtils.test.ts" name="clipboardUtils &gt; clipboardHasImage &gt; should return false on non-macOS platforms" time="0.001262">
        </testcase>
        <testcase classname="src/ui/utils/clipboardUtils.test.ts" name="clipboardUtils &gt; clipboardHasImage &gt; should return boolean on macOS" time="0.0001171">
        </testcase>
        <testcase classname="src/ui/utils/clipboardUtils.test.ts" name="clipboardUtils &gt; saveClipboardImage &gt; should return null on non-macOS platforms" time="0.0001901">
        </testcase>
        <testcase classname="src/ui/utils/clipboardUtils.test.ts" name="clipboardUtils &gt; saveClipboardImage &gt; should handle errors gracefully" time="0.0000846">
        </testcase>
        <testcase classname="src/ui/utils/clipboardUtils.test.ts" name="clipboardUtils &gt; cleanupOldClipboardImages &gt; should not throw errors" time="0.0010517">
        </testcase>
        <testcase classname="src/ui/utils/clipboardUtils.test.ts" name="clipboardUtils &gt; cleanupOldClipboardImages &gt; should complete without errors on valid directory" time="0.000295">
        </testcase>
    </testsuite>
    <testsuite name="src/ui/utils/commandUtils.test.ts" timestamp="2025-09-23T13:52:09.709Z" hostname="WIN-33AANMPCPKN" tests="26" failures="0" errors="0" skipped="0" time="0.2017413">
        <testcase classname="src/ui/utils/commandUtils.test.ts" name="commandUtils &gt; isAtCommand &gt; should return true when query starts with @" time="0.0017089">
        </testcase>
        <testcase classname="src/ui/utils/commandUtils.test.ts" name="commandUtils &gt; isAtCommand &gt; should return true when query contains @ preceded by whitespace" time="0.0003336">
        </testcase>
        <testcase classname="src/ui/utils/commandUtils.test.ts" name="commandUtils &gt; isAtCommand &gt; should return false when query does not start with @ and has no spaced @" time="0.0002325">
        </testcase>
        <testcase classname="src/ui/utils/commandUtils.test.ts" name="commandUtils &gt; isAtCommand &gt; should return false when @ is not preceded by whitespace" time="0.0001599">
        </testcase>
        <testcase classname="src/ui/utils/commandUtils.test.ts" name="commandUtils &gt; isSlashCommand &gt; should return true when query starts with /" time="0.000226">
        </testcase>
        <testcase classname="src/ui/utils/commandUtils.test.ts" name="commandUtils &gt; isSlashCommand &gt; should return false when query does not start with /" time="0.0002163">
        </testcase>
        <testcase classname="src/ui/utils/commandUtils.test.ts" name="commandUtils &gt; isSlashCommand &gt; should return false for line comments starting with //" time="0.0004847">
        </testcase>
        <testcase classname="src/ui/utils/commandUtils.test.ts" name="commandUtils &gt; isSlashCommand &gt; should return false for block comments starting with /*" time="0.0005075">
        </testcase>
        <testcase classname="src/ui/utils/commandUtils.test.ts" name="commandUtils &gt; copyToClipboard &gt; on macOS (darwin) &gt; should successfully copy text to clipboard using pbcopy" time="0.008598">
        </testcase>
        <testcase classname="src/ui/utils/commandUtils.test.ts" name="commandUtils &gt; copyToClipboard &gt; on macOS (darwin) &gt; should handle pbcopy command failure" time="0.0015154">
        </testcase>
        <testcase classname="src/ui/utils/commandUtils.test.ts" name="commandUtils &gt; copyToClipboard &gt; on macOS (darwin) &gt; should handle spawn error" time="0.0126808">
        </testcase>
        <testcase classname="src/ui/utils/commandUtils.test.ts" name="commandUtils &gt; copyToClipboard &gt; on macOS (darwin) &gt; should handle stdin write error" time="0.0158023">
        </testcase>
        <testcase classname="src/ui/utils/commandUtils.test.ts" name="commandUtils &gt; copyToClipboard &gt; on Windows (win32) &gt; should successfully copy text to clipboard using clip" time="0.0153382">
        </testcase>
        <testcase classname="src/ui/utils/commandUtils.test.ts" name="commandUtils &gt; copyToClipboard &gt; on Linux &gt; should successfully copy text to clipboard using xclip" time="0.0154037">
        </testcase>
        <testcase classname="src/ui/utils/commandUtils.test.ts" name="commandUtils &gt; copyToClipboard &gt; on Linux &gt; should fall back to xsel when xclip fails" time="0.0152816">
        </testcase>
        <testcase classname="src/ui/utils/commandUtils.test.ts" name="commandUtils &gt; copyToClipboard &gt; on Linux &gt; should throw error when both xclip and xsel are not found" time="0.0188209">
        </testcase>
        <testcase classname="src/ui/utils/commandUtils.test.ts" name="commandUtils &gt; copyToClipboard &gt; on Linux &gt; should emit error when xclip or xsel fail with stderr output (command installed)" time="0.0310576">
        </testcase>
        <testcase classname="src/ui/utils/commandUtils.test.ts" name="commandUtils &gt; copyToClipboard &gt; on unsupported platform &gt; should throw error for unsupported platform" time="0.0005263">
        </testcase>
        <testcase classname="src/ui/utils/commandUtils.test.ts" name="commandUtils &gt; copyToClipboard &gt; error handling &gt; should handle command exit without stderr" time="0.0148628">
        </testcase>
        <testcase classname="src/ui/utils/commandUtils.test.ts" name="commandUtils &gt; copyToClipboard &gt; error handling &gt; should handle empty text" time="0.0134386">
        </testcase>
        <testcase classname="src/ui/utils/commandUtils.test.ts" name="commandUtils &gt; copyToClipboard &gt; error handling &gt; should handle multiline text" time="0.0176764">
        </testcase>
        <testcase classname="src/ui/utils/commandUtils.test.ts" name="commandUtils &gt; copyToClipboard &gt; error handling &gt; should handle special characters" time="0.0118343">
        </testcase>
        <testcase classname="src/ui/utils/commandUtils.test.ts" name="commandUtils &gt; getUrlOpenCommand &gt; on macOS (darwin) &gt; should return open" time="0.0004408">
        </testcase>
        <testcase classname="src/ui/utils/commandUtils.test.ts" name="commandUtils &gt; getUrlOpenCommand &gt; on Windows (win32) &gt; should return start" time="0.00019">
        </testcase>
        <testcase classname="src/ui/utils/commandUtils.test.ts" name="commandUtils &gt; getUrlOpenCommand &gt; on Linux (linux) &gt; should return xdg-open" time="0.0005333">
        </testcase>
        <testcase classname="src/ui/utils/commandUtils.test.ts" name="commandUtils &gt; getUrlOpenCommand &gt; on unmatched OS &gt; should return xdg-open" time="0.0018857">
            <system-err>
Unknown platform: unmatched. Attempting to open URLs with: xdg-open.

            </system-err>
        </testcase>
    </testsuite>
    <testsuite name="src/ui/utils/computeStats.test.ts" timestamp="2025-09-23T13:52:09.712Z" hostname="WIN-33AANMPCPKN" tests="12" failures="0" errors="0" skipped="0" time="0.0061586">
        <testcase classname="src/ui/utils/computeStats.test.ts" name="calculateErrorRate &gt; should return 0 if totalRequests is 0" time="0.0017139">
        </testcase>
        <testcase classname="src/ui/utils/computeStats.test.ts" name="calculateErrorRate &gt; should calculate the error rate correctly" time="0.0001832">
        </testcase>
        <testcase classname="src/ui/utils/computeStats.test.ts" name="calculateAverageLatency &gt; should return 0 if totalRequests is 0" time="0.0001568">
        </testcase>
        <testcase classname="src/ui/utils/computeStats.test.ts" name="calculateAverageLatency &gt; should calculate the average latency correctly" time="0.0001018">
        </testcase>
        <testcase classname="src/ui/utils/computeStats.test.ts" name="calculateCacheHitRate &gt; should return 0 if prompt tokens is 0" time="0.0001205">
        </testcase>
        <testcase classname="src/ui/utils/computeStats.test.ts" name="calculateCacheHitRate &gt; should calculate the cache hit rate correctly" time="0.0000905">
        </testcase>
        <testcase classname="src/ui/utils/computeStats.test.ts" name="computeSessionStats &gt; should return all zeros for initial empty metrics" time="0.0012298">
        </testcase>
        <testcase classname="src/ui/utils/computeStats.test.ts" name="computeSessionStats &gt; should correctly calculate API and tool time percentages" time="0.0003197">
        </testcase>
        <testcase classname="src/ui/utils/computeStats.test.ts" name="computeSessionStats &gt; should correctly calculate cache efficiency" time="0.0002204">
        </testcase>
        <testcase classname="src/ui/utils/computeStats.test.ts" name="computeSessionStats &gt; should correctly calculate success and agreement rates" time="0.0001525">
        </testcase>
        <testcase classname="src/ui/utils/computeStats.test.ts" name="computeSessionStats &gt; should handle division by zero gracefully" time="0.0002034">
        </testcase>
        <testcase classname="src/ui/utils/computeStats.test.ts" name="computeSessionStats &gt; should correctly include line counts" time="0.0001182">
        </testcase>
    </testsuite>
    <testsuite name="src/ui/utils/displayUtils.test.ts" timestamp="2025-09-23T13:52:09.714Z" hostname="WIN-33AANMPCPKN" tests="5" failures="0" errors="0" skipped="0" time="0.0032161">
        <testcase classname="src/ui/utils/displayUtils.test.ts" name="displayUtils &gt; getStatusColor &gt; should return green for values &gt;= green threshold" time="0.0014927">
        </testcase>
        <testcase classname="src/ui/utils/displayUtils.test.ts" name="displayUtils &gt; getStatusColor &gt; should return yellow for values &lt; green and &gt;= yellow threshold" time="0.0001552">
        </testcase>
        <testcase classname="src/ui/utils/displayUtils.test.ts" name="displayUtils &gt; getStatusColor &gt; should return red for values &lt; yellow threshold" time="0.000117">
        </testcase>
        <testcase classname="src/ui/utils/displayUtils.test.ts" name="displayUtils &gt; getStatusColor &gt; should return defaultColor for values &lt; yellow threshold when provided" time="0.0000908">
        </testcase>
        <testcase classname="src/ui/utils/displayUtils.test.ts" name="displayUtils &gt; Threshold Constants &gt; should have the correct values" time="0.0002157">
        </testcase>
    </testsuite>
    <testsuite name="src/ui/utils/formatters.test.ts" timestamp="2025-09-23T13:52:09.715Z" hostname="WIN-33AANMPCPKN" tests="14" failures="0" errors="0" skipped="0" time="0.0039608">
        <testcase classname="src/ui/utils/formatters.test.ts" name="formatters &gt; formatMemoryUsage &gt; should format bytes into KB" time="0.0013127">
        </testcase>
        <testcase classname="src/ui/utils/formatters.test.ts" name="formatters &gt; formatMemoryUsage &gt; should format bytes into MB" time="0.0001161">
        </testcase>
        <testcase classname="src/ui/utils/formatters.test.ts" name="formatters &gt; formatMemoryUsage &gt; should format bytes into GB" time="0.000082">
        </testcase>
        <testcase classname="src/ui/utils/formatters.test.ts" name="formatters &gt; formatDuration &gt; should format milliseconds less than a second" time="0.0001332">
        </testcase>
        <testcase classname="src/ui/utils/formatters.test.ts" name="formatters &gt; formatDuration &gt; should format a duration of 0" time="0.0000681">
        </testcase>
        <testcase classname="src/ui/utils/formatters.test.ts" name="formatters &gt; formatDuration &gt; should format an exact number of seconds" time="0.0000631">
        </testcase>
        <testcase classname="src/ui/utils/formatters.test.ts" name="formatters &gt; formatDuration &gt; should format a duration in seconds with one decimal place" time="0.0000595">
        </testcase>
        <testcase classname="src/ui/utils/formatters.test.ts" name="formatters &gt; formatDuration &gt; should format an exact number of minutes" time="0.0000651">
        </testcase>
        <testcase classname="src/ui/utils/formatters.test.ts" name="formatters &gt; formatDuration &gt; should format a duration in minutes and seconds" time="0.0000695">
        </testcase>
        <testcase classname="src/ui/utils/formatters.test.ts" name="formatters &gt; formatDuration &gt; should format an exact number of hours" time="0.0000606">
        </testcase>
        <testcase classname="src/ui/utils/formatters.test.ts" name="formatters &gt; formatDuration &gt; should format a duration in hours and seconds" time="0.0000565">
        </testcase>
        <testcase classname="src/ui/utils/formatters.test.ts" name="formatters &gt; formatDuration &gt; should format a duration in hours, minutes, and seconds" time="0.0000606">
        </testcase>
        <testcase classname="src/ui/utils/formatters.test.ts" name="formatters &gt; formatDuration &gt; should handle large durations" time="0.000057">
        </testcase>
        <testcase classname="src/ui/utils/formatters.test.ts" name="formatters &gt; formatDuration &gt; should handle negative durations" time="0.0000548">
        </testcase>
    </testsuite>
    <testsuite name="src/ui/utils/highlight.test.ts" timestamp="2025-09-23T13:52:09.717Z" hostname="WIN-33AANMPCPKN" tests="16" failures="0" errors="0" skipped="0" time="0.004673">
        <testcase classname="src/ui/utils/highlight.test.ts" name="parseInputForHighlighting &gt; should handle an empty string" time="0.0017556">
        </testcase>
        <testcase classname="src/ui/utils/highlight.test.ts" name="parseInputForHighlighting &gt; should handle text with no commands or files" time="0.0002433">
        </testcase>
        <testcase classname="src/ui/utils/highlight.test.ts" name="parseInputForHighlighting &gt; should highlight a single command at the beginning when index is 0" time="0.000194">
        </testcase>
        <testcase classname="src/ui/utils/highlight.test.ts" name="parseInputForHighlighting &gt; should NOT highlight a command at the beginning when index is not 0" time="0.0001003">
        </testcase>
        <testcase classname="src/ui/utils/highlight.test.ts" name="parseInputForHighlighting &gt; should highlight a single file path at the beginning" time="0.0000945">
        </testcase>
        <testcase classname="src/ui/utils/highlight.test.ts" name="parseInputForHighlighting &gt; should not highlight a command in the middle" time="0.0000775">
        </testcase>
        <testcase classname="src/ui/utils/highlight.test.ts" name="parseInputForHighlighting &gt; should highlight a file path in the middle" time="0.0000959">
        </testcase>
        <testcase classname="src/ui/utils/highlight.test.ts" name="parseInputForHighlighting &gt; should highlight files but not commands not at the start" time="0.000103">
        </testcase>
        <testcase classname="src/ui/utils/highlight.test.ts" name="parseInputForHighlighting &gt; should handle adjacent highlights at start" time="0.0000911">
        </testcase>
        <testcase classname="src/ui/utils/highlight.test.ts" name="parseInputForHighlighting &gt; should not highlight command at the end of the string" time="0.0000804">
        </testcase>
        <testcase classname="src/ui/utils/highlight.test.ts" name="parseInputForHighlighting &gt; should handle file paths with dots and dashes" time="0.0000848">
        </testcase>
        <testcase classname="src/ui/utils/highlight.test.ts" name="parseInputForHighlighting &gt; should not highlight command with dashes and numbers not at start" time="0.0000726">
        </testcase>
        <testcase classname="src/ui/utils/highlight.test.ts" name="parseInputForHighlighting &gt; should highlight command with dashes and numbers at start" time="0.0000811">
        </testcase>
        <testcase classname="src/ui/utils/highlight.test.ts" name="parseInputForHighlighting &gt; should still highlight a file path on a non-zero line" time="0.0000809">
        </testcase>
        <testcase classname="src/ui/utils/highlight.test.ts" name="parseInputForHighlighting &gt; should not highlight command but highlight file on a non-zero line" time="0.0000926">
        </testcase>
        <testcase classname="src/ui/utils/highlight.test.ts" name="parseInputForHighlighting &gt; should highlight a file path with escaped spaces" time="0.0000808">
        </testcase>
    </testsuite>
    <testsuite name="src/ui/utils/MarkdownDisplay.test.tsx" timestamp="2025-09-23T13:52:09.719Z" hostname="WIN-33AANMPCPKN" tests="16" failures="0" errors="0" skipped="0" time="0.5532666">
        <testcase classname="src/ui/utils/MarkdownDisplay.test.tsx" name="&lt;MarkdownDisplay /&gt; &gt; renders nothing for empty text" time="0.0159243">
        </testcase>
        <testcase classname="src/ui/utils/MarkdownDisplay.test.tsx" name="&lt;MarkdownDisplay /&gt; &gt; renders a simple paragraph" time="0.0094929">
        </testcase>
        <testcase classname="src/ui/utils/MarkdownDisplay.test.tsx" name="&lt;MarkdownDisplay /&gt; &gt; renders headers with correct levels" time="0.0036544">
        </testcase>
        <testcase classname="src/ui/utils/MarkdownDisplay.test.tsx" name="&lt;MarkdownDisplay /&gt; &gt; renders a fenced code block with a language" time="0.0427434">
        </testcase>
        <testcase classname="src/ui/utils/MarkdownDisplay.test.tsx" name="&lt;MarkdownDisplay /&gt; &gt; renders a fenced code block without a language" time="0.3059869">
        </testcase>
        <testcase classname="src/ui/utils/MarkdownDisplay.test.tsx" name="&lt;MarkdownDisplay /&gt; &gt; handles unclosed (pending) code blocks" time="0.0079666">
        </testcase>
        <testcase classname="src/ui/utils/MarkdownDisplay.test.tsx" name="&lt;MarkdownDisplay /&gt; &gt; renders unordered lists with different markers" time="0.0049943">
        </testcase>
        <testcase classname="src/ui/utils/MarkdownDisplay.test.tsx" name="&lt;MarkdownDisplay /&gt; &gt; renders nested unordered lists" time="0.0038658">
        </testcase>
        <testcase classname="src/ui/utils/MarkdownDisplay.test.tsx" name="&lt;MarkdownDisplay /&gt; &gt; renders ordered lists" time="0.0039875">
        </testcase>
        <testcase classname="src/ui/utils/MarkdownDisplay.test.tsx" name="&lt;MarkdownDisplay /&gt; &gt; renders horizontal rules" time="0.0034254">
        </testcase>
        <testcase classname="src/ui/utils/MarkdownDisplay.test.tsx" name="&lt;MarkdownDisplay /&gt; &gt; renders tables correctly" time="0.0140999">
        </testcase>
        <testcase classname="src/ui/utils/MarkdownDisplay.test.tsx" name="&lt;MarkdownDisplay /&gt; &gt; handles a table at the end of the input" time="0.0233354">
        </testcase>
        <testcase classname="src/ui/utils/MarkdownDisplay.test.tsx" name="&lt;MarkdownDisplay /&gt; &gt; inserts a single space between paragraphs" time="0.0022478">
        </testcase>
        <testcase classname="src/ui/utils/MarkdownDisplay.test.tsx" name="&lt;MarkdownDisplay /&gt; &gt; correctly parses a mix of markdown elements" time="0.0936437">
        </testcase>
        <testcase classname="src/ui/utils/MarkdownDisplay.test.tsx" name="&lt;MarkdownDisplay /&gt; &gt; hides line numbers in code blocks when showLineNumbers is false" time="0.0128572">
        </testcase>
        <testcase classname="src/ui/utils/MarkdownDisplay.test.tsx" name="&lt;MarkdownDisplay /&gt; &gt; shows line numbers in code blocks by default" time="0.0025252">
        </testcase>
    </testsuite>
    <testsuite name="src/ui/utils/markdownUtilities.test.ts" timestamp="2025-09-23T13:52:09.721Z" hostname="WIN-33AANMPCPKN" tests="7" failures="0" errors="0" skipped="0" time="0.0037263">
        <testcase classname="src/ui/utils/markdownUtilities.test.ts" name="markdownUtilities &gt; findLastSafeSplitPoint &gt; should split at the last double newline if not in a code block" time="0.001661">
        </testcase>
        <testcase classname="src/ui/utils/markdownUtilities.test.ts" name="markdownUtilities &gt; findLastSafeSplitPoint &gt; should return content.length if no safe split point is found" time="0.0001546">
        </testcase>
        <testcase classname="src/ui/utils/markdownUtilities.test.ts" name="markdownUtilities &gt; findLastSafeSplitPoint &gt; should prioritize splitting at 

 over being at the very end of the string if the end is not in a code block" time="0.0001028">
        </testcase>
        <testcase classname="src/ui/utils/markdownUtilities.test.ts" name="markdownUtilities &gt; findLastSafeSplitPoint &gt; should return content.length if the only 

 is inside a code block and the end of content is not" time="0.0000914">
        </testcase>
        <testcase classname="src/ui/utils/markdownUtilities.test.ts" name="markdownUtilities &gt; findLastSafeSplitPoint &gt; should correctly identify the last 

 even if it is followed by text not in a code block" time="0.0000825">
        </testcase>
        <testcase classname="src/ui/utils/markdownUtilities.test.ts" name="markdownUtilities &gt; findLastSafeSplitPoint &gt; should return content.length if content is empty" time="0.0000792">
        </testcase>
        <testcase classname="src/ui/utils/markdownUtilities.test.ts" name="markdownUtilities &gt; findLastSafeSplitPoint &gt; should return content.length if content has no newlines and no code blocks" time="0.000077">
        </testcase>
    </testsuite>
    <testsuite name="src/ui/utils/updateCheck.test.ts" timestamp="2025-09-23T13:52:09.722Z" hostname="WIN-33AANMPCPKN" tests="9" failures="0" errors="0" skipped="0" time="0.0572523">
        <testcase classname="src/ui/utils/updateCheck.test.ts" name="checkForUpdates &gt; should return null when running from source (DEV=true)" time="0.003498">
        </testcase>
        <testcase classname="src/ui/utils/updateCheck.test.ts" name="checkForUpdates &gt; should return null if package.json is missing" time="0.000452">
        </testcase>
        <testcase classname="src/ui/utils/updateCheck.test.ts" name="checkForUpdates &gt; should return null if there is no update" time="0.0005004">
        </testcase>
        <testcase classname="src/ui/utils/updateCheck.test.ts" name="checkForUpdates &gt; should return a message if a newer version is available" time="0.0016687">
        </testcase>
        <testcase classname="src/ui/utils/updateCheck.test.ts" name="checkForUpdates &gt; should return null if the latest version is the same as the current version" time="0.0427753">
        </testcase>
        <testcase classname="src/ui/utils/updateCheck.test.ts" name="checkForUpdates &gt; should return null if the latest version is older than the current version" time="0.0005949">
        </testcase>
        <testcase classname="src/ui/utils/updateCheck.test.ts" name="checkForUpdates &gt; should return null if fetchInfo rejects" time="0.0050248">
            <system-err>
Failed to check for updates: Error: Timeout

            </system-err>
        </testcase>
        <testcase classname="src/ui/utils/updateCheck.test.ts" name="checkForUpdates &gt; should handle errors gracefully" time="0.000502">
            <system-err>
Failed to check for updates: Error: test error

            </system-err>
        </testcase>
        <testcase classname="src/ui/utils/updateCheck.test.ts" name="checkForUpdates &gt; nightly updates &gt; should notify for a newer nightly version when current is nightly" time="0.0010721">
        </testcase>
    </testsuite>
    <testsuite name="src/ui/components/messages/CompressionMessage.test.tsx" timestamp="2025-09-23T13:52:09.723Z" hostname="WIN-33AANMPCPKN" tests="8" failures="0" errors="0" skipped="0" time="0.101084">
        <testcase classname="src/ui/components/messages/CompressionMessage.test.tsx" name="&lt;CompressionMessage /&gt; &gt; pending state &gt; renders pending message when compression is in progress" time="0.0330121">
        </testcase>
        <testcase classname="src/ui/components/messages/CompressionMessage.test.tsx" name="&lt;CompressionMessage /&gt; &gt; normal compression (successful token reduction) &gt; renders success message when tokens are reduced" time="0.0035855">
        </testcase>
        <testcase classname="src/ui/components/messages/CompressionMessage.test.tsx" name="&lt;CompressionMessage /&gt; &gt; normal compression (successful token reduction) &gt; renders success message for large successful compressions" time="0.0060852">
        </testcase>
        <testcase classname="src/ui/components/messages/CompressionMessage.test.tsx" name="&lt;CompressionMessage /&gt; &gt; skipped compression (tokens increased or same) &gt; renders skip message when compression would increase token count" time="0.0027141">
        </testcase>
        <testcase classname="src/ui/components/messages/CompressionMessage.test.tsx" name="&lt;CompressionMessage /&gt; &gt; skipped compression (tokens increased or same) &gt; renders skip message when token counts are equal" time="0.0022444">
        </testcase>
        <testcase classname="src/ui/components/messages/CompressionMessage.test.tsx" name="&lt;CompressionMessage /&gt; &gt; message content validation &gt; displays correct compression statistics" time="0.0072868">
        </testcase>
        <testcase classname="src/ui/components/messages/CompressionMessage.test.tsx" name="&lt;CompressionMessage /&gt; &gt; message content validation &gt; shows skip message for small histories when new tokens &gt;= original tokens" time="0.0186803">
        </testcase>
        <testcase classname="src/ui/components/messages/CompressionMessage.test.tsx" name="&lt;CompressionMessage /&gt; &gt; message content validation &gt; shows compression failure message for large histories when new tokens &gt;= original tokens" time="0.0259151">
        </testcase>
    </testsuite>
    <testsuite name="src/ui/components/messages/DiffRenderer.test.tsx" timestamp="2025-09-23T13:52:09.725Z" hostname="WIN-33AANMPCPKN" tests="13" failures="0" errors="0" skipped="0" time="1.3055914">
        <testcase classname="src/ui/components/messages/DiffRenderer.test.tsx" name="&lt;OverflowProvider&gt;&lt;DiffRenderer /&gt;&lt;/OverflowProvider&gt; &gt; should call colorizeCode with correct language for new file with known extension" time="0.0934379">
        </testcase>
        <testcase classname="src/ui/components/messages/DiffRenderer.test.tsx" name="&lt;OverflowProvider&gt;&lt;DiffRenderer /&gt;&lt;/OverflowProvider&gt; &gt; should call colorizeCode with null language for new file with unknown extension" time="0.4038813">
        </testcase>
        <testcase classname="src/ui/components/messages/DiffRenderer.test.tsx" name="&lt;OverflowProvider&gt;&lt;DiffRenderer /&gt;&lt;/OverflowProvider&gt; &gt; should call colorizeCode with null language for new file if no filename is provided" time="0.0765512">
        </testcase>
        <testcase classname="src/ui/components/messages/DiffRenderer.test.tsx" name="&lt;OverflowProvider&gt;&lt;DiffRenderer /&gt;&lt;/OverflowProvider&gt; &gt; should render diff content for existing file (not calling colorizeCode directly for the whole block)" time="0.0057437">
        </testcase>
        <testcase classname="src/ui/components/messages/DiffRenderer.test.tsx" name="&lt;OverflowProvider&gt;&lt;DiffRenderer /&gt;&lt;/OverflowProvider&gt; &gt; should handle diff with only header and no changes" time="0.0587206">
        </testcase>
        <testcase classname="src/ui/components/messages/DiffRenderer.test.tsx" name="&lt;OverflowProvider&gt;&lt;DiffRenderer /&gt;&lt;/OverflowProvider&gt; &gt; should handle empty diff content" time="0.0017084">
        </testcase>
        <testcase classname="src/ui/components/messages/DiffRenderer.test.tsx" name="&lt;OverflowProvider&gt;&lt;DiffRenderer /&gt;&lt;/OverflowProvider&gt; &gt; should render a gap indicator for skipped lines" time="0.0099418">
        </testcase>
        <testcase classname="src/ui/components/messages/DiffRenderer.test.tsx" name="&lt;OverflowProvider&gt;&lt;DiffRenderer /&gt;&lt;/OverflowProvider&gt; &gt; should not render a gap indicator for small gaps (&lt;= MAX_CONTEXT_LINES_WITHOUT_GAP)" time="0.0491211">
        </testcase>
        <testcase classname="src/ui/components/messages/DiffRenderer.test.tsx" name="&lt;OverflowProvider&gt;&lt;DiffRenderer /&gt;&lt;/OverflowProvider&gt; &gt; should correctly render a diff with multiple hunks and a gap indicator &gt; with terminalWidth 80 and height undefined" time="0.3910301">
        </testcase>
        <testcase classname="src/ui/components/messages/DiffRenderer.test.tsx" name="&lt;OverflowProvider&gt;&lt;DiffRenderer /&gt;&lt;/OverflowProvider&gt; &gt; should correctly render a diff with multiple hunks and a gap indicator &gt; with terminalWidth 80 and height 6" time="0.0531615">
        </testcase>
        <testcase classname="src/ui/components/messages/DiffRenderer.test.tsx" name="&lt;OverflowProvider&gt;&lt;DiffRenderer /&gt;&lt;/OverflowProvider&gt; &gt; should correctly render a diff with multiple hunks and a gap indicator &gt; with terminalWidth 30 and height 6" time="0.0513284">
        </testcase>
        <testcase classname="src/ui/components/messages/DiffRenderer.test.tsx" name="&lt;OverflowProvider&gt;&lt;DiffRenderer /&gt;&lt;/OverflowProvider&gt; &gt; should correctly render a diff with a SVN diff format" time="0.0920471">
        </testcase>
        <testcase classname="src/ui/components/messages/DiffRenderer.test.tsx" name="&lt;OverflowProvider&gt;&lt;DiffRenderer /&gt;&lt;/OverflowProvider&gt; &gt; should correctly render a new file with no file extension correctly" time="0.0149437">
        </testcase>
    </testsuite>
    <testsuite name="src/ui/components/messages/ToolConfirmationMessage.test.tsx" timestamp="2025-09-23T13:52:09.728Z" hostname="WIN-33AANMPCPKN" tests="10" failures="0" errors="0" skipped="0" time="0.3271083">
        <testcase classname="src/ui/components/messages/ToolConfirmationMessage.test.tsx" name="ToolConfirmationMessage &gt; should not display urls if prompt and url are the same" time="0.1114993">
        </testcase>
        <testcase classname="src/ui/components/messages/ToolConfirmationMessage.test.tsx" name="ToolConfirmationMessage &gt; should display urls if prompt and url are different" time="0.0170687">
        </testcase>
        <testcase classname="src/ui/components/messages/ToolConfirmationMessage.test.tsx" name="ToolConfirmationMessage &gt; with folder trust &gt; &apos;for edit confirmations&apos; &gt; should show &quot;allow always&quot; when folder is trusted" time="0.0223274">
        </testcase>
        <testcase classname="src/ui/components/messages/ToolConfirmationMessage.test.tsx" name="ToolConfirmationMessage &gt; with folder trust &gt; &apos;for edit confirmations&apos; &gt; should NOT show &quot;allow always&quot; when folder is untrusted" time="0.0082639">
        </testcase>
        <testcase classname="src/ui/components/messages/ToolConfirmationMessage.test.tsx" name="ToolConfirmationMessage &gt; with folder trust &gt; &apos;for exec confirmations&apos; &gt; should show &quot;allow always&quot; when folder is trusted" time="0.0592465">
        </testcase>
        <testcase classname="src/ui/components/messages/ToolConfirmationMessage.test.tsx" name="ToolConfirmationMessage &gt; with folder trust &gt; &apos;for exec confirmations&apos; &gt; should NOT show &quot;allow always&quot; when folder is untrusted" time="0.0102261">
        </testcase>
        <testcase classname="src/ui/components/messages/ToolConfirmationMessage.test.tsx" name="ToolConfirmationMessage &gt; with folder trust &gt; &apos;for info confirmations&apos; &gt; should show &quot;allow always&quot; when folder is trusted" time="0.0220129">
        </testcase>
        <testcase classname="src/ui/components/messages/ToolConfirmationMessage.test.tsx" name="ToolConfirmationMessage &gt; with folder trust &gt; &apos;for info confirmations&apos; &gt; should NOT show &quot;allow always&quot; when folder is untrusted" time="0.0046896">
        </testcase>
        <testcase classname="src/ui/components/messages/ToolConfirmationMessage.test.tsx" name="ToolConfirmationMessage &gt; with folder trust &gt; &apos;for mcp confirmations&apos; &gt; should show &quot;allow always&quot; when folder is trusted" time="0.0408742">
        </testcase>
        <testcase classname="src/ui/components/messages/ToolConfirmationMessage.test.tsx" name="ToolConfirmationMessage &gt; with folder trust &gt; &apos;for mcp confirmations&apos; &gt; should NOT show &quot;allow always&quot; when folder is untrusted" time="0.007994">
        </testcase>
    </testsuite>
    <testsuite name="src/ui/components/messages/ToolGroupMessage.test.tsx" timestamp="2025-09-23T13:52:09.730Z" hostname="WIN-33AANMPCPKN" tests="14" failures="0" errors="0" skipped="0" time="0.3773288">
        <testcase classname="src/ui/components/messages/ToolGroupMessage.test.tsx" name="&lt;ToolGroupMessage /&gt; &gt; Golden Snapshots &gt; renders single successful tool call" time="0.0914263">
        </testcase>
        <testcase classname="src/ui/components/messages/ToolGroupMessage.test.tsx" name="&lt;ToolGroupMessage /&gt; &gt; Golden Snapshots &gt; renders multiple tool calls with different statuses" time="0.0183825">
        </testcase>
        <testcase classname="src/ui/components/messages/ToolGroupMessage.test.tsx" name="&lt;ToolGroupMessage /&gt; &gt; Golden Snapshots &gt; renders tool call awaiting confirmation" time="0.0506899">
        </testcase>
        <testcase classname="src/ui/components/messages/ToolGroupMessage.test.tsx" name="&lt;ToolGroupMessage /&gt; &gt; Golden Snapshots &gt; renders shell command with yellow border" time="0.0061392">
        </testcase>
        <testcase classname="src/ui/components/messages/ToolGroupMessage.test.tsx" name="&lt;ToolGroupMessage /&gt; &gt; Golden Snapshots &gt; renders mixed tool calls including shell command" time="0.0075146">
        </testcase>
        <testcase classname="src/ui/components/messages/ToolGroupMessage.test.tsx" name="&lt;ToolGroupMessage /&gt; &gt; Golden Snapshots &gt; renders with limited terminal height" time="0.0363149">
        </testcase>
        <testcase classname="src/ui/components/messages/ToolGroupMessage.test.tsx" name="&lt;ToolGroupMessage /&gt; &gt; Golden Snapshots &gt; renders when not focused" time="0.027926">
        </testcase>
        <testcase classname="src/ui/components/messages/ToolGroupMessage.test.tsx" name="&lt;ToolGroupMessage /&gt; &gt; Golden Snapshots &gt; renders with narrow terminal width" time="0.0189672">
        </testcase>
        <testcase classname="src/ui/components/messages/ToolGroupMessage.test.tsx" name="&lt;ToolGroupMessage /&gt; &gt; Golden Snapshots &gt; renders empty tool calls array" time="0.0040703">
        </testcase>
        <testcase classname="src/ui/components/messages/ToolGroupMessage.test.tsx" name="&lt;ToolGroupMessage /&gt; &gt; Border Color Logic &gt; uses yellow border when tools are pending" time="0.0047889">
        </testcase>
        <testcase classname="src/ui/components/messages/ToolGroupMessage.test.tsx" name="&lt;ToolGroupMessage /&gt; &gt; Border Color Logic &gt; uses yellow border for shell commands even when successful" time="0.011605">
        </testcase>
        <testcase classname="src/ui/components/messages/ToolGroupMessage.test.tsx" name="&lt;ToolGroupMessage /&gt; &gt; Border Color Logic &gt; uses gray border when all tools are successful and no shell commands" time="0.0257277">
        </testcase>
        <testcase classname="src/ui/components/messages/ToolGroupMessage.test.tsx" name="&lt;ToolGroupMessage /&gt; &gt; Height Calculation &gt; calculates available height correctly with multiple tools with results" time="0.0093955">
        </testcase>
        <testcase classname="src/ui/components/messages/ToolGroupMessage.test.tsx" name="&lt;ToolGroupMessage /&gt; &gt; Confirmation Handling &gt; shows confirmation dialog for first confirming tool only" time="0.0455301">
        </testcase>
    </testsuite>
    <testsuite name="src/ui/components/messages/ToolMessage.test.tsx" timestamp="2025-09-23T13:52:09.731Z" hostname="WIN-33AANMPCPKN" tests="12" failures="0" errors="0" skipped="0" time="0.1946148">
        <testcase classname="src/ui/components/messages/ToolMessage.test.tsx" name="&lt;ToolMessage /&gt; &gt; renders basic tool information" time="0.0777797">
        </testcase>
        <testcase classname="src/ui/components/messages/ToolMessage.test.tsx" name="&lt;ToolMessage /&gt; &gt; ToolStatusIndicator rendering &gt; shows ✓ for Success status" time="0.0057055">
        </testcase>
        <testcase classname="src/ui/components/messages/ToolMessage.test.tsx" name="&lt;ToolMessage /&gt; &gt; ToolStatusIndicator rendering &gt; shows o for Pending status" time="0.005678">
        </testcase>
        <testcase classname="src/ui/components/messages/ToolMessage.test.tsx" name="&lt;ToolMessage /&gt; &gt; ToolStatusIndicator rendering &gt; shows ? for Confirming status" time="0.0062993">
        </testcase>
        <testcase classname="src/ui/components/messages/ToolMessage.test.tsx" name="&lt;ToolMessage /&gt; &gt; ToolStatusIndicator rendering &gt; shows - for Canceled status" time="0.0129095">
        </testcase>
        <testcase classname="src/ui/components/messages/ToolMessage.test.tsx" name="&lt;ToolMessage /&gt; &gt; ToolStatusIndicator rendering &gt; shows x for Error status" time="0.0032937">
        </testcase>
        <testcase classname="src/ui/components/messages/ToolMessage.test.tsx" name="&lt;ToolMessage /&gt; &gt; ToolStatusIndicator rendering &gt; shows paused spinner for Executing status when streamingState is Idle" time="0.0035737">
        </testcase>
        <testcase classname="src/ui/components/messages/ToolMessage.test.tsx" name="&lt;ToolMessage /&gt; &gt; ToolStatusIndicator rendering &gt; shows paused spinner for Executing status when streamingState is WaitingForConfirmation" time="0.0248885">
        </testcase>
        <testcase classname="src/ui/components/messages/ToolMessage.test.tsx" name="&lt;ToolMessage /&gt; &gt; ToolStatusIndicator rendering &gt; shows MockRespondingSpinner for Executing status when streamingState is Responding" time="0.0178861">
        </testcase>
        <testcase classname="src/ui/components/messages/ToolMessage.test.tsx" name="&lt;ToolMessage /&gt; &gt; renders DiffRenderer for diff results" time="0.0047307">
        </testcase>
        <testcase classname="src/ui/components/messages/ToolMessage.test.tsx" name="&lt;ToolMessage /&gt; &gt; renders emphasis correctly" time="0.0242811">
        </testcase>
        <testcase classname="src/ui/components/messages/ToolMessage.test.tsx" name="&lt;ToolMessage /&gt; &gt; renders AnsiOutputText for AnsiOutput results" time="0.0048406">
        </testcase>
    </testsuite>
    <testsuite name="src/ui/components/shared/BaseSelectionList.test.tsx" timestamp="2025-09-23T13:52:09.732Z" hostname="WIN-33AANMPCPKN" tests="1" failures="1" errors="0" skipped="0" time="0">
        <testcase classname="src/ui/components/shared/BaseSelectionList.test.tsx" name="src/ui/components/shared/BaseSelectionList.test.tsx" time="0">
            <failure message="Cannot read properties of undefined (reading &apos;S&apos;)" type="TypeError">
TypeError: Cannot read properties of undefined (reading &apos;S&apos;)
 ❯ ../../node_modules/react-dom/cjs/react-dom-client.development.js:22587:58
 ❯ Object.&lt;anonymous&gt; ../../node_modules/react-dom/cjs/react-dom-client.development.js:24993:5
            </failure>
        </testcase>
    </testsuite>
    <testsuite name="src/ui/components/shared/EnumSelector.test.tsx" timestamp="2025-09-23T13:52:09.733Z" hostname="WIN-33AANMPCPKN" tests="9" failures="0" errors="0" skipped="0" time="0.0780116">
        <testcase classname="src/ui/components/shared/EnumSelector.test.tsx" name="&lt;EnumSelector /&gt; &gt; renders with string options and matches snapshot" time="0.0497969">
        </testcase>
        <testcase classname="src/ui/components/shared/EnumSelector.test.tsx" name="&lt;EnumSelector /&gt; &gt; renders with numeric options and matches snapshot" time="0.0030075">
        </testcase>
        <testcase classname="src/ui/components/shared/EnumSelector.test.tsx" name="&lt;EnumSelector /&gt; &gt; renders inactive state and matches snapshot" time="0.002635">
        </testcase>
        <testcase classname="src/ui/components/shared/EnumSelector.test.tsx" name="&lt;EnumSelector /&gt; &gt; renders with single option and matches snapshot" time="0.0030144">
        </testcase>
        <testcase classname="src/ui/components/shared/EnumSelector.test.tsx" name="&lt;EnumSelector /&gt; &gt; renders nothing when no options are provided" time="0.0015527">
        </testcase>
        <testcase classname="src/ui/components/shared/EnumSelector.test.tsx" name="&lt;EnumSelector /&gt; &gt; handles currentValue not found in options" time="0.0025586">
        </testcase>
        <testcase classname="src/ui/components/shared/EnumSelector.test.tsx" name="&lt;EnumSelector /&gt; &gt; updates when currentValue changes externally" time="0.0071503">
        </testcase>
        <testcase classname="src/ui/components/shared/EnumSelector.test.tsx" name="&lt;EnumSelector /&gt; &gt; shows navigation arrows when multiple options available" time="0.0043622">
        </testcase>
        <testcase classname="src/ui/components/shared/EnumSelector.test.tsx" name="&lt;EnumSelector /&gt; &gt; hides navigation arrows when single option available" time="0.002361">
        </testcase>
    </testsuite>
    <testsuite name="src/ui/components/shared/MaxSizedBox.test.tsx" timestamp="2025-09-23T13:52:09.734Z" hostname="WIN-33AANMPCPKN" tests="21" failures="0" errors="0" skipped="0" time="0.1521901">
        <testcase classname="src/ui/components/shared/MaxSizedBox.test.tsx" name="&lt;MaxSizedBox /&gt; &gt; renders children without truncation when they fit" time="0.0343075">
        </testcase>
        <testcase classname="src/ui/components/shared/MaxSizedBox.test.tsx" name="&lt;MaxSizedBox /&gt; &gt; hides lines when content exceeds maxHeight" time="0.0050498">
        </testcase>
        <testcase classname="src/ui/components/shared/MaxSizedBox.test.tsx" name="&lt;MaxSizedBox /&gt; &gt; hides lines at the end when content exceeds maxHeight and overflowDirection is bottom" time="0.0036725">
        </testcase>
        <testcase classname="src/ui/components/shared/MaxSizedBox.test.tsx" name="&lt;MaxSizedBox /&gt; &gt; wraps text that exceeds maxWidth" time="0.0033419">
        </testcase>
        <testcase classname="src/ui/components/shared/MaxSizedBox.test.tsx" name="&lt;MaxSizedBox /&gt; &gt; handles mixed wrapping and non-wrapping segments" time="0.0171811">
        </testcase>
        <testcase classname="src/ui/components/shared/MaxSizedBox.test.tsx" name="&lt;MaxSizedBox /&gt; &gt; handles words longer than maxWidth by splitting them" time="0.0059917">
        </testcase>
        <testcase classname="src/ui/components/shared/MaxSizedBox.test.tsx" name="&lt;MaxSizedBox /&gt; &gt; does not truncate when maxHeight is undefined" time="0.009848">
        </testcase>
        <testcase classname="src/ui/components/shared/MaxSizedBox.test.tsx" name="&lt;MaxSizedBox /&gt; &gt; shows plural &quot;lines&quot; when more than one line is hidden" time="0.0232248">
        </testcase>
        <testcase classname="src/ui/components/shared/MaxSizedBox.test.tsx" name="&lt;MaxSizedBox /&gt; &gt; shows plural &quot;lines&quot; when more than one line is hidden and overflowDirection is bottom" time="0.0024998">
        </testcase>
        <testcase classname="src/ui/components/shared/MaxSizedBox.test.tsx" name="&lt;MaxSizedBox /&gt; &gt; renders an empty box for empty children" time="0.0008967">
        </testcase>
        <testcase classname="src/ui/components/shared/MaxSizedBox.test.tsx" name="&lt;MaxSizedBox /&gt; &gt; wraps text with multi-byte unicode characters correctly" time="0.0014439">
        </testcase>
        <testcase classname="src/ui/components/shared/MaxSizedBox.test.tsx" name="&lt;MaxSizedBox /&gt; &gt; wraps text with multi-byte emoji characters correctly" time="0.0014505">
        </testcase>
        <testcase classname="src/ui/components/shared/MaxSizedBox.test.tsx" name="&lt;MaxSizedBox /&gt; &gt; falls back to an ellipsis when width is extremely small" time="0.0014039">
        </testcase>
        <testcase classname="src/ui/components/shared/MaxSizedBox.test.tsx" name="&lt;MaxSizedBox /&gt; &gt; truncates long non-wrapping text with ellipsis" time="0.0017311">
        </testcase>
        <testcase classname="src/ui/components/shared/MaxSizedBox.test.tsx" name="&lt;MaxSizedBox /&gt; &gt; truncates non-wrapping text containing line breaks" time="0.0013322">
        </testcase>
        <testcase classname="src/ui/components/shared/MaxSizedBox.test.tsx" name="&lt;MaxSizedBox /&gt; &gt; truncates emoji characters correctly with ellipsis" time="0.0009939">
        </testcase>
        <testcase classname="src/ui/components/shared/MaxSizedBox.test.tsx" name="&lt;MaxSizedBox /&gt; &gt; shows ellipsis for multiple rows with long non-wrapping text" time="0.00231">
        </testcase>
        <testcase classname="src/ui/components/shared/MaxSizedBox.test.tsx" name="&lt;MaxSizedBox /&gt; &gt; accounts for additionalHiddenLinesCount" time="0.0130135">
        </testcase>
        <testcase classname="src/ui/components/shared/MaxSizedBox.test.tsx" name="&lt;MaxSizedBox /&gt; &gt; handles React.Fragment as a child" time="0.0055562">
        </testcase>
        <testcase classname="src/ui/components/shared/MaxSizedBox.test.tsx" name="&lt;MaxSizedBox /&gt; &gt; clips a long single text child from the top" time="0.0084651">
        </testcase>
        <testcase classname="src/ui/components/shared/MaxSizedBox.test.tsx" name="&lt;MaxSizedBox /&gt; &gt; clips a long single text child from the bottom" time="0.0065034">
        </testcase>
    </testsuite>
    <testsuite name="src/ui/components/shared/RadioButtonSelect.test.tsx" timestamp="2025-09-23T13:52:09.736Z" hostname="WIN-33AANMPCPKN" tests="5" failures="0" errors="0" skipped="0" time="0.0255736">
        <testcase classname="src/ui/components/shared/RadioButtonSelect.test.tsx" name="RadioButtonSelect &gt; Prop forwarding to BaseSelectionList &gt; should forward all props correctly when provided" time="0.0211221">
        </testcase>
        <testcase classname="src/ui/components/shared/RadioButtonSelect.test.tsx" name="RadioButtonSelect &gt; Prop forwarding to BaseSelectionList &gt; should use default props if not provided" time="0.0010274">
        </testcase>
        <testcase classname="src/ui/components/shared/RadioButtonSelect.test.tsx" name="RadioButtonSelect &gt; renderItem implementation &gt; should render the standard label display with correct color and truncation" time="0.0009547">
        </testcase>
        <testcase classname="src/ui/components/shared/RadioButtonSelect.test.tsx" name="RadioButtonSelect &gt; renderItem implementation &gt; should render the special theme display when theme props are present" time="0.0006369">
        </testcase>
        <testcase classname="src/ui/components/shared/RadioButtonSelect.test.tsx" name="RadioButtonSelect &gt; renderItem implementation &gt; should fall back to standard display if only one theme prop is present" time="0.0004527">
        </testcase>
    </testsuite>
    <testsuite name="src/ui/components/shared/text-buffer.test.ts" timestamp="2025-09-23T13:52:09.737Z" hostname="WIN-33AANMPCPKN" tests="1" failures="1" errors="0" skipped="0" time="0">
        <testcase classname="src/ui/components/shared/text-buffer.test.ts" name="src/ui/components/shared/text-buffer.test.ts" time="0">
            <failure message="Cannot read properties of undefined (reading &apos;S&apos;)" type="TypeError">
TypeError: Cannot read properties of undefined (reading &apos;S&apos;)
 ❯ ../../node_modules/react-dom/cjs/react-dom-client.development.js:22587:58
 ❯ Object.&lt;anonymous&gt; ../../node_modules/react-dom/cjs/react-dom-client.development.js:24993:5
            </failure>
        </testcase>
    </testsuite>
    <testsuite name="src/ui/components/shared/vim-buffer-actions.test.ts" timestamp="2025-09-23T13:52:09.738Z" hostname="WIN-33AANMPCPKN" tests="74" failures="0" errors="0" skipped="0" time="0.0184552">
        <testcase classname="src/ui/components/shared/vim-buffer-actions.test.ts" name="vim-buffer-actions &gt; Movement commands &gt; vim_move_left &gt; should move cursor left by count" time="0.0023403">
        </testcase>
        <testcase classname="src/ui/components/shared/vim-buffer-actions.test.ts" name="vim-buffer-actions &gt; Movement commands &gt; vim_move_left &gt; should not move past beginning of line" time="0.0002187">
        </testcase>
        <testcase classname="src/ui/components/shared/vim-buffer-actions.test.ts" name="vim-buffer-actions &gt; Movement commands &gt; vim_move_left &gt; should wrap to previous line when at beginning" time="0.0001946">
        </testcase>
        <testcase classname="src/ui/components/shared/vim-buffer-actions.test.ts" name="vim-buffer-actions &gt; Movement commands &gt; vim_move_left &gt; should handle multiple line wrapping" time="0.0001301">
        </testcase>
        <testcase classname="src/ui/components/shared/vim-buffer-actions.test.ts" name="vim-buffer-actions &gt; Movement commands &gt; vim_move_left &gt; should correctly handle h/l movement between lines" time="0.0001981">
        </testcase>
        <testcase classname="src/ui/components/shared/vim-buffer-actions.test.ts" name="vim-buffer-actions &gt; Movement commands &gt; vim_move_right &gt; should move cursor right by count" time="0.0003293">
        </testcase>
        <testcase classname="src/ui/components/shared/vim-buffer-actions.test.ts" name="vim-buffer-actions &gt; Movement commands &gt; vim_move_right &gt; should not move past last character of line" time="0.0001056">
        </testcase>
        <testcase classname="src/ui/components/shared/vim-buffer-actions.test.ts" name="vim-buffer-actions &gt; Movement commands &gt; vim_move_right &gt; should wrap to next line when at end" time="0.0002463">
        </testcase>
        <testcase classname="src/ui/components/shared/vim-buffer-actions.test.ts" name="vim-buffer-actions &gt; Movement commands &gt; vim_move_right &gt; should skip over combining marks to avoid cursor disappearing" time="0.0003249">
        </testcase>
        <testcase classname="src/ui/components/shared/vim-buffer-actions.test.ts" name="vim-buffer-actions &gt; Movement commands &gt; vim_move_up &gt; should move cursor up by count" time="0.0001269">
        </testcase>
        <testcase classname="src/ui/components/shared/vim-buffer-actions.test.ts" name="vim-buffer-actions &gt; Movement commands &gt; vim_move_up &gt; should not move past first line" time="0.0000939">
        </testcase>
        <testcase classname="src/ui/components/shared/vim-buffer-actions.test.ts" name="vim-buffer-actions &gt; Movement commands &gt; vim_move_up &gt; should adjust column for shorter lines" time="0.000109">
        </testcase>
        <testcase classname="src/ui/components/shared/vim-buffer-actions.test.ts" name="vim-buffer-actions &gt; Movement commands &gt; vim_move_down &gt; should move cursor down by count" time="0.0001135">
        </testcase>
        <testcase classname="src/ui/components/shared/vim-buffer-actions.test.ts" name="vim-buffer-actions &gt; Movement commands &gt; vim_move_down &gt; should not move past last line" time="0.0000902">
        </testcase>
        <testcase classname="src/ui/components/shared/vim-buffer-actions.test.ts" name="vim-buffer-actions &gt; Movement commands &gt; vim_move_word_forward &gt; should move to start of next word" time="0.0012324">
        </testcase>
        <testcase classname="src/ui/components/shared/vim-buffer-actions.test.ts" name="vim-buffer-actions &gt; Movement commands &gt; vim_move_word_forward &gt; should handle multiple words" time="0.000122">
        </testcase>
        <testcase classname="src/ui/components/shared/vim-buffer-actions.test.ts" name="vim-buffer-actions &gt; Movement commands &gt; vim_move_word_forward &gt; should handle punctuation correctly" time="0.0001028">
        </testcase>
        <testcase classname="src/ui/components/shared/vim-buffer-actions.test.ts" name="vim-buffer-actions &gt; Movement commands &gt; vim_move_word_forward &gt; should move across empty lines when starting from within a word" time="0.0001224">
        </testcase>
        <testcase classname="src/ui/components/shared/vim-buffer-actions.test.ts" name="vim-buffer-actions &gt; Movement commands &gt; vim_move_word_backward &gt; should move to start of previous word" time="0.0002038">
        </testcase>
        <testcase classname="src/ui/components/shared/vim-buffer-actions.test.ts" name="vim-buffer-actions &gt; Movement commands &gt; vim_move_word_backward &gt; should handle multiple words" time="0.0001051">
        </testcase>
        <testcase classname="src/ui/components/shared/vim-buffer-actions.test.ts" name="vim-buffer-actions &gt; Movement commands &gt; vim_move_word_end &gt; should move to end of current word" time="0.0002549">
        </testcase>
        <testcase classname="src/ui/components/shared/vim-buffer-actions.test.ts" name="vim-buffer-actions &gt; Movement commands &gt; vim_move_word_end &gt; should move to end of next word if already at word end" time="0.0001094">
        </testcase>
        <testcase classname="src/ui/components/shared/vim-buffer-actions.test.ts" name="vim-buffer-actions &gt; Movement commands &gt; vim_move_word_end &gt; should move across empty lines when at word end" time="0.0001242">
        </testcase>
        <testcase classname="src/ui/components/shared/vim-buffer-actions.test.ts" name="vim-buffer-actions &gt; Movement commands &gt; vim_move_word_end &gt; should handle consecutive word-end movements across empty lines" time="0.0002033">
        </testcase>
        <testcase classname="src/ui/components/shared/vim-buffer-actions.test.ts" name="vim-buffer-actions &gt; Movement commands &gt; vim_move_word_end &gt; should handle combining characters - advance from end of base character" time="0.0004807">
        </testcase>
        <testcase classname="src/ui/components/shared/vim-buffer-actions.test.ts" name="vim-buffer-actions &gt; Movement commands &gt; vim_move_word_end &gt; should handle precomposed characters with diacritics" time="0.0001669">
        </testcase>
        <testcase classname="src/ui/components/shared/vim-buffer-actions.test.ts" name="vim-buffer-actions &gt; Movement commands &gt; Position commands &gt; vim_move_to_line_start should move to column 0" time="0.0000966">
        </testcase>
        <testcase classname="src/ui/components/shared/vim-buffer-actions.test.ts" name="vim-buffer-actions &gt; Movement commands &gt; Position commands &gt; vim_move_to_line_end should move to last character" time="0.0000942">
        </testcase>
        <testcase classname="src/ui/components/shared/vim-buffer-actions.test.ts" name="vim-buffer-actions &gt; Movement commands &gt; Position commands &gt; vim_move_to_first_nonwhitespace should skip leading whitespace" time="0.0002213">
        </testcase>
        <testcase classname="src/ui/components/shared/vim-buffer-actions.test.ts" name="vim-buffer-actions &gt; Movement commands &gt; Position commands &gt; vim_move_to_first_line should move to row 0" time="0.0001094">
        </testcase>
        <testcase classname="src/ui/components/shared/vim-buffer-actions.test.ts" name="vim-buffer-actions &gt; Movement commands &gt; Position commands &gt; vim_move_to_last_line should move to last row" time="0.0001092">
        </testcase>
        <testcase classname="src/ui/components/shared/vim-buffer-actions.test.ts" name="vim-buffer-actions &gt; Movement commands &gt; Position commands &gt; vim_move_to_line should move to specific line" time="0.0002043">
        </testcase>
        <testcase classname="src/ui/components/shared/vim-buffer-actions.test.ts" name="vim-buffer-actions &gt; Movement commands &gt; Position commands &gt; vim_move_to_line should clamp to valid range" time="0.0000869">
        </testcase>
        <testcase classname="src/ui/components/shared/vim-buffer-actions.test.ts" name="vim-buffer-actions &gt; Edit commands &gt; vim_delete_char &gt; should delete single character" time="0.0003988">
        </testcase>
        <testcase classname="src/ui/components/shared/vim-buffer-actions.test.ts" name="vim-buffer-actions &gt; Edit commands &gt; vim_delete_char &gt; should delete multiple characters" time="0.0001318">
        </testcase>
        <testcase classname="src/ui/components/shared/vim-buffer-actions.test.ts" name="vim-buffer-actions &gt; Edit commands &gt; vim_delete_char &gt; should not delete past end of line" time="0.0001194">
        </testcase>
        <testcase classname="src/ui/components/shared/vim-buffer-actions.test.ts" name="vim-buffer-actions &gt; Edit commands &gt; vim_delete_char &gt; should do nothing at end of line" time="0.0001078">
        </testcase>
        <testcase classname="src/ui/components/shared/vim-buffer-actions.test.ts" name="vim-buffer-actions &gt; Edit commands &gt; vim_delete_word_forward &gt; should delete from cursor to next word start" time="0.0001343">
        </testcase>
        <testcase classname="src/ui/components/shared/vim-buffer-actions.test.ts" name="vim-buffer-actions &gt; Edit commands &gt; vim_delete_word_forward &gt; should delete multiple words" time="0.0001325">
        </testcase>
        <testcase classname="src/ui/components/shared/vim-buffer-actions.test.ts" name="vim-buffer-actions &gt; Edit commands &gt; vim_delete_word_forward &gt; should delete to end if no more words" time="0.0001405">
        </testcase>
        <testcase classname="src/ui/components/shared/vim-buffer-actions.test.ts" name="vim-buffer-actions &gt; Edit commands &gt; vim_delete_word_backward &gt; should delete from cursor to previous word start" time="0.00013">
        </testcase>
        <testcase classname="src/ui/components/shared/vim-buffer-actions.test.ts" name="vim-buffer-actions &gt; Edit commands &gt; vim_delete_word_backward &gt; should delete multiple words backward" time="0.0001292">
        </testcase>
        <testcase classname="src/ui/components/shared/vim-buffer-actions.test.ts" name="vim-buffer-actions &gt; Edit commands &gt; vim_delete_line &gt; should delete current line" time="0.0007204">
        </testcase>
        <testcase classname="src/ui/components/shared/vim-buffer-actions.test.ts" name="vim-buffer-actions &gt; Edit commands &gt; vim_delete_line &gt; should delete multiple lines" time="0.0001578">
        </testcase>
        <testcase classname="src/ui/components/shared/vim-buffer-actions.test.ts" name="vim-buffer-actions &gt; Edit commands &gt; vim_delete_line &gt; should leave empty line when deleting all lines" time="0.0001424">
        </testcase>
        <testcase classname="src/ui/components/shared/vim-buffer-actions.test.ts" name="vim-buffer-actions &gt; Edit commands &gt; vim_delete_to_end_of_line &gt; should delete from cursor to end of line" time="0.0001362">
        </testcase>
        <testcase classname="src/ui/components/shared/vim-buffer-actions.test.ts" name="vim-buffer-actions &gt; Edit commands &gt; vim_delete_to_end_of_line &gt; should do nothing at end of line" time="0.000093">
        </testcase>
        <testcase classname="src/ui/components/shared/vim-buffer-actions.test.ts" name="vim-buffer-actions &gt; Insert mode commands &gt; vim_insert_at_cursor &gt; should not change cursor position" time="0.000109">
        </testcase>
        <testcase classname="src/ui/components/shared/vim-buffer-actions.test.ts" name="vim-buffer-actions &gt; Insert mode commands &gt; vim_append_at_cursor &gt; should move cursor right by one" time="0.0000924">
        </testcase>
        <testcase classname="src/ui/components/shared/vim-buffer-actions.test.ts" name="vim-buffer-actions &gt; Insert mode commands &gt; vim_append_at_cursor &gt; should not move past end of line" time="0.0001193">
        </testcase>
        <testcase classname="src/ui/components/shared/vim-buffer-actions.test.ts" name="vim-buffer-actions &gt; Insert mode commands &gt; vim_append_at_line_end &gt; should move cursor to end of line" time="0.0000937">
        </testcase>
        <testcase classname="src/ui/components/shared/vim-buffer-actions.test.ts" name="vim-buffer-actions &gt; Insert mode commands &gt; vim_insert_at_line_start &gt; should move to first non-whitespace character" time="0.0001998">
        </testcase>
        <testcase classname="src/ui/components/shared/vim-buffer-actions.test.ts" name="vim-buffer-actions &gt; Insert mode commands &gt; vim_insert_at_line_start &gt; should move to column 0 for line with only whitespace" time="0.0000919">
        </testcase>
        <testcase classname="src/ui/components/shared/vim-buffer-actions.test.ts" name="vim-buffer-actions &gt; Insert mode commands &gt; vim_open_line_below &gt; should insert a new line below the current one" time="0.0001673">
        </testcase>
        <testcase classname="src/ui/components/shared/vim-buffer-actions.test.ts" name="vim-buffer-actions &gt; Insert mode commands &gt; vim_open_line_above &gt; should insert a new line above the current one" time="0.0001715">
        </testcase>
        <testcase classname="src/ui/components/shared/vim-buffer-actions.test.ts" name="vim-buffer-actions &gt; Insert mode commands &gt; vim_escape_insert_mode &gt; should move cursor left" time="0.000096">
        </testcase>
        <testcase classname="src/ui/components/shared/vim-buffer-actions.test.ts" name="vim-buffer-actions &gt; Insert mode commands &gt; vim_escape_insert_mode &gt; should not move past beginning of line" time="0.0001021">
        </testcase>
        <testcase classname="src/ui/components/shared/vim-buffer-actions.test.ts" name="vim-buffer-actions &gt; Change commands &gt; vim_change_word_forward &gt; should delete from cursor to next word start" time="0.0001731">
        </testcase>
        <testcase classname="src/ui/components/shared/vim-buffer-actions.test.ts" name="vim-buffer-actions &gt; Change commands &gt; vim_change_line &gt; should delete entire line content" time="0.0002445">
        </testcase>
        <testcase classname="src/ui/components/shared/vim-buffer-actions.test.ts" name="vim-buffer-actions &gt; Change commands &gt; vim_change_movement &gt; should change characters to the left" time="0.000128">
        </testcase>
        <testcase classname="src/ui/components/shared/vim-buffer-actions.test.ts" name="vim-buffer-actions &gt; Change commands &gt; vim_change_movement &gt; should change characters to the right" time="0.0001178">
        </testcase>
        <testcase classname="src/ui/components/shared/vim-buffer-actions.test.ts" name="vim-buffer-actions &gt; Change commands &gt; vim_change_movement &gt; should change multiple lines down" time="0.0001497">
        </testcase>
        <testcase classname="src/ui/components/shared/vim-buffer-actions.test.ts" name="vim-buffer-actions &gt; Edge cases &gt; should handle empty text" time="0.0001066">
        </testcase>
        <testcase classname="src/ui/components/shared/vim-buffer-actions.test.ts" name="vim-buffer-actions &gt; Edge cases &gt; should handle single character line" time="0.0000845">
        </testcase>
        <testcase classname="src/ui/components/shared/vim-buffer-actions.test.ts" name="vim-buffer-actions &gt; Edge cases &gt; should handle empty lines in multi-line text" time="0.0001043">
        </testcase>
        <testcase classname="src/ui/components/shared/vim-buffer-actions.test.ts" name="vim-buffer-actions &gt; Edge cases &gt; should preserve undo stack in operations" time="0.0008072">
        </testcase>
        <testcase classname="src/ui/components/shared/vim-buffer-actions.test.ts" name="vim-buffer-actions &gt; UTF-32 character handling in word/line operations &gt; Right-to-left text handling &gt; should handle Arabic text in word movements" time="0.000558">
        </testcase>
        <testcase classname="src/ui/components/shared/vim-buffer-actions.test.ts" name="vim-buffer-actions &gt; UTF-32 character handling in word/line operations &gt; Chinese character handling &gt; should handle Chinese characters in word movements" time="0.0001478">
        </testcase>
        <testcase classname="src/ui/components/shared/vim-buffer-actions.test.ts" name="vim-buffer-actions &gt; UTF-32 character handling in word/line operations &gt; Mixed script handling &gt; should handle mixed Latin and non-Latin scripts with word end commands" time="0.0001541">
        </testcase>
        <testcase classname="src/ui/components/shared/vim-buffer-actions.test.ts" name="vim-buffer-actions &gt; UTF-32 character handling in word/line operations &gt; Mixed script handling &gt; should handle mixed Latin and non-Latin scripts with word forward commands" time="0.000132">
        </testcase>
        <testcase classname="src/ui/components/shared/vim-buffer-actions.test.ts" name="vim-buffer-actions &gt; UTF-32 character handling in word/line operations &gt; Mixed script handling &gt; should handle mixed Latin and non-Latin scripts with word backward commands" time="0.0001315">
        </testcase>
        <testcase classname="src/ui/components/shared/vim-buffer-actions.test.ts" name="vim-buffer-actions &gt; UTF-32 character handling in word/line operations &gt; Mixed script handling &gt; should handle Unicode block characters consistently with w and e commands" time="0.000257">
        </testcase>
        <testcase classname="src/ui/components/shared/vim-buffer-actions.test.ts" name="vim-buffer-actions &gt; UTF-32 character handling in word/line operations &gt; Mixed script handling &gt; should handle strings starting with Chinese characters" time="0.0001851">
        </testcase>
        <testcase classname="src/ui/components/shared/vim-buffer-actions.test.ts" name="vim-buffer-actions &gt; UTF-32 character handling in word/line operations &gt; Mixed script handling &gt; should handle strings starting with Arabic characters" time="0.0001834">
        </testcase>
    </testsuite>
    <testsuite name="src/ui/components/views/ExtensionsList.test.tsx" timestamp="2025-09-23T13:52:09.745Z" hostname="WIN-33AANMPCPKN" tests="9" failures="0" errors="0" skipped="0" time="0.1483565">
        <testcase classname="src/ui/components/views/ExtensionsList.test.tsx" name="&lt;ExtensionsList /&gt; &gt; should render &quot;No extensions installed.&quot; if there are no extensions" time="0.0543531">
        </testcase>
        <testcase classname="src/ui/components/views/ExtensionsList.test.tsx" name="&lt;ExtensionsList /&gt; &gt; should render a list of extensions with their version and status" time="0.0538652">
            <system-err>
Unhandled ExtensionUpdateState undefined
Unhandled ExtensionUpdateState undefined
Unhandled ExtensionUpdateState undefined

            </system-err>
        </testcase>
        <testcase classname="src/ui/components/views/ExtensionsList.test.tsx" name="&lt;ExtensionsList /&gt; &gt; should display &quot;unknown state&quot; if an extension has no update state" time="0.008574">
            <system-err>
Unhandled ExtensionUpdateState undefined

            </system-err>
        </testcase>
        <testcase classname="src/ui/components/views/ExtensionsList.test.tsx" name="&lt;ExtensionsList /&gt; &gt; should correctly display the state: checking for updates" time="0.0054094">
        </testcase>
        <testcase classname="src/ui/components/views/ExtensionsList.test.tsx" name="&lt;ExtensionsList /&gt; &gt; should correctly display the state: updating" time="0.0040338">
        </testcase>
        <testcase classname="src/ui/components/views/ExtensionsList.test.tsx" name="&lt;ExtensionsList /&gt; &gt; should correctly display the state: update available" time="0.0059362">
        </testcase>
        <testcase classname="src/ui/components/views/ExtensionsList.test.tsx" name="&lt;ExtensionsList /&gt; &gt; should correctly display the state: updated, needs restart" time="0.0043685">
        </testcase>
        <testcase classname="src/ui/components/views/ExtensionsList.test.tsx" name="&lt;ExtensionsList /&gt; &gt; should correctly display the state: error checking for updates" time="0.0037286">
        </testcase>
        <testcase classname="src/ui/components/views/ExtensionsList.test.tsx" name="&lt;ExtensionsList /&gt; &gt; should correctly display the state: up to date" time="0.0061526">
        </testcase>
    </testsuite>
</testsuites>
