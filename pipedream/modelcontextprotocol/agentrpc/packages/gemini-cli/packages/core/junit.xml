<?xml version="1.0" encoding="UTF-8" ?>
<testsuites name="vitest tests" tests="2328" failures="0" errors="0" time="32.7885602">
    <testsuite name="src/index.test.ts" timestamp="2025-09-23T13:26:51.993Z" hostname="WIN-33AANMPCPKN" tests="1" failures="0" errors="0" skipped="0" time="0.0027296">
        <testcase classname="src/index.test.ts" name="placeholder tests &gt; should pass" time="0.0013408">
        </testcase>
    </testsuite>
    <testsuite name="src/config/config.test.ts" timestamp="2025-09-23T13:26:51.995Z" hostname="WIN-33AANMPCPKN" tests="60" failures="0" errors="0" skipped="0" time="0.0661844">
        <testcase classname="src/config/config.test.ts" name="Server Config (config.ts) &gt; initialize &gt; should throw an error if checkpointing is enabled and GitService fails" time="0.0056932">
        </testcase>
        <testcase classname="src/config/config.test.ts" name="Server Config (config.ts) &gt; initialize &gt; should not throw an error if checkpointing is disabled and GitService fails" time="0.0047218">
        </testcase>
        <testcase classname="src/config/config.test.ts" name="Server Config (config.ts) &gt; initialize &gt; should throw an error if initialized more than once" time="0.0034778">
        </testcase>
        <testcase classname="src/config/config.test.ts" name="Server Config (config.ts) &gt; refreshAuth &gt; should refresh auth and update config" time="0.0031819">
        </testcase>
        <testcase classname="src/config/config.test.ts" name="Server Config (config.ts) &gt; refreshAuth &gt; should strip thoughts when switching from GenAI to Vertex" time="0.0009699">
        </testcase>
        <testcase classname="src/config/config.test.ts" name="Server Config (config.ts) &gt; refreshAuth &gt; should not strip thoughts when switching from Vertex to GenAI" time="0.0007978">
        </testcase>
        <testcase classname="src/config/config.test.ts" name="Server Config (config.ts) &gt; Config constructor should store userMemory correctly" time="0.0004499">
        </testcase>
        <testcase classname="src/config/config.test.ts" name="Server Config (config.ts) &gt; Config constructor should default userMemory to empty string if not provided" time="0.0003829">
        </testcase>
        <testcase classname="src/config/config.test.ts" name="Server Config (config.ts) &gt; Config constructor should call setGeminiMdFilename with contextFileName if provided" time="0.000515">
        </testcase>
        <testcase classname="src/config/config.test.ts" name="Server Config (config.ts) &gt; Config constructor should not call setGeminiMdFilename if contextFileName is not provided" time="0.0005696">
        </testcase>
        <testcase classname="src/config/config.test.ts" name="Server Config (config.ts) &gt; should set default file filtering settings when not provided" time="0.0003131">
        </testcase>
        <testcase classname="src/config/config.test.ts" name="Server Config (config.ts) &gt; should set custom file filtering settings when provided" time="0.000408">
        </testcase>
        <testcase classname="src/config/config.test.ts" name="Server Config (config.ts) &gt; should initialize WorkspaceContext with includeDirectories" time="0.0012631">
        </testcase>
        <testcase classname="src/config/config.test.ts" name="Server Config (config.ts) &gt; Config constructor should set telemetry to true when provided as true" time="0.0004023">
        </testcase>
        <testcase classname="src/config/config.test.ts" name="Server Config (config.ts) &gt; Config constructor should set telemetry to false when provided as false" time="0.0005237">
        </testcase>
        <testcase classname="src/config/config.test.ts" name="Server Config (config.ts) &gt; Config constructor should default telemetry to default value if not provided" time="0.000456">
        </testcase>
        <testcase classname="src/config/config.test.ts" name="Server Config (config.ts) &gt; Config constructor should set telemetry useCollector to true when provided" time="0.0005338">
        </testcase>
        <testcase classname="src/config/config.test.ts" name="Server Config (config.ts) &gt; Config constructor should set telemetry useCollector to false when provided" time="0.0004405">
        </testcase>
        <testcase classname="src/config/config.test.ts" name="Server Config (config.ts) &gt; Config constructor should default telemetry useCollector to false if not provided" time="0.000324">
        </testcase>
        <testcase classname="src/config/config.test.ts" name="Server Config (config.ts) &gt; should have a getFileService method that returns FileDiscoveryService" time="0.0004919">
        </testcase>
        <testcase classname="src/config/config.test.ts" name="Server Config (config.ts) &gt; Usage Statistics &gt; defaults usage statistics to enabled if not specified" time="0.0003227">
        </testcase>
        <testcase classname="src/config/config.test.ts" name="Server Config (config.ts) &gt; Usage Statistics &gt; sets usage statistics based on the provided value (enabled: true)" time="0.0003111">
        </testcase>
        <testcase classname="src/config/config.test.ts" name="Server Config (config.ts) &gt; Usage Statistics &gt; sets usage statistics based on the provided value (enabled: false)" time="0.0002641">
        </testcase>
        <testcase classname="src/config/config.test.ts" name="Server Config (config.ts) &gt; Usage Statistics &gt; logs the session start event" time="0.0008671">
        </testcase>
        <testcase classname="src/config/config.test.ts" name="Server Config (config.ts) &gt; Telemetry Settings &gt; should return default telemetry target if not provided" time="0.0004116">
        </testcase>
        <testcase classname="src/config/config.test.ts" name="Server Config (config.ts) &gt; Telemetry Settings &gt; should return provided OTLP endpoint" time="0.0003397">
        </testcase>
        <testcase classname="src/config/config.test.ts" name="Server Config (config.ts) &gt; Telemetry Settings &gt; should return default OTLP endpoint if not provided" time="0.0005438">
        </testcase>
        <testcase classname="src/config/config.test.ts" name="Server Config (config.ts) &gt; Telemetry Settings &gt; should return provided logPrompts setting" time="0.0004263">
        </testcase>
        <testcase classname="src/config/config.test.ts" name="Server Config (config.ts) &gt; Telemetry Settings &gt; should return default logPrompts setting (true) if not provided" time="0.0003863">
        </testcase>
        <testcase classname="src/config/config.test.ts" name="Server Config (config.ts) &gt; Telemetry Settings &gt; should return default logPrompts setting (true) if telemetry object is not provided" time="0.0004077">
        </testcase>
        <testcase classname="src/config/config.test.ts" name="Server Config (config.ts) &gt; Telemetry Settings &gt; should return default telemetry target if telemetry object is not provided" time="0.0003589">
        </testcase>
        <testcase classname="src/config/config.test.ts" name="Server Config (config.ts) &gt; Telemetry Settings &gt; should return default OTLP endpoint if telemetry object is not provided" time="0.0003113">
        </testcase>
        <testcase classname="src/config/config.test.ts" name="Server Config (config.ts) &gt; Telemetry Settings &gt; should return provided OTLP protocol" time="0.0003205">
        </testcase>
        <testcase classname="src/config/config.test.ts" name="Server Config (config.ts) &gt; Telemetry Settings &gt; should return default OTLP protocol if not provided" time="0.0002913">
        </testcase>
        <testcase classname="src/config/config.test.ts" name="Server Config (config.ts) &gt; Telemetry Settings &gt; should return default OTLP protocol if telemetry object is not provided" time="0.0003077">
        </testcase>
        <testcase classname="src/config/config.test.ts" name="Server Config (config.ts) &gt; UseRipgrep Configuration &gt; should default useRipgrep to true when not provided" time="0.0003032">
        </testcase>
        <testcase classname="src/config/config.test.ts" name="Server Config (config.ts) &gt; UseRipgrep Configuration &gt; should set useRipgrep to false when provided as false" time="0.0015255">
        </testcase>
        <testcase classname="src/config/config.test.ts" name="Server Config (config.ts) &gt; UseRipgrep Configuration &gt; should set useRipgrep to true when explicitly provided as true" time="0.000398">
        </testcase>
        <testcase classname="src/config/config.test.ts" name="Server Config (config.ts) &gt; UseRipgrep Configuration &gt; should default useRipgrep to true when undefined" time="0.0003717">
        </testcase>
        <testcase classname="src/config/config.test.ts" name="Server Config (config.ts) &gt; UseModelRouter Configuration &gt; should default useModelRouter to false when not provided" time="0.0003523">
        </testcase>
        <testcase classname="src/config/config.test.ts" name="Server Config (config.ts) &gt; UseModelRouter Configuration &gt; should set useModelRouter to true when provided as true" time="0.0003506">
        </testcase>
        <testcase classname="src/config/config.test.ts" name="Server Config (config.ts) &gt; UseModelRouter Configuration &gt; should set useModelRouter to false when explicitly provided as false" time="0.0003088">
        </testcase>
        <testcase classname="src/config/config.test.ts" name="Server Config (config.ts) &gt; createToolRegistry &gt; should register a tool if coreTools contains an argument-specific pattern" time="0.002516">
        </testcase>
        <testcase classname="src/config/config.test.ts" name="Server Config (config.ts) &gt; createToolRegistry &gt; with minified tool class names &gt; should register a tool if coreTools contains the non-minified class name" time="0.0024057">
        </testcase>
        <testcase classname="src/config/config.test.ts" name="Server Config (config.ts) &gt; createToolRegistry &gt; with minified tool class names &gt; should not register a tool if excludeTools contains the non-minified class name" time="0.0035831">
        </testcase>
        <testcase classname="src/config/config.test.ts" name="Server Config (config.ts) &gt; createToolRegistry &gt; with minified tool class names &gt; should register a tool if coreTools contains an argument-specific pattern with the non-minified class name" time="0.0020165">
        </testcase>
        <testcase classname="src/config/config.test.ts" name="Server Config (config.ts) &gt; getTruncateToolOutputThreshold &gt; should return the calculated threshold when it is smaller than the default" time="0.0008252">
        </testcase>
        <testcase classname="src/config/config.test.ts" name="Server Config (config.ts) &gt; getTruncateToolOutputThreshold &gt; should return the default threshold when the calculated value is larger" time="0.0005312">
        </testcase>
        <testcase classname="src/config/config.test.ts" name="Server Config (config.ts) &gt; getTruncateToolOutputThreshold &gt; should use a custom truncateToolOutputThreshold if provided" time="0.0005405">
        </testcase>
        <testcase classname="src/config/config.test.ts" name="setApprovalMode with folder trust &gt; should throw an error when setting YOLO mode in an untrusted folder" time="0.000511">
        </testcase>
        <testcase classname="src/config/config.test.ts" name="setApprovalMode with folder trust &gt; should throw an error when setting AUTO_EDIT mode in an untrusted folder" time="0.0009497">
        </testcase>
        <testcase classname="src/config/config.test.ts" name="setApprovalMode with folder trust &gt; should NOT throw an error when setting DEFAULT mode in an untrusted folder" time="0.0004227">
        </testcase>
        <testcase classname="src/config/config.test.ts" name="setApprovalMode with folder trust &gt; should NOT throw an error when setting any mode in a trusted folder" time="0.0004466">
        </testcase>
        <testcase classname="src/config/config.test.ts" name="setApprovalMode with folder trust &gt; should NOT throw an error when setting any mode if trustedFolder is undefined" time="0.0004121">
        </testcase>
        <testcase classname="src/config/config.test.ts" name="setApprovalMode with folder trust &gt; registerCoreTools &gt; should register RipGrepTool when useRipgrep is true and it is available" time="0.0021345">
        </testcase>
        <testcase classname="src/config/config.test.ts" name="setApprovalMode with folder trust &gt; registerCoreTools &gt; should register GrepTool as a fallback when useRipgrep is true but it is not available" time="0.0037346">
        </testcase>
        <testcase classname="src/config/config.test.ts" name="setApprovalMode with folder trust &gt; registerCoreTools &gt; should register GrepTool as a fallback when canUseRipgrep throws an error" time="0.0028143">
        </testcase>
        <testcase classname="src/config/config.test.ts" name="setApprovalMode with folder trust &gt; registerCoreTools &gt; should register GrepTool when useRipgrep is false" time="0.0030326">
        </testcase>
        <testcase classname="src/config/config.test.ts" name="BaseLlmClient Lifecycle &gt; should throw an error if getBaseLlmClient is called before refreshAuth" time="0.0005364">
        </testcase>
        <testcase classname="src/config/config.test.ts" name="BaseLlmClient Lifecycle &gt; should successfully initialize BaseLlmClient after refreshAuth is called" time="0.0006115">
        </testcase>
    </testsuite>
    <testsuite name="src/config/flashFallback.test.ts" timestamp="2025-09-23T13:26:52.006Z" hostname="WIN-33AANMPCPKN" tests="6" failures="0" errors="0" skipped="0" time="0.0047933">
        <testcase classname="src/config/flashFallback.test.ts" name="Flash Model Fallback Configuration &gt; setModel &gt; should only mark as switched if contentGeneratorConfig exists" time="0.0027485">
        </testcase>
        <testcase classname="src/config/flashFallback.test.ts" name="Flash Model Fallback Configuration &gt; getModel &gt; should return contentGeneratorConfig model if available" time="0.0001673">
        </testcase>
        <testcase classname="src/config/flashFallback.test.ts" name="Flash Model Fallback Configuration &gt; getModel &gt; should fall back to initial model if contentGeneratorConfig is not available" time="0.0001365">
        </testcase>
        <testcase classname="src/config/flashFallback.test.ts" name="Flash Model Fallback Configuration &gt; isInFallbackMode &gt; should start as false for new session" time="0.0001017">
        </testcase>
        <testcase classname="src/config/flashFallback.test.ts" name="Flash Model Fallback Configuration &gt; isInFallbackMode &gt; should remain false if no model switch occurs" time="0.000098">
        </testcase>
        <testcase classname="src/config/flashFallback.test.ts" name="Flash Model Fallback Configuration &gt; isInFallbackMode &gt; should persist switched state throughout session" time="0.0001294">
        </testcase>
    </testsuite>
    <testsuite name="src/config/models.test.ts" timestamp="2025-09-23T13:26:52.008Z" hostname="WIN-33AANMPCPKN" tests="9" failures="0" errors="0" skipped="0" time="0.0034426">
        <testcase classname="src/config/models.test.ts" name="getEffectiveModel &gt; When NOT in fallback mode &gt; should return the Pro model when Pro is requested" time="0.0012758">
        </testcase>
        <testcase classname="src/config/models.test.ts" name="getEffectiveModel &gt; When NOT in fallback mode &gt; should return the Flash model when Flash is requested" time="0.0002955">
        </testcase>
        <testcase classname="src/config/models.test.ts" name="getEffectiveModel &gt; When NOT in fallback mode &gt; should return the Lite model when Lite is requested" time="0.0001079">
        </testcase>
        <testcase classname="src/config/models.test.ts" name="getEffectiveModel &gt; When NOT in fallback mode &gt; should return a custom model name when requested" time="0.000073">
        </testcase>
        <testcase classname="src/config/models.test.ts" name="getEffectiveModel &gt; When IN fallback mode &gt; should downgrade the Pro model to the Flash model" time="0.0000776">
        </testcase>
        <testcase classname="src/config/models.test.ts" name="getEffectiveModel &gt; When IN fallback mode &gt; should return the Flash model when Flash is requested" time="0.0000648">
        </testcase>
        <testcase classname="src/config/models.test.ts" name="getEffectiveModel &gt; When IN fallback mode &gt; should HONOR the Lite model when Lite is requested" time="0.0000629">
        </testcase>
        <testcase classname="src/config/models.test.ts" name="getEffectiveModel &gt; When IN fallback mode &gt; should HONOR any model with &quot;lite&quot; in its name" time="0.0000604">
        </testcase>
        <testcase classname="src/config/models.test.ts" name="getEffectiveModel &gt; When IN fallback mode &gt; should downgrade any other custom model to the Flash model" time="0.0000651">
        </testcase>
    </testsuite>
    <testsuite name="src/config/storage.test.ts" timestamp="2025-09-23T13:26:52.009Z" hostname="WIN-33AANMPCPKN" tests="6" failures="0" errors="0" skipped="0" time="0.0042376">
        <testcase classname="src/config/storage.test.ts" name="Storage – getGlobalSettingsPath &gt; returns path to ~/.gemini/settings.json" time="0.0019071">
        </testcase>
        <testcase classname="src/config/storage.test.ts" name="Storage – additional helpers &gt; getWorkspaceSettingsPath returns project/.gemini/settings.json" time="0.0002005">
        </testcase>
        <testcase classname="src/config/storage.test.ts" name="Storage – additional helpers &gt; getUserCommandsDir returns ~/.gemini/commands" time="0.0001365">
        </testcase>
        <testcase classname="src/config/storage.test.ts" name="Storage – additional helpers &gt; getProjectCommandsDir returns project/.gemini/commands" time="0.0001094">
        </testcase>
        <testcase classname="src/config/storage.test.ts" name="Storage – additional helpers &gt; getMcpOAuthTokensPath returns ~/.gemini/mcp-oauth-tokens.json" time="0.0001097">
        </testcase>
        <testcase classname="src/config/storage.test.ts" name="Storage – additional helpers &gt; getGlobalBinDir returns ~/.gemini/tmp/bin" time="0.0001201">
        </testcase>
    </testsuite>
    <testsuite name="src/code_assist/converter.test.ts" timestamp="2025-09-23T13:26:52.011Z" hostname="WIN-33AANMPCPKN" tests="22" failures="0" errors="0" skipped="0" time="0.0063543">
        <testcase classname="src/code_assist/converter.test.ts" name="converter &gt; toCodeAssistRequest &gt; should convert a simple request with project" time="0.0021304">
        </testcase>
        <testcase classname="src/code_assist/converter.test.ts" name="converter &gt; toCodeAssistRequest &gt; should convert a request without a project" time="0.0002042">
        </testcase>
        <testcase classname="src/code_assist/converter.test.ts" name="converter &gt; toCodeAssistRequest &gt; should convert a request with sessionId" time="0.0001565">
        </testcase>
        <testcase classname="src/code_assist/converter.test.ts" name="converter &gt; toCodeAssistRequest &gt; should handle string content" time="0.0001092">
        </testcase>
        <testcase classname="src/code_assist/converter.test.ts" name="converter &gt; toCodeAssistRequest &gt; should handle Part[] content" time="0.0001259">
        </testcase>
        <testcase classname="src/code_assist/converter.test.ts" name="converter &gt; toCodeAssistRequest &gt; should handle system instructions" time="0.0001366">
        </testcase>
        <testcase classname="src/code_assist/converter.test.ts" name="converter &gt; toCodeAssistRequest &gt; should handle generation config" time="0.0001225">
        </testcase>
        <testcase classname="src/code_assist/converter.test.ts" name="converter &gt; toCodeAssistRequest &gt; should handle all generation config fields" time="0.0001616">
        </testcase>
        <testcase classname="src/code_assist/converter.test.ts" name="converter &gt; fromCodeAssistResponse &gt; should convert a simple response" time="0.0002609">
        </testcase>
        <testcase classname="src/code_assist/converter.test.ts" name="converter &gt; fromCodeAssistResponse &gt; should handle prompt feedback and usage metadata" time="0.0001315">
        </testcase>
        <testcase classname="src/code_assist/converter.test.ts" name="converter &gt; fromCodeAssistResponse &gt; should handle automatic function calling history" time="0.0000923">
        </testcase>
        <testcase classname="src/code_assist/converter.test.ts" name="converter &gt; fromCodeAssistResponse &gt; should handle modelVersion" time="0.0000759">
        </testcase>
        <testcase classname="src/code_assist/converter.test.ts" name="converter &gt; toContents &gt; should handle Content" time="0.0001089">
        </testcase>
        <testcase classname="src/code_assist/converter.test.ts" name="converter &gt; toContents &gt; should handle array of Contents" time="0.0001115">
        </testcase>
        <testcase classname="src/code_assist/converter.test.ts" name="converter &gt; toContents &gt; should handle Part" time="0.0000909">
        </testcase>
        <testcase classname="src/code_assist/converter.test.ts" name="converter &gt; toContents &gt; should handle array of Parts" time="0.0001122">
        </testcase>
        <testcase classname="src/code_assist/converter.test.ts" name="converter &gt; toContents &gt; should handle string" time="0.0001074">
        </testcase>
        <testcase classname="src/code_assist/converter.test.ts" name="converter &gt; toContents &gt; should handle array of strings" time="0.000107">
        </testcase>
        <testcase classname="src/code_assist/converter.test.ts" name="converter &gt; toContents &gt; should convert thought parts to text parts for API compatibility" time="0.0001472">
        </testcase>
        <testcase classname="src/code_assist/converter.test.ts" name="converter &gt; toContents &gt; should combine text and thought for text parts with thoughts" time="0.0001093">
        </testcase>
        <testcase classname="src/code_assist/converter.test.ts" name="converter &gt; toContents &gt; should preserve non-thought properties while removing thought" time="0.0001134">
        </testcase>
        <testcase classname="src/code_assist/converter.test.ts" name="converter &gt; toContents &gt; should convert invalid text content to valid text part with thought" time="0.0000948">
        </testcase>
    </testsuite>
    <testsuite name="src/code_assist/oauth-credential-storage.test.ts" timestamp="2025-09-23T13:26:52.014Z" hostname="WIN-33AANMPCPKN" tests="12" failures="0" errors="0" skipped="0" time="0.0245854">
        <testcase classname="src/code_assist/oauth-credential-storage.test.ts" name="OAuthCredentialStorage &gt; loadCredentials &gt; should load credentials from HybridTokenStorage if available" time="0.0031699">
        </testcase>
        <testcase classname="src/code_assist/oauth-credential-storage.test.ts" name="OAuthCredentialStorage &gt; loadCredentials &gt; should fallback to migrateFromFileStorage if no credentials in HybridTokenStorage" time="0.0013672">
        </testcase>
        <testcase classname="src/code_assist/oauth-credential-storage.test.ts" name="OAuthCredentialStorage &gt; loadCredentials &gt; should return null if no credentials found and no old file to migrate" time="0.000421">
        </testcase>
        <testcase classname="src/code_assist/oauth-credential-storage.test.ts" name="OAuthCredentialStorage &gt; loadCredentials &gt; should throw an error if loading fails" time="0.011767">
            <system-err>
Error: Loading error
    at [90mE:\claude-code\pipedream\modelcontextprotocol\agentrpc\gemini-cli\packages\core\[39msrc\code_assist\oauth-credential-storage.test.ts:123:9
    at file:///E:/claude-code/pipedream/modelcontextprotocol/agentrpc/gemini-cli/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:155:11
    at file:///E:/claude-code/pipedream/modelcontextprotocol/agentrpc/gemini-cli/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:752:26
    at file:///E:/claude-code/pipedream/modelcontextprotocol/agentrpc/gemini-cli/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:1897:20
    at new Promise (&lt;anonymous&gt;)
    at runWithTimeout (file:///E:/claude-code/pipedream/modelcontextprotocol/agentrpc/gemini-cli/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:1863:10)
    at runTest (file:///E:/claude-code/pipedream/modelcontextprotocol/agentrpc/gemini-cli/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:1574:12)
[90m    at processTicksAndRejections (node:internal/process/task_queues:105:5)[39m
    at runSuite (file:///E:/claude-code/pipedream/modelcontextprotocol/agentrpc/gemini-cli/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:1729:8)
    at runSuite (file:///E:/claude-code/pipedream/modelcontextprotocol/agentrpc/gemini-cli/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:1729:8)

            </system-err>
        </testcase>
        <testcase classname="src/code_assist/oauth-credential-storage.test.ts" name="OAuthCredentialStorage &gt; loadCredentials &gt; should throw an error if read file fails" time="0.0009922">
            <system-err>
Error: Permission denied
    at [90mE:\claude-code\pipedream\modelcontextprotocol\agentrpc\gemini-cli\packages\core\[39msrc\code_assist\oauth-credential-storage.test.ts:136:9
    at file:///E:/claude-code/pipedream/modelcontextprotocol/agentrpc/gemini-cli/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:155:11
    at file:///E:/claude-code/pipedream/modelcontextprotocol/agentrpc/gemini-cli/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:752:26
    at file:///E:/claude-code/pipedream/modelcontextprotocol/agentrpc/gemini-cli/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:1897:20
    at new Promise (&lt;anonymous&gt;)
    at runWithTimeout (file:///E:/claude-code/pipedream/modelcontextprotocol/agentrpc/gemini-cli/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:1863:10)
    at runTest (file:///E:/claude-code/pipedream/modelcontextprotocol/agentrpc/gemini-cli/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:1574:12)
[90m    at processTicksAndRejections (node:internal/process/task_queues:105:5)[39m
    at runSuite (file:///E:/claude-code/pipedream/modelcontextprotocol/agentrpc/gemini-cli/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:1729:8)
    at runSuite (file:///E:/claude-code/pipedream/modelcontextprotocol/agentrpc/gemini-cli/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:1729:8)

            </system-err>
        </testcase>
        <testcase classname="src/code_assist/oauth-credential-storage.test.ts" name="OAuthCredentialStorage &gt; loadCredentials &gt; should not throw error if migration file removal failed" time="0.0004698">
        </testcase>
        <testcase classname="src/code_assist/oauth-credential-storage.test.ts" name="OAuthCredentialStorage &gt; saveCredentials &gt; should save credentials to HybridTokenStorage" time="0.0006486">
        </testcase>
        <testcase classname="src/code_assist/oauth-credential-storage.test.ts" name="OAuthCredentialStorage &gt; saveCredentials &gt; should throw an error if access_token is missing" time="0.0005053">
        </testcase>
        <testcase classname="src/code_assist/oauth-credential-storage.test.ts" name="OAuthCredentialStorage &gt; clearCredentials &gt; should delete credentials from HybridTokenStorage" time="0.0004486">
        </testcase>
        <testcase classname="src/code_assist/oauth-credential-storage.test.ts" name="OAuthCredentialStorage &gt; clearCredentials &gt; should attempt to remove the old file-based storage" time="0.0004787">
        </testcase>
        <testcase classname="src/code_assist/oauth-credential-storage.test.ts" name="OAuthCredentialStorage &gt; clearCredentials &gt; should not throw an error if deleting old file fails" time="0.0012653">
        </testcase>
        <testcase classname="src/code_assist/oauth-credential-storage.test.ts" name="OAuthCredentialStorage &gt; clearCredentials &gt; should throw an error if clearing from HybridTokenStorage fails" time="0.0015426">
            <system-err>
Error: Deletion error
    at [90mE:\claude-code\pipedream\modelcontextprotocol\agentrpc\gemini-cli\packages\core\[39msrc\code_assist\oauth-credential-storage.test.ts:209:9
    at file:///E:/claude-code/pipedream/modelcontextprotocol/agentrpc/gemini-cli/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:155:11
    at file:///E:/claude-code/pipedream/modelcontextprotocol/agentrpc/gemini-cli/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:752:26
    at file:///E:/claude-code/pipedream/modelcontextprotocol/agentrpc/gemini-cli/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:1897:20
    at new Promise (&lt;anonymous&gt;)
    at runWithTimeout (file:///E:/claude-code/pipedream/modelcontextprotocol/agentrpc/gemini-cli/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:1863:10)
    at runTest (file:///E:/claude-code/pipedream/modelcontextprotocol/agentrpc/gemini-cli/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:1574:12)
[90m    at processTicksAndRejections (node:internal/process/task_queues:105:5)[39m
    at runSuite (file:///E:/claude-code/pipedream/modelcontextprotocol/agentrpc/gemini-cli/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:1729:8)
    at runSuite (file:///E:/claude-code/pipedream/modelcontextprotocol/agentrpc/gemini-cli/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:1729:8)

            </system-err>
        </testcase>
    </testsuite>
    <testsuite name="src/code_assist/oauth2.test.ts" timestamp="2025-09-23T13:26:52.016Z" hostname="WIN-33AANMPCPKN" tests="24" failures="0" errors="0" skipped="0" time="0.9862874">
        <testcase classname="src/code_assist/oauth2.test.ts" name="oauth2 &gt; with encrypted flag false &gt; should perform a web login" time="0.0211454">
            <system-out>
Failed to load credentials from C:\Users\alroh\AppData\Local\Temp\gemini-cli-test-home-a5HXdZ\.gemini\oauth_creds.json: ENOENT: no such file or directory, open &apos;C:\Users\alroh\AppData\Local\Temp\gemini-cli-test-home-a5HXdZ\.gemini\oauth_creds.json&apos;



Code Assist login required.
Attempting to open authentication page in your browser.
Otherwise navigate to:

https://example.com/auth



Waiting for authentication...

            </system-out>
        </testcase>
        <testcase classname="src/code_assist/oauth2.test.ts" name="oauth2 &gt; with encrypted flag false &gt; should perform login with user code" time="0.0051038">
            <system-out>
Failed to load credentials from C:\Users\alroh\AppData\Local\Temp\gemini-cli-test-home-n99dYE\.gemini\oauth_creds.json: ENOENT: no such file or directory, open &apos;C:\Users\alroh\AppData\Local\Temp\gemini-cli-test-home-n99dYE\.gemini\oauth_creds.json&apos;

            </system-out>
        </testcase>
        <testcase classname="src/code_assist/oauth2.test.ts" name="oauth2 &gt; with encrypted flag false &gt; in Cloud Shell &gt; should attempt to load cached credentials first" time="0.0041516">
            <system-out>
Loaded cached credentials.

            </system-out>
        </testcase>
        <testcase classname="src/code_assist/oauth2.test.ts" name="oauth2 &gt; with encrypted flag false &gt; in Cloud Shell &gt; should use Compute to get a client if no cached credentials exist" time="0.002472">
            <system-out>
Failed to load credentials from C:\Users\alroh\AppData\Local\Temp\gemini-cli-test-home-BUG9v8\.gemini\oauth_creds.json: ENOENT: no such file or directory, open &apos;C:\Users\alroh\AppData\Local\Temp\gemini-cli-test-home-BUG9v8\.gemini\oauth_creds.json&apos;

Attempting to authenticate via Cloud Shell VM&apos;s ADC.

Authentication successful.

            </system-out>
        </testcase>
        <testcase classname="src/code_assist/oauth2.test.ts" name="oauth2 &gt; with encrypted flag false &gt; in Cloud Shell &gt; should not cache the credentials after fetching them via ADC" time="0.0054165">
            <system-out>
Failed to load credentials from C:\Users\alroh\AppData\Local\Temp\gemini-cli-test-home-9ibDbm\.gemini\oauth_creds.json: ENOENT: no such file or directory, open &apos;C:\Users\alroh\AppData\Local\Temp\gemini-cli-test-home-9ibDbm\.gemini\oauth_creds.json&apos;

Attempting to authenticate via Cloud Shell VM&apos;s ADC.

Authentication successful.

            </system-out>
        </testcase>
        <testcase classname="src/code_assist/oauth2.test.ts" name="oauth2 &gt; with encrypted flag false &gt; in Cloud Shell &gt; should return the Compute client on successful ADC authentication" time="0.0055048">
            <system-out>
Failed to load credentials from C:\Users\alroh\AppData\Local\Temp\gemini-cli-test-home-C5nhxe\.gemini\oauth_creds.json: ENOENT: no such file or directory, open &apos;C:\Users\alroh\AppData\Local\Temp\gemini-cli-test-home-C5nhxe\.gemini\oauth_creds.json&apos;

Attempting to authenticate via Cloud Shell VM&apos;s ADC.

Authentication successful.

            </system-out>
        </testcase>
        <testcase classname="src/code_assist/oauth2.test.ts" name="oauth2 &gt; with encrypted flag false &gt; in Cloud Shell &gt; should throw an error if ADC fails" time="0.0026572">
            <system-out>
Failed to load credentials from C:\Users\alroh\AppData\Local\Temp\gemini-cli-test-home-iiU823\.gemini\oauth_creds.json: ENOENT: no such file or directory, open &apos;C:\Users\alroh\AppData\Local\Temp\gemini-cli-test-home-iiU823\.gemini\oauth_creds.json&apos;

Attempting to authenticate via Cloud Shell VM&apos;s ADC.

            </system-out>
        </testcase>
        <testcase classname="src/code_assist/oauth2.test.ts" name="oauth2 &gt; with encrypted flag false &gt; credential loading order &gt; should prioritize default cached credentials over GOOGLE_APPLICATION_CREDENTIALS" time="0.0178688">
            <system-out>
Loaded cached credentials.

            </system-out>
        </testcase>
        <testcase classname="src/code_assist/oauth2.test.ts" name="oauth2 &gt; with encrypted flag false &gt; credential loading order &gt; should fall back to GOOGLE_APPLICATION_CREDENTIALS if default cache is missing" time="0.0384121">
            <system-out>
Failed to load credentials from C:\Users\alroh\AppData\Local\Temp\gemini-cli-test-home-FE4fY7\.gemini\oauth_creds.json: ENOENT: no such file or directory, open &apos;C:\Users\alroh\AppData\Local\Temp\gemini-cli-test-home-FE4fY7\.gemini\oauth_creds.json&apos;

Loaded cached credentials.

            </system-out>
        </testcase>
        <testcase classname="src/code_assist/oauth2.test.ts" name="oauth2 &gt; with encrypted flag false &gt; with GCP environment variables &gt; should use GOOGLE_CLOUD_ACCESS_TOKEN when GOOGLE_GENAI_USE_GCA is true" time="0.1903003">
        </testcase>
        <testcase classname="src/code_assist/oauth2.test.ts" name="oauth2 &gt; with encrypted flag false &gt; with GCP environment variables &gt; should not use GCP token if GOOGLE_CLOUD_ACCESS_TOKEN is not set" time="0.5578222">
            <system-out>
Loaded cached credentials.

            </system-out>
        </testcase>
        <testcase classname="src/code_assist/oauth2.test.ts" name="oauth2 &gt; with encrypted flag false &gt; with GCP environment variables &gt; should not use GCP token if GOOGLE_GENAI_USE_GCA is not set" time="0.008321">
            <system-out>
Loaded cached credentials.

            </system-out>
        </testcase>
        <testcase classname="src/code_assist/oauth2.test.ts" name="oauth2 &gt; with encrypted flag false &gt; error handling &gt; should handle browser launch failure with FatalAuthenticationError" time="0.0044889">
            <system-out>
Failed to load credentials from C:\Users\alroh\AppData\Local\Temp\gemini-cli-test-home-hJcNWv\.gemini\oauth_creds.json: ENOENT: no such file or directory, open &apos;C:\Users\alroh\AppData\Local\Temp\gemini-cli-test-home-hJcNWv\.gemini\oauth_creds.json&apos;



Code Assist login required.
Attempting to open authentication page in your browser.
Otherwise navigate to:

https://example.com/auth



            </system-out>
            <system-err>
An unexpected error occurred while trying to open the browser: Browser launch failed 
This might be due to browser compatibility issues or system configuration. 
Please try running again with NO_BROWSER=true set for manual authentication.

            </system-err>
        </testcase>
        <testcase classname="src/code_assist/oauth2.test.ts" name="oauth2 &gt; with encrypted flag false &gt; error handling &gt; should handle authentication timeout with proper error message" time="0.0044717">
            <system-out>
Failed to load credentials from C:\Users\alroh\AppData\Local\Temp\gemini-cli-test-home-nceNPg\.gemini\oauth_creds.json: ENOENT: no such file or directory, open &apos;C:\Users\alroh\AppData\Local\Temp\gemini-cli-test-home-nceNPg\.gemini\oauth_creds.json&apos;



Code Assist login required.
Attempting to open authentication page in your browser.
Otherwise navigate to:

https://example.com/auth



Waiting for authentication...

            </system-out>
        </testcase>
        <testcase classname="src/code_assist/oauth2.test.ts" name="oauth2 &gt; with encrypted flag false &gt; error handling &gt; should handle OAuth callback errors with descriptive messages" time="0.0056355">
            <system-out>
Failed to load credentials from C:\Users\alroh\AppData\Local\Temp\gemini-cli-test-home-hl6VAR\.gemini\oauth_creds.json: ENOENT: no such file or directory, open &apos;C:\Users\alroh\AppData\Local\Temp\gemini-cli-test-home-hl6VAR\.gemini\oauth_creds.json&apos;



Code Assist login required.
Attempting to open authentication page in your browser.
Otherwise navigate to:

https://example.com/auth



Waiting for authentication...

            </system-out>
        </testcase>
        <testcase classname="src/code_assist/oauth2.test.ts" name="oauth2 &gt; with encrypted flag false &gt; error handling &gt; should handle OAuth error without description" time="0.0591791">
            <system-out>
Failed to load credentials from C:\Users\alroh\AppData\Local\Temp\gemini-cli-test-home-OendKr\.gemini\oauth_creds.json: ENOENT: no such file or directory, open &apos;C:\Users\alroh\AppData\Local\Temp\gemini-cli-test-home-OendKr\.gemini\oauth_creds.json&apos;



Code Assist login required.
Attempting to open authentication page in your browser.
Otherwise navigate to:

https://example.com/auth



Waiting for authentication...

            </system-out>
        </testcase>
        <testcase classname="src/code_assist/oauth2.test.ts" name="oauth2 &gt; with encrypted flag false &gt; error handling &gt; should handle token exchange failure with descriptive error" time="0.0098474">
            <system-out>
Failed to load credentials from C:\Users\alroh\AppData\Local\Temp\gemini-cli-test-home-6CsxOM\.gemini\oauth_creds.json: ENOENT: no such file or directory, open &apos;C:\Users\alroh\AppData\Local\Temp\gemini-cli-test-home-6CsxOM\.gemini\oauth_creds.json&apos;



Code Assist login required.
Attempting to open authentication page in your browser.
Otherwise navigate to:

https://example.com/auth



Waiting for authentication...

            </system-out>
        </testcase>
        <testcase classname="src/code_assist/oauth2.test.ts" name="oauth2 &gt; with encrypted flag false &gt; error handling &gt; should handle fetchAndCacheUserInfo failure gracefully" time="0.0051386">
            <system-out>
Failed to load credentials from C:\Users\alroh\AppData\Local\Temp\gemini-cli-test-home-stvBPM\.gemini\oauth_creds.json: ENOENT: no such file or directory, open &apos;C:\Users\alroh\AppData\Local\Temp\gemini-cli-test-home-stvBPM\.gemini\oauth_creds.json&apos;



Code Assist login required.
Attempting to open authentication page in your browser.
Otherwise navigate to:

https://example.com/auth



Waiting for authentication...

            </system-out>
        </testcase>
        <testcase classname="src/code_assist/oauth2.test.ts" name="oauth2 &gt; with encrypted flag false &gt; error handling &gt; should handle user code authentication failure with descriptive error" time="0.0025232">
            <system-out>
Failed to load credentials from C:\Users\alroh\AppData\Local\Temp\gemini-cli-test-home-2GilWw\.gemini\oauth_creds.json: ENOENT: no such file or directory, open &apos;C:\Users\alroh\AppData\Local\Temp\gemini-cli-test-home-2GilWw\.gemini\oauth_creds.json&apos;

            </system-out>
        </testcase>
        <testcase classname="src/code_assist/oauth2.test.ts" name="oauth2 &gt; with encrypted flag false &gt; clearCachedCredentialFile &gt; should clear cached credentials and Google account" time="0.0085637">
        </testcase>
        <testcase classname="src/code_assist/oauth2.test.ts" name="oauth2 &gt; with encrypted flag false &gt; clearCachedCredentialFile &gt; should clear the in-memory OAuth client cache" time="0.005866">
            <system-out>
Loaded cached credentials.

Loaded cached credentials.

            </system-out>
            <system-err>
Failed to fetch user info: [33m500[39m Internal Server Error

Failed to fetch user info: [33m500[39m Internal Server Error

            </system-err>
        </testcase>
        <testcase classname="src/code_assist/oauth2.test.ts" name="oauth2 &gt; with encrypted flag true &gt; should save credentials using OAuthCredentialStorage during web login" time="0.0080824">
            <system-out>


Code Assist login required.
Attempting to open authentication page in your browser.
Otherwise navigate to:

https://example.com/auth



Waiting for authentication...

            </system-out>
        </testcase>
        <testcase classname="src/code_assist/oauth2.test.ts" name="oauth2 &gt; with encrypted flag true &gt; should load credentials using OAuthCredentialStorage and not from file" time="0.0049259">
            <system-out>
Loaded cached credentials.

            </system-out>
        </testcase>
        <testcase classname="src/code_assist/oauth2.test.ts" name="oauth2 &gt; with encrypted flag true &gt; should clear credentials using OAuthCredentialStorage" time="0.0064013">
        </testcase>
    </testsuite>
    <testsuite name="src/code_assist/server.test.ts" timestamp="2025-09-23T13:26:52.022Z" hostname="WIN-33AANMPCPKN" tests="8" failures="0" errors="0" skipped="0" time="0.0213603">
        <testcase classname="src/code_assist/server.test.ts" name="CodeAssistServer &gt; should be able to be constructed" time="0.0032185">
        </testcase>
        <testcase classname="src/code_assist/server.test.ts" name="CodeAssistServer &gt; should call the generateContent endpoint" time="0.0040835">
        </testcase>
        <testcase classname="src/code_assist/server.test.ts" name="CodeAssistServer &gt; should call the generateContentStream endpoint" time="0.0018775">
        </testcase>
        <testcase classname="src/code_assist/server.test.ts" name="CodeAssistServer &gt; should call the onboardUser endpoint" time="0.0016168">
        </testcase>
        <testcase classname="src/code_assist/server.test.ts" name="CodeAssistServer &gt; should call the loadCodeAssist endpoint" time="0.0019022">
        </testcase>
        <testcase classname="src/code_assist/server.test.ts" name="CodeAssistServer &gt; should return 0 for countTokens" time="0.0021032">
        </testcase>
        <testcase classname="src/code_assist/server.test.ts" name="CodeAssistServer &gt; should throw an error for embedContent" time="0.0029846">
        </testcase>
        <testcase classname="src/code_assist/server.test.ts" name="CodeAssistServer &gt; should handle VPC-SC errors when calling loadCodeAssist" time="0.0021558">
        </testcase>
    </testsuite>
    <testsuite name="src/code_assist/setup.test.ts" timestamp="2025-09-23T13:26:52.023Z" hostname="WIN-33AANMPCPKN" tests="7" failures="0" errors="0" skipped="0" time="0.0083299">
        <testcase classname="src/code_assist/setup.test.ts" name="setupUser for existing user &gt; should use GOOGLE_CLOUD_PROJECT when set and project from server is undefined" time="0.0036596">
        </testcase>
        <testcase classname="src/code_assist/setup.test.ts" name="setupUser for existing user &gt; should ignore GOOGLE_CLOUD_PROJECT when project from server is set" time="0.0006098">
        </testcase>
        <testcase classname="src/code_assist/setup.test.ts" name="setupUser for existing user &gt; should throw ProjectIdRequiredError when no project ID is available" time="0.0009066">
        </testcase>
        <testcase classname="src/code_assist/setup.test.ts" name="setupUser for new user &gt; should use GOOGLE_CLOUD_PROJECT when set and onboard a new paid user" time="0.0007619">
        </testcase>
        <testcase classname="src/code_assist/setup.test.ts" name="setupUser for new user &gt; should onboard a new free user when GOOGLE_CLOUD_PROJECT is not set" time="0.0005543">
        </testcase>
        <testcase classname="src/code_assist/setup.test.ts" name="setupUser for new user &gt; should use GOOGLE_CLOUD_PROJECT when onboard response has no project ID" time="0.0002632">
        </testcase>
        <testcase classname="src/code_assist/setup.test.ts" name="setupUser for new user &gt; should throw ProjectIdRequiredError when no project ID is available" time="0.0003989">
        </testcase>
    </testsuite>
    <testsuite name="src/confirmation-bus/message-bus.test.ts" timestamp="2025-09-23T13:26:52.024Z" hostname="WIN-33AANMPCPKN" tests="10" failures="0" errors="0" skipped="0" time="0.0126695">
        <testcase classname="src/confirmation-bus/message-bus.test.ts" name="MessageBus &gt; publish &gt; should emit error for invalid message" time="0.0057461">
        </testcase>
        <testcase classname="src/confirmation-bus/message-bus.test.ts" name="MessageBus &gt; publish &gt; should validate tool confirmation requests have correlationId" time="0.0004094">
        </testcase>
        <testcase classname="src/confirmation-bus/message-bus.test.ts" name="MessageBus &gt; publish &gt; should emit confirmation response when policy allows" time="0.0015055">
        </testcase>
        <testcase classname="src/confirmation-bus/message-bus.test.ts" name="MessageBus &gt; publish &gt; should emit rejection and response when policy denies" time="0.0006253">
        </testcase>
        <testcase classname="src/confirmation-bus/message-bus.test.ts" name="MessageBus &gt; publish &gt; should pass through to UI when policy says ASK_USER" time="0.0002673">
        </testcase>
        <testcase classname="src/confirmation-bus/message-bus.test.ts" name="MessageBus &gt; publish &gt; should emit other message types directly" time="0.0002075">
        </testcase>
        <testcase classname="src/confirmation-bus/message-bus.test.ts" name="MessageBus &gt; subscribe/unsubscribe &gt; should allow subscribing to specific message types" time="0.0001948">
        </testcase>
        <testcase classname="src/confirmation-bus/message-bus.test.ts" name="MessageBus &gt; subscribe/unsubscribe &gt; should allow unsubscribing from message types" time="0.000524">
        </testcase>
        <testcase classname="src/confirmation-bus/message-bus.test.ts" name="MessageBus &gt; subscribe/unsubscribe &gt; should support multiple subscribers for the same message type" time="0.0002728">
        </testcase>
        <testcase classname="src/confirmation-bus/message-bus.test.ts" name="MessageBus &gt; error handling &gt; should not crash on errors during message processing" time="0.0012404">
        </testcase>
    </testsuite>
    <testsuite name="src/core/baseLlmClient.test.ts" timestamp="2025-09-23T13:26:52.025Z" hostname="WIN-33AANMPCPKN" tests="18" failures="0" errors="0" skipped="0" time="0.0143063">
        <testcase classname="src/core/baseLlmClient.test.ts" name="BaseLlmClient &gt; generateJson - Success Scenarios &gt; should call generateContent with correct parameters, defaults, and utilize retry mechanism" time="0.0039587">
        </testcase>
        <testcase classname="src/core/baseLlmClient.test.ts" name="BaseLlmClient &gt; generateJson - Success Scenarios &gt; should respect configuration overrides" time="0.0016678">
        </testcase>
        <testcase classname="src/core/baseLlmClient.test.ts" name="BaseLlmClient &gt; generateJson - Success Scenarios &gt; should include system instructions when provided" time="0.0003153">
        </testcase>
        <testcase classname="src/core/baseLlmClient.test.ts" name="BaseLlmClient &gt; generateJson - Success Scenarios &gt; should use the provided promptId" time="0.0003025">
        </testcase>
        <testcase classname="src/core/baseLlmClient.test.ts" name="BaseLlmClient &gt; generateJson - Response Cleaning &gt; should clean JSON wrapped in markdown backticks and log telemetry" time="0.0019077">
        </testcase>
        <testcase classname="src/core/baseLlmClient.test.ts" name="BaseLlmClient &gt; generateJson - Response Cleaning &gt; should handle extra whitespace correctly without logging malformed telemetry" time="0.0003252">
        </testcase>
        <testcase classname="src/core/baseLlmClient.test.ts" name="BaseLlmClient &gt; generateJson - Error Handling &gt; should throw and report error for empty response" time="0.0014496">
        </testcase>
        <testcase classname="src/core/baseLlmClient.test.ts" name="BaseLlmClient &gt; generateJson - Error Handling &gt; should throw and report error for invalid JSON syntax" time="0.0004325">
        </testcase>
        <testcase classname="src/core/baseLlmClient.test.ts" name="BaseLlmClient &gt; generateJson - Error Handling &gt; should throw and report generic API errors" time="0.0004256">
        </testcase>
        <testcase classname="src/core/baseLlmClient.test.ts" name="BaseLlmClient &gt; generateJson - Error Handling &gt; should throw immediately without reporting if aborted" time="0.0002895">
        </testcase>
        <testcase classname="src/core/baseLlmClient.test.ts" name="BaseLlmClient &gt; generateEmbedding &gt; should call embedContent with correct parameters and return embeddings" time="0.0003605">
        </testcase>
        <testcase classname="src/core/baseLlmClient.test.ts" name="BaseLlmClient &gt; generateEmbedding &gt; should return an empty array if an empty array is passed" time="0.0001528">
        </testcase>
        <testcase classname="src/core/baseLlmClient.test.ts" name="BaseLlmClient &gt; generateEmbedding &gt; should throw an error if API response has no embeddings array" time="0.0002696">
        </testcase>
        <testcase classname="src/core/baseLlmClient.test.ts" name="BaseLlmClient &gt; generateEmbedding &gt; should throw an error if API response has an empty embeddings array" time="0.0001861">
        </testcase>
        <testcase classname="src/core/baseLlmClient.test.ts" name="BaseLlmClient &gt; generateEmbedding &gt; should throw an error if API returns a mismatched number of embeddings" time="0.0001735">
        </testcase>
        <testcase classname="src/core/baseLlmClient.test.ts" name="BaseLlmClient &gt; generateEmbedding &gt; should throw an error if any embedding has nullish values" time="0.0001839">
        </testcase>
        <testcase classname="src/core/baseLlmClient.test.ts" name="BaseLlmClient &gt; generateEmbedding &gt; should throw an error if any embedding has an empty values array" time="0.000165">
        </testcase>
        <testcase classname="src/core/baseLlmClient.test.ts" name="BaseLlmClient &gt; generateEmbedding &gt; should propagate errors from the API call" time="0.0001723">
        </testcase>
    </testsuite>
    <testsuite name="src/core/client.test.ts" timestamp="2025-09-23T13:26:52.028Z" hostname="WIN-33AANMPCPKN" tests="63" failures="0" errors="0" skipped="0" time="0.6660651">
        <testcase classname="src/core/client.test.ts" name="findIndexAfterFraction &gt; should throw an error for non-positive numbers" time="0.0020523">
        </testcase>
        <testcase classname="src/core/client.test.ts" name="findIndexAfterFraction &gt; should throw an error for a fraction greater than or equal to 1" time="0.000237">
        </testcase>
        <testcase classname="src/core/client.test.ts" name="findIndexAfterFraction &gt; should handle an empty history" time="0.0001868">
        </testcase>
        <testcase classname="src/core/client.test.ts" name="findIndexAfterFraction &gt; should handle a fraction in the middle" time="0.0001331">
        </testcase>
        <testcase classname="src/core/client.test.ts" name="findIndexAfterFraction &gt; should handle a fraction of last index" time="0.0000824">
        </testcase>
        <testcase classname="src/core/client.test.ts" name="findIndexAfterFraction &gt; should handle a fraction of after last index" time="0.0000821">
        </testcase>
        <testcase classname="src/core/client.test.ts" name="findIndexAfterFraction &gt; should return earlier splitpoint if no valid ones are after threshhold" time="0.0000903">
        </testcase>
        <testcase classname="src/core/client.test.ts" name="findIndexAfterFraction &gt; should handle a history with only one item" time="0.0000662">
        </testcase>
        <testcase classname="src/core/client.test.ts" name="findIndexAfterFraction &gt; should handle history with weird parts" time="0.0000795">
        </testcase>
        <testcase classname="src/core/client.test.ts" name="isThinkingSupported &gt; should return true for gemini-2.5" time="0.0000886">
        </testcase>
        <testcase classname="src/core/client.test.ts" name="isThinkingSupported &gt; should return true for gemini-2.5-pro" time="0.0000747">
        </testcase>
        <testcase classname="src/core/client.test.ts" name="isThinkingSupported &gt; should return false for other models" time="0.0000885">
        </testcase>
        <testcase classname="src/core/client.test.ts" name="isThinkingDefault &gt; should return false for gemini-2.5-flash-lite" time="0.0000758">
        </testcase>
        <testcase classname="src/core/client.test.ts" name="isThinkingDefault &gt; should return true for gemini-2.5" time="0.0000554">
        </testcase>
        <testcase classname="src/core/client.test.ts" name="isThinkingDefault &gt; should return true for gemini-2.5-pro" time="0.0000534">
        </testcase>
        <testcase classname="src/core/client.test.ts" name="isThinkingDefault &gt; should return false for other models" time="0.0000744">
        </testcase>
        <testcase classname="src/core/client.test.ts" name="Gemini Client (client.ts) &gt; addHistory &gt; should call chat.addHistory with the provided content" time="0.0095887">
        </testcase>
        <testcase classname="src/core/client.test.ts" name="Gemini Client (client.ts) &gt; resetChat &gt; should create a new chat session, clearing the old history" time="0.0025424">
        </testcase>
        <testcase classname="src/core/client.test.ts" name="Gemini Client (client.ts) &gt; tryCompressChat &gt; when compression inflates the token count &gt; allows compression to be forced/manual after a failure" time="0.0035092">
        </testcase>
        <testcase classname="src/core/client.test.ts" name="Gemini Client (client.ts) &gt; tryCompressChat &gt; when compression inflates the token count &gt; yields the result even if the compression inflated the tokens" time="0.0021104">
        </testcase>
        <testcase classname="src/core/client.test.ts" name="Gemini Client (client.ts) &gt; tryCompressChat &gt; when compression inflates the token count &gt; does not manipulate the source chat" time="0.001604">
        </testcase>
        <testcase classname="src/core/client.test.ts" name="Gemini Client (client.ts) &gt; tryCompressChat &gt; when compression inflates the token count &gt; restores the history back to the original" time="0.0018485">
        </testcase>
        <testcase classname="src/core/client.test.ts" name="Gemini Client (client.ts) &gt; tryCompressChat &gt; when compression inflates the token count &gt; will not attempt to compress context after a failure" time="0.0018837">
        </testcase>
        <testcase classname="src/core/client.test.ts" name="Gemini Client (client.ts) &gt; tryCompressChat &gt; should not trigger summarization if token count is below threshold" time="0.0060996">
        </testcase>
        <testcase classname="src/core/client.test.ts" name="Gemini Client (client.ts) &gt; tryCompressChat &gt; logs a telemetry event when compressing" time="0.0045289">
        </testcase>
        <testcase classname="src/core/client.test.ts" name="Gemini Client (client.ts) &gt; tryCompressChat &gt; should trigger summarization if token count is at threshold with contextPercentageThreshold setting" time="0.0024798">
        </testcase>
        <testcase classname="src/core/client.test.ts" name="Gemini Client (client.ts) &gt; tryCompressChat &gt; should not compress across a function call response" time="0.0034786">
        </testcase>
        <testcase classname="src/core/client.test.ts" name="Gemini Client (client.ts) &gt; tryCompressChat &gt; should always trigger summarization when force is true, regardless of token count" time="0.0022443">
        </testcase>
        <testcase classname="src/core/client.test.ts" name="Gemini Client (client.ts) &gt; sendMessageStream &gt; emits a compression event when the context was automatically compressed" time="0.0046895">
        </testcase>
        <testcase classname="src/core/client.test.ts" name="Gemini Client (client.ts) &gt; sendMessageStream &gt; does not emit a compression event when the status is 2" time="0.0028259">
        </testcase>
        <testcase classname="src/core/client.test.ts" name="Gemini Client (client.ts) &gt; sendMessageStream &gt; does not emit a compression event when the status is 4" time="0.0019825">
        </testcase>
        <testcase classname="src/core/client.test.ts" name="Gemini Client (client.ts) &gt; sendMessageStream &gt; does not emit a compression event when the status is 3" time="0.0177509">
        </testcase>
        <testcase classname="src/core/client.test.ts" name="Gemini Client (client.ts) &gt; sendMessageStream &gt; should include editor context when ideMode is enabled" time="0.0100681">
        </testcase>
        <testcase classname="src/core/client.test.ts" name="Gemini Client (client.ts) &gt; sendMessageStream &gt; should not add context if ideMode is enabled but no open files" time="0.0068651">
        </testcase>
        <testcase classname="src/core/client.test.ts" name="Gemini Client (client.ts) &gt; sendMessageStream &gt; should add context if ideMode is enabled and there is one active file" time="0.0056981">
        </testcase>
        <testcase classname="src/core/client.test.ts" name="Gemini Client (client.ts) &gt; sendMessageStream &gt; should add context if ideMode is enabled and there are open files but no active file" time="0.0083805">
        </testcase>
        <testcase classname="src/core/client.test.ts" name="Gemini Client (client.ts) &gt; sendMessageStream &gt; should return the turn instance after the stream is complete" time="0.0173979">
        </testcase>
        <testcase classname="src/core/client.test.ts" name="Gemini Client (client.ts) &gt; sendMessageStream &gt; should stop infinite loop after MAX_TURNS when nextSpeaker always returns model" time="0.0459335">
            <system-out>
checkNextSpeaker called 100 times - infinite loop protection worked

            </system-out>
        </testcase>
        <testcase classname="src/core/client.test.ts" name="Gemini Client (client.ts) &gt; sendMessageStream &gt; should yield MaxSessionTurns and stop when session turn limit is reached" time="0.0175696">
        </testcase>
        <testcase classname="src/core/client.test.ts" name="Gemini Client (client.ts) &gt; sendMessageStream &gt; should respect MAX_TURNS limit even when turns parameter is set to a large value" time="0.0175688">
            <system-out>
Infinite loop protection working: checkNextSpeaker called 100 times, 1 events generated (properly bounded by MAX_TURNS)

            </system-out>
        </testcase>
        <testcase classname="src/core/client.test.ts" name="Gemini Client (client.ts) &gt; sendMessageStream &gt; Model Routing &gt; should use the model router service to select a model on the first turn" time="0.0181812">
        </testcase>
        <testcase classname="src/core/client.test.ts" name="Gemini Client (client.ts) &gt; sendMessageStream &gt; Model Routing &gt; should use the same model for subsequent turns in the same prompt (stickiness)" time="0.0049314">
        </testcase>
        <testcase classname="src/core/client.test.ts" name="Gemini Client (client.ts) &gt; sendMessageStream &gt; Model Routing &gt; should reset the sticky model and re-route when the prompt_id changes" time="0.007631">
        </testcase>
        <testcase classname="src/core/client.test.ts" name="Gemini Client (client.ts) &gt; sendMessageStream &gt; Model Routing &gt; should use the fallback model and bypass routing when in fallback mode" time="0.0453057">
        </testcase>
        <testcase classname="src/core/client.test.ts" name="Gemini Client (client.ts) &gt; sendMessageStream &gt; Model Routing &gt; should stick to the fallback model for the entire sequence even if fallback mode ends" time="0.0106647">
        </testcase>
        <testcase classname="src/core/client.test.ts" name="Gemini Client (client.ts) &gt; sendMessageStream &gt; Editor context delta &gt; &apos;sends delta when active file changes&apos;" time="0.0153532">
        </testcase>
        <testcase classname="src/core/client.test.ts" name="Gemini Client (client.ts) &gt; sendMessageStream &gt; Editor context delta &gt; &apos;sends delta when cursor line changes&apos;" time="0.0062174">
        </testcase>
        <testcase classname="src/core/client.test.ts" name="Gemini Client (client.ts) &gt; sendMessageStream &gt; Editor context delta &gt; &apos;sends delta when cursor character cha…&apos;" time="0.0071161">
        </testcase>
        <testcase classname="src/core/client.test.ts" name="Gemini Client (client.ts) &gt; sendMessageStream &gt; Editor context delta &gt; &apos;sends delta when selected text changes&apos;" time="0.0083256">
        </testcase>
        <testcase classname="src/core/client.test.ts" name="Gemini Client (client.ts) &gt; sendMessageStream &gt; Editor context delta &gt; &apos;sends delta when selected text is add…&apos;" time="0.0083677">
        </testcase>
        <testcase classname="src/core/client.test.ts" name="Gemini Client (client.ts) &gt; sendMessageStream &gt; Editor context delta &gt; &apos;sends delta when selected text is rem…&apos;" time="0.0417474">
        </testcase>
        <testcase classname="src/core/client.test.ts" name="Gemini Client (client.ts) &gt; sendMessageStream &gt; Editor context delta &gt; &apos;does not send context when nothing ch…&apos;" time="0.0191473">
        </testcase>
        <testcase classname="src/core/client.test.ts" name="Gemini Client (client.ts) &gt; sendMessageStream &gt; Editor context delta &gt; sends full context when history is cleared, even if editor state is unchanged" time="0.0418349">
        </testcase>
        <testcase classname="src/core/client.test.ts" name="Gemini Client (client.ts) &gt; sendMessageStream &gt; IDE context with pending tool calls &gt; should NOT add IDE context when a tool call is pending" time="0.0737654">
        </testcase>
        <testcase classname="src/core/client.test.ts" name="Gemini Client (client.ts) &gt; sendMessageStream &gt; IDE context with pending tool calls &gt; should add IDE context when no tool call is pending" time="0.0460098">
        </testcase>
        <testcase classname="src/core/client.test.ts" name="Gemini Client (client.ts) &gt; sendMessageStream &gt; IDE context with pending tool calls &gt; should send the latest IDE context on the next message after a skipped context" time="0.0112896">
        </testcase>
        <testcase classname="src/core/client.test.ts" name="Gemini Client (client.ts) &gt; sendMessageStream &gt; IDE context with pending tool calls &gt; should send a context DELTA on the next message after a skipped context" time="0.0087409">
        </testcase>
        <testcase classname="src/core/client.test.ts" name="Gemini Client (client.ts) &gt; sendMessageStream &gt; should not call checkNextSpeaker when turn.run() yields an error" time="0.0065314">
        </testcase>
        <testcase classname="src/core/client.test.ts" name="Gemini Client (client.ts) &gt; sendMessageStream &gt; should not call checkNextSpeaker when turn.run() yields a value then an error" time="0.016602">
        </testcase>
        <testcase classname="src/core/client.test.ts" name="Gemini Client (client.ts) &gt; sendMessageStream &gt; should abort linked signal when loop is detected" time="0.0094415">
        </testcase>
        <testcase classname="src/core/client.test.ts" name="Gemini Client (client.ts) &gt; generateContent &gt; should call generateContent with the correct parameters" time="0.012149">
        </testcase>
        <testcase classname="src/core/client.test.ts" name="Gemini Client (client.ts) &gt; generateContent &gt; should use current model from config for content generation" time="0.0209375">
        </testcase>
        <testcase classname="src/core/client.test.ts" name="Gemini Client (client.ts) &gt; generateContent &gt; should use the Flash model when fallback mode is active" time="0.0210784">
        </testcase>
    </testsuite>
    <testsuite name="src/core/contentGenerator.test.ts" timestamp="2025-09-23T13:26:52.033Z" hostname="WIN-33AANMPCPKN" tests="8" failures="0" errors="0" skipped="0" time="0.008159">
        <testcase classname="src/core/contentGenerator.test.ts" name="createContentGenerator &gt; should create a CodeAssistContentGenerator" time="0.0022268">
        </testcase>
        <testcase classname="src/core/contentGenerator.test.ts" name="createContentGenerator &gt; should create a GoogleGenAI content generator" time="0.0018283">
        </testcase>
        <testcase classname="src/core/contentGenerator.test.ts" name="createContentGenerator &gt; should create a GoogleGenAI content generator with client install id logging disabled" time="0.0002853">
        </testcase>
        <testcase classname="src/core/contentGenerator.test.ts" name="createContentGeneratorConfig &gt; should configure for Gemini using GEMINI_API_KEY when set" time="0.0011154">
        </testcase>
        <testcase classname="src/core/contentGenerator.test.ts" name="createContentGeneratorConfig &gt; should not configure for Gemini if GEMINI_API_KEY is empty" time="0.000379">
        </testcase>
        <testcase classname="src/core/contentGenerator.test.ts" name="createContentGeneratorConfig &gt; should configure for Vertex AI using GOOGLE_API_KEY when set" time="0.0003186">
        </testcase>
        <testcase classname="src/core/contentGenerator.test.ts" name="createContentGeneratorConfig &gt; should configure for Vertex AI using GCP project and location when set" time="0.0003785">
        </testcase>
        <testcase classname="src/core/contentGenerator.test.ts" name="createContentGeneratorConfig &gt; should not configure for Vertex AI if required env vars are empty" time="0.0003687">
        </testcase>
    </testsuite>
    <testsuite name="src/core/coreToolScheduler.test.ts" timestamp="2025-09-23T13:26:52.034Z" hostname="WIN-33AANMPCPKN" tests="27" failures="0" errors="0" skipped="0" time="0.139699">
        <testcase classname="src/core/coreToolScheduler.test.ts" name="CoreToolScheduler &gt; should cancel a tool call if the signal is aborted before confirmation" time="0.0342114">
        </testcase>
        <testcase classname="src/core/coreToolScheduler.test.ts" name="CoreToolScheduler &gt; getToolSuggestion &gt; should suggest the top N closest tool names for a typo" time="0.0007191">
        </testcase>
        <testcase classname="src/core/coreToolScheduler.test.ts" name="CoreToolScheduler with payload &gt; should update args and diff and execute tool when payload is provided" time="0.0054431">
        </testcase>
        <testcase classname="src/core/coreToolScheduler.test.ts" name="convertToFunctionResponse &gt; should handle simple string llmContent" time="0.0002622">
        </testcase>
        <testcase classname="src/core/coreToolScheduler.test.ts" name="convertToFunctionResponse &gt; should handle llmContent as a single Part with text" time="0.0002822">
        </testcase>
        <testcase classname="src/core/coreToolScheduler.test.ts" name="convertToFunctionResponse &gt; should handle llmContent as a PartListUnion array with a single text Part" time="0.0002079">
        </testcase>
        <testcase classname="src/core/coreToolScheduler.test.ts" name="convertToFunctionResponse &gt; should handle llmContent with inlineData" time="0.0001945">
        </testcase>
        <testcase classname="src/core/coreToolScheduler.test.ts" name="convertToFunctionResponse &gt; should handle llmContent with fileData" time="0.0001315">
        </testcase>
        <testcase classname="src/core/coreToolScheduler.test.ts" name="convertToFunctionResponse &gt; should handle llmContent as an array of multiple Parts (text and inlineData)" time="0.0001608">
        </testcase>
        <testcase classname="src/core/coreToolScheduler.test.ts" name="convertToFunctionResponse &gt; should handle llmContent as an array with a single inlineData Part" time="0.0001155">
        </testcase>
        <testcase classname="src/core/coreToolScheduler.test.ts" name="convertToFunctionResponse &gt; should handle llmContent as a generic Part (not text, inlineData, or fileData)" time="0.0000987">
        </testcase>
        <testcase classname="src/core/coreToolScheduler.test.ts" name="convertToFunctionResponse &gt; should handle empty string llmContent" time="0.0000853">
        </testcase>
        <testcase classname="src/core/coreToolScheduler.test.ts" name="convertToFunctionResponse &gt; should handle llmContent as an empty array" time="0.0000961">
        </testcase>
        <testcase classname="src/core/coreToolScheduler.test.ts" name="convertToFunctionResponse &gt; should handle llmContent as a Part with undefined inlineData/fileData/text" time="0.0000899">
        </testcase>
        <testcase classname="src/core/coreToolScheduler.test.ts" name="CoreToolScheduler edit cancellation &gt; should preserve diff when an edit is cancelled" time="0.0013744">
        </testcase>
        <testcase classname="src/core/coreToolScheduler.test.ts" name="CoreToolScheduler YOLO mode &gt; should execute tool requiring confirmation directly without waiting" time="0.0021941">
        </testcase>
        <testcase classname="src/core/coreToolScheduler.test.ts" name="CoreToolScheduler request queueing &gt; should queue a request if another is running" time="0.0177886">
        </testcase>
        <testcase classname="src/core/coreToolScheduler.test.ts" name="CoreToolScheduler request queueing &gt; should auto-approve a tool call if it is on the allowedTools list" time="0.0016977">
        </testcase>
        <testcase classname="src/core/coreToolScheduler.test.ts" name="CoreToolScheduler request queueing &gt; should handle two synchronous calls to schedule" time="0.002268">
        </testcase>
        <testcase classname="src/core/coreToolScheduler.test.ts" name="CoreToolScheduler request queueing &gt; should auto-approve remaining tool calls when first tool call is approved with ProceedAlways" time="0.0568666">
        </testcase>
        <testcase classname="src/core/coreToolScheduler.test.ts" name="truncateAndSaveToFile &gt; should return content unchanged if below threshold" time="0.000619">
        </testcase>
        <testcase classname="src/core/coreToolScheduler.test.ts" name="truncateAndSaveToFile &gt; should truncate content by lines when content has many lines" time="0.0011848">
        </testcase>
        <testcase classname="src/core/coreToolScheduler.test.ts" name="truncateAndSaveToFile &gt; should wrap and truncate content when content has few but long lines" time="0.0014632">
        </testcase>
        <testcase classname="src/core/coreToolScheduler.test.ts" name="truncateAndSaveToFile &gt; should handle file write errors gracefully" time="0.0036514">
        </testcase>
        <testcase classname="src/core/coreToolScheduler.test.ts" name="truncateAndSaveToFile &gt; should save to correct file path with call ID" time="0.0019361">
        </testcase>
        <testcase classname="src/core/coreToolScheduler.test.ts" name="truncateAndSaveToFile &gt; should include helpful instructions in truncated message" time="0.0033637">
        </testcase>
        <testcase classname="src/core/coreToolScheduler.test.ts" name="truncateAndSaveToFile &gt; should sanitize callId to prevent path traversal" time="0.0012414">
        </testcase>
    </testsuite>
    <testsuite name="src/core/geminiChat.test.ts" timestamp="2025-09-23T13:26:52.037Z" hostname="WIN-33AANMPCPKN" tests="29" failures="0" errors="0" skipped="0" time="5.2444814">
        <testcase classname="src/core/geminiChat.test.ts" name="GeminiChat &gt; sendMessageStream &gt; should succeed if a tool call is followed by an empty part" time="0.0078012">
        </testcase>
        <testcase classname="src/core/geminiChat.test.ts" name="GeminiChat &gt; sendMessageStream &gt; should fail if the stream ends with an empty part and has no finishReason" time="0.5258319">
        </testcase>
        <testcase classname="src/core/geminiChat.test.ts" name="GeminiChat &gt; sendMessageStream &gt; should succeed if the stream ends with an invalid part but has a finishReason and contained a valid part" time="0.0015803">
        </testcase>
        <testcase classname="src/core/geminiChat.test.ts" name="GeminiChat &gt; sendMessageStream &gt; should consolidate subsequent text chunks after receiving an empty text chunk" time="0.0015192">
        </testcase>
        <testcase classname="src/core/geminiChat.test.ts" name="GeminiChat &gt; sendMessageStream &gt; should consolidate adjacent text parts that arrive in separate stream chunks" time="0.0013264">
        </testcase>
        <testcase classname="src/core/geminiChat.test.ts" name="GeminiChat &gt; sendMessageStream &gt; should preserve text parts that stream in the same chunk as a thought" time="0.0016707">
        </testcase>
        <testcase classname="src/core/geminiChat.test.ts" name="GeminiChat &gt; sendMessageStream &gt; should throw an error when a tool call is followed by an empty stream response" time="0.5180926">
        </testcase>
        <testcase classname="src/core/geminiChat.test.ts" name="GeminiChat &gt; sendMessageStream &gt; should succeed when there is a tool call without finish reason" time="0.0014938">
        </testcase>
        <testcase classname="src/core/geminiChat.test.ts" name="GeminiChat &gt; sendMessageStream &gt; should throw InvalidStreamError when no tool call and no finish reason" time="0.5143996">
        </testcase>
        <testcase classname="src/core/geminiChat.test.ts" name="GeminiChat &gt; sendMessageStream &gt; should throw InvalidStreamError when no tool call and empty response text" time="0.5186995">
        </testcase>
        <testcase classname="src/core/geminiChat.test.ts" name="GeminiChat &gt; sendMessageStream &gt; should succeed when there is finish reason and response text" time="0.0016091">
        </testcase>
        <testcase classname="src/core/geminiChat.test.ts" name="GeminiChat &gt; sendMessageStream &gt; should call generateContentStream with the correct parameters" time="0.0044109">
        </testcase>
        <testcase classname="src/core/geminiChat.test.ts" name="GeminiChat &gt; addHistory &gt; should add a new content item to the history" time="0.0011863">
        </testcase>
        <testcase classname="src/core/geminiChat.test.ts" name="GeminiChat &gt; addHistory &gt; should add multiple items correctly" time="0.0015949">
        </testcase>
        <testcase classname="src/core/geminiChat.test.ts" name="GeminiChat &gt; sendMessageStream with retries &gt; should yield a RETRY event when an invalid stream is encountered" time="0.5089152">
        </testcase>
        <testcase classname="src/core/geminiChat.test.ts" name="GeminiChat &gt; sendMessageStream with retries &gt; should retry on invalid content, succeed, and report metrics" time="0.5185826">
        </testcase>
        <testcase classname="src/core/geminiChat.test.ts" name="GeminiChat &gt; sendMessageStream with retries &gt; should fail after all retries on persistent invalid content and report metrics" time="0.5158958">
        </testcase>
        <testcase classname="src/core/geminiChat.test.ts" name="GeminiChat &gt; should correctly retry and append to an existing history mid-conversation" time="0.5181567">
        </testcase>
        <testcase classname="src/core/geminiChat.test.ts" name="GeminiChat &gt; should retry if the model returns a completely empty stream (no chunks)" time="0.5122208">
        </testcase>
        <testcase classname="src/core/geminiChat.test.ts" name="GeminiChat &gt; should queue a subsequent sendMessageStream call until the first stream is fully consumed" time="0.0025624">
        </testcase>
        <testcase classname="src/core/geminiChat.test.ts" name="GeminiChat &gt; stopBeforeSecondMutator &gt; should stop streaming before a second mutator tool call" time="0.0020683">
        </testcase>
        <testcase classname="src/core/geminiChat.test.ts" name="GeminiChat &gt; stopBeforeSecondMutator &gt; should not stop streaming if only one mutator is present" time="0.0015717">
        </testcase>
        <testcase classname="src/core/geminiChat.test.ts" name="GeminiChat &gt; stopBeforeSecondMutator &gt; should clip the chunk containing the second mutator, preserving prior parts" time="0.0020436">
        </testcase>
        <testcase classname="src/core/geminiChat.test.ts" name="GeminiChat &gt; stopBeforeSecondMutator &gt; should handle two mutators in the same chunk (parallel call scenario)" time="0.0021951">
        </testcase>
        <testcase classname="src/core/geminiChat.test.ts" name="GeminiChat &gt; Model Resolution &gt; should use the FLASH model when in fallback mode (sendMessageStream)" time="0.0042091">
        </testcase>
        <testcase classname="src/core/geminiChat.test.ts" name="GeminiChat &gt; Fallback Integration (Retries) &gt; should call handleFallback with the specific failed model and retry if handler returns true" time="0.0028936">
        </testcase>
        <testcase classname="src/core/geminiChat.test.ts" name="GeminiChat &gt; Fallback Integration (Retries) &gt; should stop retrying if handleFallback returns false (e.g., auth intent)" time="0.0016552">
        </testcase>
        <testcase classname="src/core/geminiChat.test.ts" name="GeminiChat &gt; should discard valid partial content from a failed attempt upon retry" time="0.5431917">
        </testcase>
        <testcase classname="src/core/geminiChat.test.ts" name="GeminiChat &gt; stripThoughtsFromHistory &gt; should strip thought signatures" time="0.0049576">
        </testcase>
    </testsuite>
    <testsuite name="src/core/logger.test.ts" timestamp="2025-09-23T13:26:52.040Z" hostname="WIN-33AANMPCPKN" tests="38" failures="0" errors="0" skipped="0" time="0.6679907">
        <testcase classname="src/core/logger.test.ts" name="Logger &gt; initialize &gt; should create .gemini directory and an empty log file if none exist" time="0.0201109">
        </testcase>
        <testcase classname="src/core/logger.test.ts" name="Logger &gt; initialize &gt; should load existing logs and set correct messageId for the current session" time="0.0058562">
        </testcase>
        <testcase classname="src/core/logger.test.ts" name="Logger &gt; initialize &gt; should set messageId to 0 for a new session if log file exists but has no logs for current session" time="0.003928">
        </testcase>
        <testcase classname="src/core/logger.test.ts" name="Logger &gt; initialize &gt; should be idempotent" time="0.0081988">
        </testcase>
        <testcase classname="src/core/logger.test.ts" name="Logger &gt; initialize &gt; should handle invalid JSON in log file by backing it up and starting fresh" time="0.0148054">
        </testcase>
        <testcase classname="src/core/logger.test.ts" name="Logger &gt; initialize &gt; should handle non-array JSON in log file by backing it up and starting fresh" time="0.0050032">
        </testcase>
        <testcase classname="src/core/logger.test.ts" name="Logger &gt; logMessage &gt; should append a message to the log file and update in-memory logs" time="0.005157">
        </testcase>
        <testcase classname="src/core/logger.test.ts" name="Logger &gt; logMessage &gt; should correctly increment messageId for subsequent messages in the same session" time="0.004936">
        </testcase>
        <testcase classname="src/core/logger.test.ts" name="Logger &gt; logMessage &gt; should handle logger not initialized" time="0.0027484">
        </testcase>
        <testcase classname="src/core/logger.test.ts" name="Logger &gt; logMessage &gt; should simulate concurrent writes from different logger instances to the same file" time="0.0287882">
        </testcase>
        <testcase classname="src/core/logger.test.ts" name="Logger &gt; logMessage &gt; should not throw, not increment messageId, and log error if writing to file fails" time="0.008281">
        </testcase>
        <testcase classname="src/core/logger.test.ts" name="Logger &gt; getPreviousUserMessages &gt; should retrieve all user messages from logs, sorted newest first" time="0.0874127">
        </testcase>
        <testcase classname="src/core/logger.test.ts" name="Logger &gt; getPreviousUserMessages &gt; should return empty array if no user messages exist" time="0.0741269">
        </testcase>
        <testcase classname="src/core/logger.test.ts" name="Logger &gt; getPreviousUserMessages &gt; should return empty array if logger not initialized" time="0.1237043">
        </testcase>
        <testcase classname="src/core/logger.test.ts" name="Logger &gt; saveCheckpoint &gt; should save a checkpoint" time="0.0446189">
        </testcase>
        <testcase classname="src/core/logger.test.ts" name="Logger &gt; saveCheckpoint &gt; should save a checkpoint" time="0.0085222">
        </testcase>
        <testcase classname="src/core/logger.test.ts" name="Logger &gt; saveCheckpoint &gt; should save a checkpoint" time="0.0062577">
        </testcase>
        <testcase classname="src/core/logger.test.ts" name="Logger &gt; saveCheckpoint &gt; should save a checkpoint" time="0.0035136">
        </testcase>
        <testcase classname="src/core/logger.test.ts" name="Logger &gt; saveCheckpoint &gt; should not throw if logger is not initialized" time="0.0372242">
        </testcase>
        <testcase classname="src/core/logger.test.ts" name="Logger &gt; loadCheckpoint &gt; should load from a checkpoint" time="0.0484429">
        </testcase>
        <testcase classname="src/core/logger.test.ts" name="Logger &gt; loadCheckpoint &gt; should load from a checkpoint" time="0.0304866">
        </testcase>
        <testcase classname="src/core/logger.test.ts" name="Logger &gt; loadCheckpoint &gt; should load from a checkpoint" time="0.0250459">
        </testcase>
        <testcase classname="src/core/logger.test.ts" name="Logger &gt; loadCheckpoint &gt; should load from a checkpoint" time="0.005452">
        </testcase>
        <testcase classname="src/core/logger.test.ts" name="Logger &gt; loadCheckpoint &gt; should return an empty array if a tagged checkpoint file does not exist" time="0.0041906">
        </testcase>
        <testcase classname="src/core/logger.test.ts" name="Logger &gt; loadCheckpoint &gt; should return an empty array if the checkpoint file does not exist" time="0.0056487">
        </testcase>
        <testcase classname="src/core/logger.test.ts" name="Logger &gt; loadCheckpoint &gt; should return an empty array if the file contains invalid JSON" time="0.0045379">
        </testcase>
        <testcase classname="src/core/logger.test.ts" name="Logger &gt; loadCheckpoint &gt; should return an empty array if logger is not initialized" time="0.0038354">
        </testcase>
        <testcase classname="src/core/logger.test.ts" name="Logger &gt; deleteCheckpoint &gt; should delete the specified checkpoint file and return true" time="0.0067712">
        </testcase>
        <testcase classname="src/core/logger.test.ts" name="Logger &gt; deleteCheckpoint &gt; should delete both new and old checkpoint files if they exist" time="0.0059632">
        </testcase>
        <testcase classname="src/core/logger.test.ts" name="Logger &gt; deleteCheckpoint &gt; should return false if the checkpoint file does not exist" time="0.0036413">
        </testcase>
        <testcase classname="src/core/logger.test.ts" name="Logger &gt; deleteCheckpoint &gt; should re-throw an error if file deletion fails for reasons other than not existing" time="0.0036976">
        </testcase>
        <testcase classname="src/core/logger.test.ts" name="Logger &gt; deleteCheckpoint &gt; should return false if logger is not initialized" time="0.0049308">
        </testcase>
        <testcase classname="src/core/logger.test.ts" name="Logger &gt; checkpointExists &gt; should return true if the checkpoint file exists" time="0.0035264">
        </testcase>
        <testcase classname="src/core/logger.test.ts" name="Logger &gt; checkpointExists &gt; should return false if the checkpoint file does not exist" time="0.0029146">
        </testcase>
        <testcase classname="src/core/logger.test.ts" name="Logger &gt; checkpointExists &gt; should throw an error if logger is not initialized" time="0.0024336">
        </testcase>
        <testcase classname="src/core/logger.test.ts" name="Logger &gt; checkpointExists &gt; should re-throw an error if fs.access fails for reasons other than not existing" time="0.0032824">
        </testcase>
        <testcase classname="src/core/logger.test.ts" name="Logger &gt; Backward compatibility &gt; should load from a checkpoint with a raw special character tag" time="0.0040296">
        </testcase>
        <testcase classname="src/core/logger.test.ts" name="Logger &gt; close &gt; should reset logger state" time="0.0029168">
        </testcase>
    </testsuite>
    <testsuite name="src/core/nonInteractiveToolExecutor.test.ts" timestamp="2025-09-23T13:26:52.045Z" hostname="WIN-33AANMPCPKN" tests="8" failures="0" errors="0" skipped="0" time="0.0423227">
        <testcase classname="src/core/nonInteractiveToolExecutor.test.ts" name="executeToolCall &gt; should execute a tool successfully" time="0.0332158">
        </testcase>
        <testcase classname="src/core/nonInteractiveToolExecutor.test.ts" name="executeToolCall &gt; should return an error if tool is not found" time="0.0009914">
        </testcase>
        <testcase classname="src/core/nonInteractiveToolExecutor.test.ts" name="executeToolCall &gt; should return an error if tool validation fails" time="0.000619">
        </testcase>
        <testcase classname="src/core/nonInteractiveToolExecutor.test.ts" name="executeToolCall &gt; should return an error if tool execution fails" time="0.0017142">
        </testcase>
        <testcase classname="src/core/nonInteractiveToolExecutor.test.ts" name="executeToolCall &gt; should return an unhandled exception error if execution throws" time="0.0016897">
        </testcase>
        <testcase classname="src/core/nonInteractiveToolExecutor.test.ts" name="executeToolCall &gt; should correctly format llmContent with inlineData" time="0.00102">
        </testcase>
        <testcase classname="src/core/nonInteractiveToolExecutor.test.ts" name="executeToolCall &gt; should calculate contentLength for a string llmContent" time="0.0009365">
        </testcase>
        <testcase classname="src/core/nonInteractiveToolExecutor.test.ts" name="executeToolCall &gt; should have undefined contentLength for array llmContent with no string parts" time="0.0008191">
        </testcase>
    </testsuite>
    <testsuite name="src/core/prompts.test.ts" timestamp="2025-09-23T13:26:52.046Z" hostname="WIN-33AANMPCPKN" tests="36" failures="0" errors="0" skipped="0" time="0.0437877">
        <testcase classname="src/core/prompts.test.ts" name="Core System Prompt (prompts.ts) &gt; should return the base prompt when no userMemory is provided" time="0.0056637">
        </testcase>
        <testcase classname="src/core/prompts.test.ts" name="Core System Prompt (prompts.ts) &gt; should return the base prompt when userMemory is empty string" time="0.0009995">
        </testcase>
        <testcase classname="src/core/prompts.test.ts" name="Core System Prompt (prompts.ts) &gt; should return the base prompt when userMemory is whitespace only" time="0.0005648">
        </testcase>
        <testcase classname="src/core/prompts.test.ts" name="Core System Prompt (prompts.ts) &gt; should append userMemory with separator when provided" time="0.0006035">
        </testcase>
        <testcase classname="src/core/prompts.test.ts" name="Core System Prompt (prompts.ts) &gt; should include sandbox-specific instructions when SANDBOX env var is set" time="0.0005541">
        </testcase>
        <testcase classname="src/core/prompts.test.ts" name="Core System Prompt (prompts.ts) &gt; should include seatbelt-specific instructions when SANDBOX env var is &quot;sandbox-exec&quot;" time="0.0007435">
        </testcase>
        <testcase classname="src/core/prompts.test.ts" name="Core System Prompt (prompts.ts) &gt; should include non-sandbox instructions when SANDBOX env var is not set" time="0.000488">
        </testcase>
        <testcase classname="src/core/prompts.test.ts" name="Core System Prompt (prompts.ts) &gt; should include git instructions when in a git repo" time="0.000408">
        </testcase>
        <testcase classname="src/core/prompts.test.ts" name="Core System Prompt (prompts.ts) &gt; should not include git instructions when not in a git repo" time="0.0003742">
        </testcase>
        <testcase classname="src/core/prompts.test.ts" name="Core System Prompt (prompts.ts) &gt; GEMINI_SYSTEM_MD environment variable &gt; should use default prompt when GEMINI_SYSTEM_MD is &quot;false&quot;" time="0.0006315">
        </testcase>
        <testcase classname="src/core/prompts.test.ts" name="Core System Prompt (prompts.ts) &gt; GEMINI_SYSTEM_MD environment variable &gt; should use default prompt when GEMINI_SYSTEM_MD is &quot;0&quot;" time="0.0005076">
        </testcase>
        <testcase classname="src/core/prompts.test.ts" name="Core System Prompt (prompts.ts) &gt; GEMINI_SYSTEM_MD environment variable &gt; should throw error if GEMINI_SYSTEM_MD points to a non-existent file" time="0.0014357">
        </testcase>
        <testcase classname="src/core/prompts.test.ts" name="Core System Prompt (prompts.ts) &gt; GEMINI_SYSTEM_MD environment variable &gt; should read from default path when GEMINI_SYSTEM_MD is &quot;true&quot;" time="0.0024404">
        </testcase>
        <testcase classname="src/core/prompts.test.ts" name="Core System Prompt (prompts.ts) &gt; GEMINI_SYSTEM_MD environment variable &gt; should read from default path when GEMINI_SYSTEM_MD is &quot;1&quot;" time="0.0006954">
        </testcase>
        <testcase classname="src/core/prompts.test.ts" name="Core System Prompt (prompts.ts) &gt; GEMINI_SYSTEM_MD environment variable &gt; should read from custom path when GEMINI_SYSTEM_MD provides one, preserving case" time="0.0166562">
        </testcase>
        <testcase classname="src/core/prompts.test.ts" name="Core System Prompt (prompts.ts) &gt; GEMINI_SYSTEM_MD environment variable &gt; should expand tilde in custom path when GEMINI_SYSTEM_MD is set" time="0.0013125">
        </testcase>
        <testcase classname="src/core/prompts.test.ts" name="Core System Prompt (prompts.ts) &gt; GEMINI_WRITE_SYSTEM_MD environment variable &gt; should not write to file when GEMINI_WRITE_SYSTEM_MD is &quot;false&quot;" time="0.0005337">
        </testcase>
        <testcase classname="src/core/prompts.test.ts" name="Core System Prompt (prompts.ts) &gt; GEMINI_WRITE_SYSTEM_MD environment variable &gt; should not write to file when GEMINI_WRITE_SYSTEM_MD is &quot;0&quot;" time="0.0003314">
        </testcase>
        <testcase classname="src/core/prompts.test.ts" name="Core System Prompt (prompts.ts) &gt; GEMINI_WRITE_SYSTEM_MD environment variable &gt; should write to default path when GEMINI_WRITE_SYSTEM_MD is &quot;true&quot;" time="0.0013981">
        </testcase>
        <testcase classname="src/core/prompts.test.ts" name="Core System Prompt (prompts.ts) &gt; GEMINI_WRITE_SYSTEM_MD environment variable &gt; should write to default path when GEMINI_WRITE_SYSTEM_MD is &quot;1&quot;" time="0.0004924">
        </testcase>
        <testcase classname="src/core/prompts.test.ts" name="Core System Prompt (prompts.ts) &gt; GEMINI_WRITE_SYSTEM_MD environment variable &gt; should write to custom path when GEMINI_WRITE_SYSTEM_MD provides one" time="0.00039">
        </testcase>
        <testcase classname="src/core/prompts.test.ts" name="Core System Prompt (prompts.ts) &gt; GEMINI_WRITE_SYSTEM_MD environment variable &gt; should expand tilde in custom path when GEMINI_WRITE_SYSTEM_MD is set" time="0.0005148">
        </testcase>
        <testcase classname="src/core/prompts.test.ts" name="Core System Prompt (prompts.ts) &gt; GEMINI_WRITE_SYSTEM_MD environment variable &gt; should expand tilde in custom path when GEMINI_WRITE_SYSTEM_MD is just ~" time="0.0004206">
        </testcase>
        <testcase classname="src/core/prompts.test.ts" name="resolvePathFromEnv helper function &gt; when envVar is undefined, empty, or whitespace &gt; should return null for undefined" time="0.0004647">
        </testcase>
        <testcase classname="src/core/prompts.test.ts" name="resolvePathFromEnv helper function &gt; when envVar is undefined, empty, or whitespace &gt; should return null for empty string" time="0.0002312">
        </testcase>
        <testcase classname="src/core/prompts.test.ts" name="resolvePathFromEnv helper function &gt; when envVar is undefined, empty, or whitespace &gt; should return null for whitespace only" time="0.0002034">
        </testcase>
        <testcase classname="src/core/prompts.test.ts" name="resolvePathFromEnv helper function &gt; when envVar is a boolean-like string &gt; should handle &quot;0&quot; as disabled switch" time="0.0002143">
        </testcase>
        <testcase classname="src/core/prompts.test.ts" name="resolvePathFromEnv helper function &gt; when envVar is a boolean-like string &gt; should handle &quot;false&quot; as disabled switch" time="0.0001969">
        </testcase>
        <testcase classname="src/core/prompts.test.ts" name="resolvePathFromEnv helper function &gt; when envVar is a boolean-like string &gt; should handle &quot;1&quot; as enabled switch" time="0.0001945">
        </testcase>
        <testcase classname="src/core/prompts.test.ts" name="resolvePathFromEnv helper function &gt; when envVar is a boolean-like string &gt; should handle &quot;true&quot; as enabled switch" time="0.0001911">
        </testcase>
        <testcase classname="src/core/prompts.test.ts" name="resolvePathFromEnv helper function &gt; when envVar is a boolean-like string &gt; should be case-insensitive for boolean values" time="0.0002294">
        </testcase>
        <testcase classname="src/core/prompts.test.ts" name="resolvePathFromEnv helper function &gt; when envVar is a file path &gt; should resolve absolute paths" time="0.0002201">
        </testcase>
        <testcase classname="src/core/prompts.test.ts" name="resolvePathFromEnv helper function &gt; when envVar is a file path &gt; should resolve relative paths" time="0.0002096">
        </testcase>
        <testcase classname="src/core/prompts.test.ts" name="resolvePathFromEnv helper function &gt; when envVar is a file path &gt; should expand tilde to home directory" time="0.0003077">
        </testcase>
        <testcase classname="src/core/prompts.test.ts" name="resolvePathFromEnv helper function &gt; when envVar is a file path &gt; should handle standalone tilde" time="0.0002633">
        </testcase>
        <testcase classname="src/core/prompts.test.ts" name="resolvePathFromEnv helper function &gt; when envVar is a file path &gt; should handle os.homedir() errors gracefully" time="0.0005462">
        </testcase>
    </testsuite>
    <testsuite name="src/core/subagent.test.ts" timestamp="2025-09-23T13:26:52.050Z" hostname="WIN-33AANMPCPKN" tests="19" failures="0" errors="0" skipped="0" time="1.6301378">
        <testcase classname="src/core/subagent.test.ts" name="subagent.ts &gt; ContextState &gt; should set and get values correctly" time="0.002564">
        </testcase>
        <testcase classname="src/core/subagent.test.ts" name="subagent.ts &gt; ContextState &gt; should return undefined for missing keys" time="0.000188">
        </testcase>
        <testcase classname="src/core/subagent.test.ts" name="subagent.ts &gt; SubAgentScope &gt; create (Tool Validation) &gt; should create a SubAgentScope successfully with minimal config" time="0.3477213">
            <system-out>
File C:\Users\alroh\.cache/vscode-ripgrep/ripgrep-v13.0.0-10-i686-pc-windows-msvc.zip has been cached

            </system-out>
        </testcase>
        <testcase classname="src/core/subagent.test.ts" name="subagent.ts &gt; SubAgentScope &gt; create (Tool Validation) &gt; should throw an error if a tool requires confirmation" time="0.4234695">
            <system-out>
File C:\Users\alroh\.cache/vscode-ripgrep/ripgrep-v13.0.0-10-i686-pc-windows-msvc.zip has been cached

            </system-out>
        </testcase>
        <testcase classname="src/core/subagent.test.ts" name="subagent.ts &gt; SubAgentScope &gt; create (Tool Validation) &gt; should succeed if tools do not require confirmation" time="0.0680171">
            <system-out>
File C:\Users\alroh\.cache/vscode-ripgrep/ripgrep-v13.0.0-10-i686-pc-windows-msvc.zip has been cached

            </system-out>
        </testcase>
        <testcase classname="src/core/subagent.test.ts" name="subagent.ts &gt; SubAgentScope &gt; create (Tool Validation) &gt; should skip interactivity check and warn for tools with required parameters" time="0.124305">
            <system-out>
File C:\Users\alroh\.cache/vscode-ripgrep/ripgrep-v13.0.0-10-i686-pc-windows-msvc.zip has been cached

            </system-out>
        </testcase>
        <testcase classname="src/core/subagent.test.ts" name="subagent.ts &gt; SubAgentScope &gt; runNonInteractive - Initialization and Prompting &gt; should correctly template the system prompt and initialize GeminiChat" time="0.1350141">
            <system-out>
File C:\Users\alroh\.cache/vscode-ripgrep/ripgrep-v13.0.0-10-i686-pc-windows-msvc.zip has been cached

            </system-out>
        </testcase>
        <testcase classname="src/core/subagent.test.ts" name="subagent.ts &gt; SubAgentScope &gt; runNonInteractive - Initialization and Prompting &gt; should include output instructions in the system prompt when outputs are defined" time="0.038551">
            <system-out>
File C:\Users\alroh\.cache/vscode-ripgrep/ripgrep-v13.0.0-10-i686-pc-windows-msvc.zip has been cached

You have stopped calling tools but have not emitted the following required variables: result1. Please use the &apos;self.emitvalue&apos; tool to emit them now, or continue working if necessary.

You have stopped calling tools but have not emitted the following required variables: result1. Please use the &apos;self.emitvalue&apos; tool to emit them now, or continue working if necessary.

You have stopped calling tools but have not emitted the following required variables: result1. Please use the &apos;self.emitvalue&apos; tool to emit them now, or continue working if necessary.

You have stopped calling tools but have not emitted the following required variables: result1. Please use the &apos;self.emitvalue&apos; tool to emit them now, or continue working if necessary.

You have stopped calling tools but have not emitted the following required variables: result1. Please use the &apos;self.emitvalue&apos; tool to emit them now, or continue working if necessary.

You have stopped calling tools but have not emitted the following required variables: result1. Please use the &apos;self.emitvalue&apos; tool to emit them now, or continue working if necessary.

You have stopped calling tools but have not emitted the following required variables: result1. Please use the &apos;self.emitvalue&apos; tool to emit them now, or continue working if necessary.

You have stopped calling tools but have not emitted the following required variables: result1. Please use the &apos;self.emitvalue&apos; tool to emit them now, or continue working if necessary.

You have stopped calling tools but have not emitted the following required variables: result1. Please use the &apos;self.emitvalue&apos; tool to emit them now, or continue working if necessary.

You have stopped calling tools but have not emitted the following required variables: result1. Please use the &apos;self.emitvalue&apos; tool to emit them now, or continue working if necessary.

            </system-out>
        </testcase>
        <testcase classname="src/core/subagent.test.ts" name="subagent.ts &gt; SubAgentScope &gt; runNonInteractive - Initialization and Prompting &gt; should use initialMessages instead of systemPrompt if provided" time="0.0559234">
            <system-out>
File C:\Users\alroh\.cache/vscode-ripgrep/ripgrep-v13.0.0-10-i686-pc-windows-msvc.zip has been cached

            </system-out>
        </testcase>
        <testcase classname="src/core/subagent.test.ts" name="subagent.ts &gt; SubAgentScope &gt; runNonInteractive - Initialization and Prompting &gt; should throw an error if template variables are missing" time="0.0518272">
            <system-out>
File C:\Users\alroh\.cache/vscode-ripgrep/ripgrep-v13.0.0-10-i686-pc-windows-msvc.zip has been cached

            </system-out>
            <system-err>
Error during subagent execution: Error: Missing context values for the following keys: missing
    at templateString [90m(E:\claude-code\pipedream\modelcontextprotocol\agentrpc\gemini-cli\packages\core\[39msrc\core\subagent.ts:221:11[90m)[39m
    at SubAgentScope.buildChatSystemPrompt [90m(E:\claude-code\pipedream\modelcontextprotocol\agentrpc\gemini-cli\packages\core\[39msrc\core\subagent.ts:709:23[90m)[39m
    at SubAgentScope.createChatObject [90m(E:\claude-code\pipedream\modelcontextprotocol\agentrpc\gemini-cli\packages\core\[39msrc\core\subagent.ts:634:14[90m)[39m
    at SubAgentScope.runNonInteractive [90m(E:\claude-code\pipedream\modelcontextprotocol\agentrpc\gemini-cli\packages\core\[39msrc\core\subagent.ts:371:20[90m)[39m

            </system-err>
        </testcase>
        <testcase classname="src/core/subagent.test.ts" name="subagent.ts &gt; SubAgentScope &gt; runNonInteractive - Initialization and Prompting &gt; should validate that systemPrompt and initialMessages are mutually exclusive" time="0.042661">
            <system-out>
File C:\Users\alroh\.cache/vscode-ripgrep/ripgrep-v13.0.0-10-i686-pc-windows-msvc.zip has been cached

            </system-out>
            <system-err>
Error during subagent execution: Error: PromptConfig cannot have both `systemPrompt` and `initialMessages` defined.
    at SubAgentScope.createChatObject [90m(E:\claude-code\pipedream\modelcontextprotocol\agentrpc\gemini-cli\packages\core\[39msrc\core\subagent.ts:617:13[90m)[39m
    at SubAgentScope.runNonInteractive [90m(E:\claude-code\pipedream\modelcontextprotocol\agentrpc\gemini-cli\packages\core\[39msrc\core\subagent.ts:371:31[90m)[39m
    at [90mE:\claude-code\pipedream\modelcontextprotocol\agentrpc\gemini-cli\packages\core\[39msrc\core\subagent.test.ts:474:28
    at file:///E:/claude-code/pipedream/modelcontextprotocol/agentrpc/gemini-cli/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:752:20

            </system-err>
        </testcase>
        <testcase classname="src/core/subagent.test.ts" name="subagent.ts &gt; SubAgentScope &gt; runNonInteractive - Execution and Tool Use &gt; should terminate with GOAL if no outputs are expected and model stops" time="0.0430583">
            <system-out>
File C:\Users\alroh\.cache/vscode-ripgrep/ripgrep-v13.0.0-10-i686-pc-windows-msvc.zip has been cached

            </system-out>
        </testcase>
        <testcase classname="src/core/subagent.test.ts" name="subagent.ts &gt; SubAgentScope &gt; runNonInteractive - Execution and Tool Use &gt; should handle self.emitvalue and terminate with GOAL when outputs are met" time="0.0675425">
            <system-out>
File C:\Users\alroh\.cache/vscode-ripgrep/ripgrep-v13.0.0-10-i686-pc-windows-msvc.zip has been cached

            </system-out>
        </testcase>
        <testcase classname="src/core/subagent.test.ts" name="subagent.ts &gt; SubAgentScope &gt; runNonInteractive - Execution and Tool Use &gt; should execute external tools and provide the response to the model" time="0.0555366">
            <system-out>
File C:\Users\alroh\.cache/vscode-ripgrep/ripgrep-v13.0.0-10-i686-pc-windows-msvc.zip has been cached

            </system-out>
        </testcase>
        <testcase classname="src/core/subagent.test.ts" name="subagent.ts &gt; SubAgentScope &gt; runNonInteractive - Execution and Tool Use &gt; should provide specific tool error responses to the model" time="0.0532643">
            <system-out>
File C:\Users\alroh\.cache/vscode-ripgrep/ripgrep-v13.0.0-10-i686-pc-windows-msvc.zip has been cached

            </system-out>
            <system-err>
Error executing tool failing_tool: Tool failed catastrophically

            </system-err>
        </testcase>
        <testcase classname="src/core/subagent.test.ts" name="subagent.ts &gt; SubAgentScope &gt; runNonInteractive - Execution and Tool Use &gt; should nudge the model if it stops before emitting all required variables" time="0.0362285">
            <system-out>
File C:\Users\alroh\.cache/vscode-ripgrep/ripgrep-v13.0.0-10-i686-pc-windows-msvc.zip has been cached

You have stopped calling tools but have not emitted the following required variables: required_var. Please use the &apos;self.emitvalue&apos; tool to emit them now, or continue working if necessary.

            </system-out>
        </testcase>
        <testcase classname="src/core/subagent.test.ts" name="subagent.ts &gt; SubAgentScope &gt; runNonInteractive - Termination and Recovery &gt; should terminate with MAX_TURNS if the limit is reached" time="0.045252">
            <system-out>
File C:\Users\alroh\.cache/vscode-ripgrep/ripgrep-v13.0.0-10-i686-pc-windows-msvc.zip has been cached

            </system-out>
        </testcase>
        <testcase classname="src/core/subagent.test.ts" name="subagent.ts &gt; SubAgentScope &gt; runNonInteractive - Termination and Recovery &gt; should terminate with TIMEOUT if the time limit is reached during an LLM call" time="0.0283889">
        </testcase>
        <testcase classname="src/core/subagent.test.ts" name="subagent.ts &gt; SubAgentScope &gt; runNonInteractive - Termination and Recovery &gt; should terminate with ERROR if the model call throws" time="0.0030335">
            <system-err>
Error during subagent execution: Error: API Failure
    at [90mE:\claude-code\pipedream\modelcontextprotocol\agentrpc\gemini-cli\packages\core\[39msrc\core\subagent.test.ts:818:49
    at file:///E:/claude-code/pipedream/modelcontextprotocol/agentrpc/gemini-cli/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:752:20

            </system-err>
        </testcase>
    </testsuite>
    <testsuite name="src/core/turn.test.ts" timestamp="2025-09-23T13:26:52.054Z" hostname="WIN-33AANMPCPKN" tests="18" failures="0" errors="0" skipped="0" time="0.0117621">
        <testcase classname="src/core/turn.test.ts" name="Turn &gt; constructor &gt; should initialize pendingToolCalls and debugResponses" time="0.0020389">
        </testcase>
        <testcase classname="src/core/turn.test.ts" name="Turn &gt; run &gt; should yield content events for text parts" time="0.0027338">
        </testcase>
        <testcase classname="src/core/turn.test.ts" name="Turn &gt; run &gt; should yield tool_call_request events for function calls" time="0.0007944">
        </testcase>
        <testcase classname="src/core/turn.test.ts" name="Turn &gt; run &gt; should yield UserCancelled event if signal is aborted" time="0.0006374">
        </testcase>
        <testcase classname="src/core/turn.test.ts" name="Turn &gt; run &gt; should yield Error event and report if sendMessageStream throws" time="0.0007368">
        </testcase>
        <testcase classname="src/core/turn.test.ts" name="Turn &gt; run &gt; should handle function calls with undefined name or args" time="0.000862">
        </testcase>
        <testcase classname="src/core/turn.test.ts" name="Turn &gt; run &gt; should yield finished event when response has finish reason" time="0.0002472">
        </testcase>
        <testcase classname="src/core/turn.test.ts" name="Turn &gt; run &gt; should yield finished event for MAX_TOKENS finish reason" time="0.0001991">
        </testcase>
        <testcase classname="src/core/turn.test.ts" name="Turn &gt; run &gt; should yield finished event for SAFETY finish reason" time="0.000274">
        </testcase>
        <testcase classname="src/core/turn.test.ts" name="Turn &gt; run &gt; should yield finished event with undefined reason when there is no finish reason" time="0.0001639">
        </testcase>
        <testcase classname="src/core/turn.test.ts" name="Turn &gt; run &gt; should handle multiple responses with different finish reasons" time="0.0002084">
        </testcase>
        <testcase classname="src/core/turn.test.ts" name="Turn &gt; run &gt; should yield citation and finished events when response has citationMetadata" time="0.0002337">
        </testcase>
        <testcase classname="src/core/turn.test.ts" name="Turn &gt; run &gt; should yield a single citation event for multiple citations in one response" time="0.000197">
        </testcase>
        <testcase classname="src/core/turn.test.ts" name="Turn &gt; run &gt; should not yield citation event if there is no finish reason" time="0.0002006">
        </testcase>
        <testcase classname="src/core/turn.test.ts" name="Turn &gt; run &gt; should ignore citations without a URI" time="0.0001896">
        </testcase>
        <testcase classname="src/core/turn.test.ts" name="Turn &gt; run &gt; should not crash when cancelled request has malformed error" time="0.0003249">
        </testcase>
        <testcase classname="src/core/turn.test.ts" name="Turn &gt; run &gt; should yield a Retry event when it receives one from the chat stream" time="0.0001847">
        </testcase>
        <testcase classname="src/core/turn.test.ts" name="Turn &gt; getDebugResponses &gt; should return collected debug responses" time="0.0001806">
        </testcase>
    </testsuite>
    <testsuite name="src/fallback/handler.test.ts" timestamp="2025-09-23T13:26:52.056Z" hostname="WIN-33AANMPCPKN" tests="10" failures="0" errors="0" skipped="0" time="0.0081171">
        <testcase classname="src/fallback/handler.test.ts" name="handleFallback &gt; should return null immediately if authType is not OAuth" time="0.002137">
        </testcase>
        <testcase classname="src/fallback/handler.test.ts" name="handleFallback &gt; should return null if the failed model is already the fallback model" time="0.0003503">
        </testcase>
        <testcase classname="src/fallback/handler.test.ts" name="handleFallback &gt; should return null if no fallbackHandler is injected in config" time="0.0002009">
        </testcase>
        <testcase classname="src/fallback/handler.test.ts" name="handleFallback &gt; when handler returns &quot;retry&quot; &gt; should activate fallback mode, log telemetry, and return true" time="0.0014615">
        </testcase>
        <testcase classname="src/fallback/handler.test.ts" name="handleFallback &gt; when handler returns &quot;stop&quot; &gt; should activate fallback mode, log telemetry, and return false" time="0.000323">
        </testcase>
        <testcase classname="src/fallback/handler.test.ts" name="handleFallback &gt; when handler returns &quot;auth&quot; &gt; should NOT activate fallback mode and return false" time="0.0002423">
        </testcase>
        <testcase classname="src/fallback/handler.test.ts" name="handleFallback &gt; when handler returns an unexpected value &gt; should log an error and return null" time="0.0006344">
        </testcase>
        <testcase classname="src/fallback/handler.test.ts" name="handleFallback &gt; should pass the correct context (failedModel, fallbackModel, error) to the handler" time="0.0004142">
        </testcase>
        <testcase classname="src/fallback/handler.test.ts" name="handleFallback &gt; should not call setFallbackMode or log telemetry if already in fallback mode" time="0.0003351">
        </testcase>
        <testcase classname="src/fallback/handler.test.ts" name="handleFallback &gt; should catch errors from the handler, log an error, and return null" time="0.0004747">
        </testcase>
    </testsuite>
    <testsuite name="src/ide/detect-ide.test.ts" timestamp="2025-09-23T13:26:52.058Z" hostname="WIN-33AANMPCPKN" tests="14" failures="0" errors="0" skipped="0" time="0.0060663">
        <testcase classname="src/ide/detect-ide.test.ts" name="detectIde &gt; should return undefined if TERM_PROGRAM is not vscode" time="0.0013778">
        </testcase>
        <testcase classname="src/ide/detect-ide.test.ts" name="detectIde &gt; should detect Devin" time="0.0003906">
        </testcase>
        <testcase classname="src/ide/detect-ide.test.ts" name="detectIde &gt; should detect Replit" time="0.000183">
        </testcase>
        <testcase classname="src/ide/detect-ide.test.ts" name="detectIde &gt; should detect Cursor" time="0.0001714">
        </testcase>
        <testcase classname="src/ide/detect-ide.test.ts" name="detectIde &gt; should detect Codespaces" time="0.0001763">
        </testcase>
        <testcase classname="src/ide/detect-ide.test.ts" name="detectIde &gt; should detect Cloud Shell via EDITOR_IN_CLOUD_SHELL" time="0.0001563">
        </testcase>
        <testcase classname="src/ide/detect-ide.test.ts" name="detectIde &gt; should detect Cloud Shell via CLOUD_SHELL" time="0.0001555">
        </testcase>
        <testcase classname="src/ide/detect-ide.test.ts" name="detectIde &gt; should detect Trae" time="0.0001723">
        </testcase>
        <testcase classname="src/ide/detect-ide.test.ts" name="detectIde &gt; should detect Firebase Studio via MONOSPACE_ENV" time="0.0002091">
        </testcase>
        <testcase classname="src/ide/detect-ide.test.ts" name="detectIde &gt; should detect VSCode when no other IDE is detected and command includes &quot;code&quot;" time="0.0002776">
        </testcase>
        <testcase classname="src/ide/detect-ide.test.ts" name="detectIde &gt; should detect VSCodeFork when no other IDE is detected and command does not include &quot;code&quot;" time="0.0001633">
        </testcase>
        <testcase classname="src/ide/detect-ide.test.ts" name="detectIde with ideInfoFromFile &gt; should use the name and displayName from the file" time="0.0006975">
        </testcase>
        <testcase classname="src/ide/detect-ide.test.ts" name="detectIde with ideInfoFromFile &gt; should fall back to env detection if name is missing" time="0.0003367">
        </testcase>
        <testcase classname="src/ide/detect-ide.test.ts" name="detectIde with ideInfoFromFile &gt; should fall back to env detection if displayName is missing" time="0.0001789">
        </testcase>
    </testsuite>
    <testsuite name="src/ide/ide-client.test.ts" timestamp="2025-09-23T13:26:52.062Z" hostname="WIN-33AANMPCPKN" tests="23" failures="0" errors="0" skipped="0" time="0.0598685">
        <testcase classname="src/ide/ide-client.test.ts" name="IdeClient &gt; connect &gt; should connect using HTTP when port is provided in config file" time="0.0132963">
            <system-out>
[DEBUG] [IDEClient] Attempting to connect to IDE via HTTP SSE

[DEBUG] [IDEClient] Discovering tools from IDE...

            </system-out>
            <system-err>
[ERROR] [IDEClient] Error discovering tools from IDE: Cannot read properties of undefined (reading &apos;tools&apos;)

            </system-err>
        </testcase>
        <testcase classname="src/ide/ide-client.test.ts" name="IdeClient &gt; connect &gt; should connect using stdio when stdio config is provided in file" time="0.0014231">
            <system-out>
[DEBUG] [IDEClient] Attempting to connect to IDE via stdio

[DEBUG] [IDEClient] Discovering tools from IDE...

            </system-out>
            <system-err>
[ERROR] [IDEClient] Error discovering tools from IDE: Cannot read properties of undefined (reading &apos;tools&apos;)

            </system-err>
        </testcase>
        <testcase classname="src/ide/ide-client.test.ts" name="IdeClient &gt; connect &gt; should prioritize port over stdio when both are in config file" time="0.002178">
            <system-out>
[DEBUG] [IDEClient] Attempting to connect to IDE via HTTP SSE

[DEBUG] [IDEClient] Discovering tools from IDE...

            </system-out>
            <system-err>
[ERROR] [IDEClient] Error discovering tools from IDE: Cannot read properties of undefined (reading &apos;tools&apos;)

            </system-err>
        </testcase>
        <testcase classname="src/ide/ide-client.test.ts" name="IdeClient &gt; connect &gt; should connect using HTTP when port is provided in environment variables" time="0.0014126">
            <system-out>
[DEBUG] [IDEClient] Attempting to connect to IDE via HTTP SSE

[DEBUG] [IDEClient] Discovering tools from IDE...

            </system-out>
            <system-err>
[ERROR] [IDEClient] Error discovering tools from IDE: Cannot read properties of undefined (reading &apos;tools&apos;)

            </system-err>
        </testcase>
        <testcase classname="src/ide/ide-client.test.ts" name="IdeClient &gt; connect &gt; should connect using stdio when stdio config is in environment variables" time="0.0011441">
            <system-out>
[DEBUG] [IDEClient] Attempting to connect to IDE via stdio

[DEBUG] [IDEClient] Discovering tools from IDE...

            </system-out>
            <system-err>
[ERROR] [IDEClient] Error discovering tools from IDE: Cannot read properties of undefined (reading &apos;tools&apos;)

            </system-err>
        </testcase>
        <testcase classname="src/ide/ide-client.test.ts" name="IdeClient &gt; connect &gt; should prioritize file config over environment variables" time="0.0010014">
            <system-out>
[DEBUG] [IDEClient] Attempting to connect to IDE via HTTP SSE

[DEBUG] [IDEClient] Discovering tools from IDE...

            </system-out>
            <system-err>
[ERROR] [IDEClient] Error discovering tools from IDE: Cannot read properties of undefined (reading &apos;tools&apos;)

            </system-err>
        </testcase>
        <testcase classname="src/ide/ide-client.test.ts" name="IdeClient &gt; connect &gt; should be disconnected if no config is found" time="0.0044167">
            <system-err>
[ERROR] [IDEClient] Failed to connect to IDE companion extension in VS Code. Please ensure the extension is running. To install the extension, run /ide install.

            </system-err>
        </testcase>
        <testcase classname="src/ide/ide-client.test.ts" name="IdeClient &gt; getConnectionConfigFromFile &gt; should return config from the specific pid file if it exists" time="0.0006673">
        </testcase>
        <testcase classname="src/ide/ide-client.test.ts" name="IdeClient &gt; getConnectionConfigFromFile &gt; should return undefined if no config files are found" time="0.0005033">
        </testcase>
        <testcase classname="src/ide/ide-client.test.ts" name="IdeClient &gt; getConnectionConfigFromFile &gt; should find and parse a single config file with the new naming scheme" time="0.0008532">
        </testcase>
        <testcase classname="src/ide/ide-client.test.ts" name="IdeClient &gt; getConnectionConfigFromFile &gt; should filter out configs with invalid workspace paths" time="0.0007089">
        </testcase>
        <testcase classname="src/ide/ide-client.test.ts" name="IdeClient &gt; getConnectionConfigFromFile &gt; should return the first valid config when multiple workspaces are valid" time="0.0004851">
        </testcase>
        <testcase classname="src/ide/ide-client.test.ts" name="IdeClient &gt; getConnectionConfigFromFile &gt; should prioritize the config matching the port from the environment variable" time="0.0005117">
        </testcase>
        <testcase classname="src/ide/ide-client.test.ts" name="IdeClient &gt; getConnectionConfigFromFile &gt; should handle invalid JSON in one of the config files" time="0.008851">
            <system-out>
[DEBUG] [IDEClient] Failed to parse JSON from config file:  SyntaxError: Unexpected token &apos;i&apos;, &quot;invalid json&quot; is not valid JSON
    at JSON.parse (&lt;anonymous&gt;)
    at E:\claude-code\pipedream\modelcontextprotocol\agentrpc\gemini-cli\packages\core\src\ide\ide-client.ts:630:21
    at Array.map (&lt;anonymous&gt;)
    at IdeClient.getConnectionConfigFromFile (E:\claude-code\pipedream\modelcontextprotocol\agentrpc\gemini-cli\packages\core\src\ide\ide-client.ts:628:41)
[90m    at processTicksAndRejections (node:internal/process/task_queues:105:5)[39m
    at E:\claude-code\pipedream\modelcontextprotocol\agentrpc\gemini-cli\packages\core\src\ide\ide-client.test.ts:462:22
    at file:///E:/claude-code/pipedream/modelcontextprotocol/agentrpc/gemini-cli/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:752:20

            </system-out>
        </testcase>
        <testcase classname="src/ide/ide-client.test.ts" name="IdeClient &gt; getConnectionConfigFromFile &gt; should return undefined if readdir throws an error" time="0.0008588">
            <system-out>
[DEBUG] [IDEClient] Failed to read IDE connection directory: Error: readdir failed
    at E:\claude-code\pipedream\modelcontextprotocol\agentrpc\gemini-cli\packages\core\src\ide\ide-client.test.ts:476:9
    at file:///E:/claude-code/pipedream/modelcontextprotocol/agentrpc/gemini-cli/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:155:11
    at file:///E:/claude-code/pipedream/modelcontextprotocol/agentrpc/gemini-cli/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:752:26
    at file:///E:/claude-code/pipedream/modelcontextprotocol/agentrpc/gemini-cli/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:1897:20
    at new Promise (&lt;anonymous&gt;)
    at runWithTimeout (file:///E:/claude-code/pipedream/modelcontextprotocol/agentrpc/gemini-cli/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:1863:10)
    at runTest (file:///E:/claude-code/pipedream/modelcontextprotocol/agentrpc/gemini-cli/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:1574:12)
[90m    at processTicksAndRejections (node:internal/process/task_queues:105:5)[39m
    at runSuite (file:///E:/claude-code/pipedream/modelcontextprotocol/agentrpc/gemini-cli/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:1729:8)
    at runSuite (file:///E:/claude-code/pipedream/modelcontextprotocol/agentrpc/gemini-cli/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:1729:8)

            </system-out>
        </testcase>
        <testcase classname="src/ide/ide-client.test.ts" name="IdeClient &gt; getConnectionConfigFromFile &gt; should ignore files with invalid names" time="0.0006403">
        </testcase>
        <testcase classname="src/ide/ide-client.test.ts" name="IdeClient &gt; getConnectionConfigFromFile &gt; should match env port string to a number port in the config" time="0.0005806">
        </testcase>
        <testcase classname="src/ide/ide-client.test.ts" name="IdeClient &gt; isDiffingEnabled &gt; should return false if not connected" time="0.00115">
        </testcase>
        <testcase classname="src/ide/ide-client.test.ts" name="IdeClient &gt; isDiffingEnabled &gt; should return false if tool discovery fails" time="0.0013287">
            <system-out>
[DEBUG] [IDEClient] Attempting to connect to IDE via HTTP SSE

[DEBUG] [IDEClient] Discovering tools from IDE...

[DEBUG] [IDEClient] IDE does not support tool discovery.

            </system-out>
        </testcase>
        <testcase classname="src/ide/ide-client.test.ts" name="IdeClient &gt; isDiffingEnabled &gt; should return false if diffing tools are not available" time="0.0009155">
            <system-out>
[DEBUG] [IDEClient] Attempting to connect to IDE via HTTP SSE

[DEBUG] [IDEClient] Discovering tools from IDE...

[DEBUG] [IDEClient] Discovered 1 tools from IDE: someOtherTool

            </system-out>
        </testcase>
        <testcase classname="src/ide/ide-client.test.ts" name="IdeClient &gt; isDiffingEnabled &gt; should return false if only openDiff tool is available" time="0.0007363">
            <system-out>
[DEBUG] [IDEClient] Attempting to connect to IDE via HTTP SSE

[DEBUG] [IDEClient] Discovering tools from IDE...

[DEBUG] [IDEClient] Discovered 1 tools from IDE: openDiff

            </system-out>
        </testcase>
        <testcase classname="src/ide/ide-client.test.ts" name="IdeClient &gt; isDiffingEnabled &gt; should return true if connected and diffing tools are available" time="0.0010542">
            <system-out>
[DEBUG] [IDEClient] Attempting to connect to IDE via HTTP SSE

[DEBUG] [IDEClient] Discovering tools from IDE...

[DEBUG] [IDEClient] Discovered 2 tools from IDE: openDiff, closeDiff

            </system-out>
        </testcase>
        <testcase classname="src/ide/ide-client.test.ts" name="IdeClient &gt; authentication &gt; should connect with an auth token if provided in the discovery file" time="0.0132626">
            <system-out>
[DEBUG] [IDEClient] Attempting to connect to IDE via HTTP SSE

[DEBUG] [IDEClient] Discovering tools from IDE...

            </system-out>
            <system-err>
[ERROR] [IDEClient] Error discovering tools from IDE: Cannot read properties of undefined (reading &apos;tools&apos;)

            </system-err>
        </testcase>
    </testsuite>
    <testsuite name="src/ide/ide-installer.test.ts" timestamp="2025-09-23T13:26:52.066Z" hostname="WIN-33AANMPCPKN" tests="10" failures="0" errors="0" skipped="0" time="0.0105801">
        <testcase classname="src/ide/ide-installer.test.ts" name="ide-installer &gt; getIdeInstaller &gt; returns a VsCodeInstaller for &quot;&apos;vscode&apos;&quot;" time="0.0033313">
        </testcase>
        <testcase classname="src/ide/ide-installer.test.ts" name="ide-installer &gt; getIdeInstaller &gt; returns a VsCodeInstaller for &quot;&apos;firebasestudio&apos;&quot;" time="0.0005773">
        </testcase>
        <testcase classname="src/ide/ide-installer.test.ts" name="ide-installer &gt; VsCodeInstaller &gt; install &gt; identifies the path to code cli on platform: &apos;win32&apos;" time="0.0010537">
        </testcase>
        <testcase classname="src/ide/ide-installer.test.ts" name="ide-installer &gt; VsCodeInstaller &gt; install &gt; identifies the path to code cli on platform: &apos;darwin&apos;" time="0.0004579">
        </testcase>
        <testcase classname="src/ide/ide-installer.test.ts" name="ide-installer &gt; VsCodeInstaller &gt; install &gt; identifies the path to code cli on platform: &apos;linux&apos;" time="0.0005494">
        </testcase>
        <testcase classname="src/ide/ide-installer.test.ts" name="ide-installer &gt; VsCodeInstaller &gt; install &gt; installs the extension using code cli" time="0.0012483">
        </testcase>
        <testcase classname="src/ide/ide-installer.test.ts" name="ide-installer &gt; VsCodeInstaller &gt; install &gt; returns that the cli was installed successfully" time="0.0005812">
        </testcase>
        <testcase classname="src/ide/ide-installer.test.ts" name="ide-installer &gt; VsCodeInstaller &gt; install &gt; returns that the cli was installed successfully" time="0.0003532">
        </testcase>
        <testcase classname="src/ide/ide-installer.test.ts" name="ide-installer &gt; VsCodeInstaller &gt; install &gt; should return a failure message if { name: &apos;vscode&apos;, …(1) } is not installed" time="0.0004636">
        </testcase>
        <testcase classname="src/ide/ide-installer.test.ts" name="ide-installer &gt; VsCodeInstaller &gt; install &gt; should return a failure message if { name: &apos;firebasestudio&apos;, …(1) } is not installed" time="0.0005318">
        </testcase>
    </testsuite>
    <testsuite name="src/ide/ideContext.test.ts" timestamp="2025-09-23T13:26:52.067Z" hostname="WIN-33AANMPCPKN" tests="23" failures="0" errors="0" skipped="0" time="0.0114632">
        <testcase classname="src/ide/ideContext.test.ts" name="ideContext &gt; createIdeContextStore &gt; should return undefined initially for ide context" time="0.0013506">
        </testcase>
        <testcase classname="src/ide/ideContext.test.ts" name="ideContext &gt; createIdeContextStore &gt; should set and retrieve the ide context" time="0.0007293">
        </testcase>
        <testcase classname="src/ide/ideContext.test.ts" name="ideContext &gt; createIdeContextStore &gt; should update the ide context when called multiple times" time="0.0001362">
        </testcase>
        <testcase classname="src/ide/ideContext.test.ts" name="ideContext &gt; createIdeContextStore &gt; should handle empty string for file path" time="0.0000947">
        </testcase>
        <testcase classname="src/ide/ideContext.test.ts" name="ideContext &gt; createIdeContextStore &gt; should notify subscribers when ide context changes" time="0.002625">
        </testcase>
        <testcase classname="src/ide/ideContext.test.ts" name="ideContext &gt; createIdeContextStore &gt; should stop notifying a subscriber after unsubscribe" time="0.0002592">
        </testcase>
        <testcase classname="src/ide/ideContext.test.ts" name="ideContext &gt; createIdeContextStore &gt; should clear the ide context" time="0.0001359">
        </testcase>
        <testcase classname="src/ide/ideContext.test.ts" name="ideContext &gt; createIdeContextStore &gt; should set the context and notify subscribers when no workspaceState is present" time="0.0002555">
        </testcase>
        <testcase classname="src/ide/ideContext.test.ts" name="ideContext &gt; createIdeContextStore &gt; should handle an empty openFiles array" time="0.0001061">
        </testcase>
        <testcase classname="src/ide/ideContext.test.ts" name="ideContext &gt; createIdeContextStore &gt; should sort openFiles by timestamp in descending order" time="0.000391">
        </testcase>
        <testcase classname="src/ide/ideContext.test.ts" name="ideContext &gt; createIdeContextStore &gt; should mark only the most recent file as active and clear other active files" time="0.0003636">
        </testcase>
        <testcase classname="src/ide/ideContext.test.ts" name="ideContext &gt; createIdeContextStore &gt; should truncate selectedText if it exceeds the max length" time="0.000573">
        </testcase>
        <testcase classname="src/ide/ideContext.test.ts" name="ideContext &gt; createIdeContextStore &gt; should not truncate selectedText if it is within the max length" time="0.0001194">
        </testcase>
        <testcase classname="src/ide/ideContext.test.ts" name="ideContext &gt; createIdeContextStore &gt; should truncate the openFiles list if it exceeds the max length" time="0.0002022">
        </testcase>
        <testcase classname="src/ide/ideContext.test.ts" name="ideContext &gt; FileSchema &gt; should validate a file with only required fields" time="0.001216">
        </testcase>
        <testcase classname="src/ide/ideContext.test.ts" name="ideContext &gt; FileSchema &gt; should validate a file with all fields" time="0.0002063">
        </testcase>
        <testcase classname="src/ide/ideContext.test.ts" name="ideContext &gt; FileSchema &gt; should fail validation if path is missing" time="0.0004514">
        </testcase>
        <testcase classname="src/ide/ideContext.test.ts" name="ideContext &gt; FileSchema &gt; should fail validation if timestamp is missing" time="0.0001086">
        </testcase>
        <testcase classname="src/ide/ideContext.test.ts" name="ideContext &gt; IdeContextSchema &gt; should validate an empty context" time="0.0000874">
        </testcase>
        <testcase classname="src/ide/ideContext.test.ts" name="ideContext &gt; IdeContextSchema &gt; should validate a context with an empty workspaceState" time="0.0000826">
        </testcase>
        <testcase classname="src/ide/ideContext.test.ts" name="ideContext &gt; IdeContextSchema &gt; should validate a context with an empty openFiles array" time="0.0002406">
        </testcase>
        <testcase classname="src/ide/ideContext.test.ts" name="ideContext &gt; IdeContextSchema &gt; should validate a context with a valid file" time="0.0001182">
        </testcase>
        <testcase classname="src/ide/ideContext.test.ts" name="ideContext &gt; IdeContextSchema &gt; should fail validation with an invalid file" time="0.0000943">
        </testcase>
    </testsuite>
    <testsuite name="src/ide/process-utils.test.ts" timestamp="2025-09-23T13:26:52.070Z" hostname="WIN-33AANMPCPKN" tests="7" failures="0" errors="0" skipped="0" time="0.0136729">
        <testcase classname="src/ide/process-utils.test.ts" name="getIdeProcessInfo &gt; on Unix &gt; should traverse up to find the shell and return grandparent process info" time="0.0024692">
        </testcase>
        <testcase classname="src/ide/process-utils.test.ts" name="getIdeProcessInfo &gt; on Unix &gt; should return parent process info if grandparent lookup fails" time="0.0075671">
            <system-out>
Failed to get process info for pid 800: Error: ps failed
    at [90mE:\claude-code\pipedream\modelcontextprotocol\agentrpc\gemini-cli\packages\core\[39msrc\ide\process-utils.test.ts:57:32
    at file:///E:/claude-code/pipedream/modelcontextprotocol/agentrpc/gemini-cli/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:155:11
    at file:///E:/claude-code/pipedream/modelcontextprotocol/agentrpc/gemini-cli/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:752:26
    at file:///E:/claude-code/pipedream/modelcontextprotocol/agentrpc/gemini-cli/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:1897:20
    at new Promise (&lt;anonymous&gt;)
    at runWithTimeout (file:///E:/claude-code/pipedream/modelcontextprotocol/agentrpc/gemini-cli/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:1863:10)
    at runTest (file:///E:/claude-code/pipedream/modelcontextprotocol/agentrpc/gemini-cli/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:1574:12)
[90m    at processTicksAndRejections (node:internal/process/task_queues:105:5)[39m
    at runSuite (file:///E:/claude-code/pipedream/modelcontextprotocol/agentrpc/gemini-cli/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:1729:8)
    at runSuite (file:///E:/claude-code/pipedream/modelcontextprotocol/agentrpc/gemini-cli/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:1729:8)

            </system-out>
        </testcase>
        <testcase classname="src/ide/process-utils.test.ts" name="getIdeProcessInfo &gt; on Windows &gt; should traverse up and find the great-grandchild of the root process" time="0.000394">
        </testcase>
        <testcase classname="src/ide/process-utils.test.ts" name="getIdeProcessInfo &gt; on Windows &gt; should handle non-existent process gracefully" time="0.0001381">
        </testcase>
        <testcase classname="src/ide/process-utils.test.ts" name="getIdeProcessInfo &gt; on Windows &gt; should handle malformed JSON output gracefully" time="0.0014006">
            <system-out>
Failed to get process info for pid 1000: SyntaxError: Unexpected token &apos;j&apos;, &quot;{&quot;invalid&quot;:json}&quot; is not valid JSON
    at JSON.parse (&lt;anonymous&gt;)
    at getProcessInfo [90m(E:\claude-code\pipedream\modelcontextprotocol\agentrpc\gemini-cli\packages\core\[39msrc\ide\process-utils.ts:46:16[90m)[39m
[90m    at processTicksAndRejections (node:internal/process/task_queues:105:5)[39m
    at getIdeProcessInfoForWindows [90m(E:\claude-code\pipedream\modelcontextprotocol\agentrpc\gemini-cli\packages\core\[39msrc\ide\process-utils.ts:143:29[90m)[39m

            </system-out>
        </testcase>
        <testcase classname="src/ide/process-utils.test.ts" name="getIdeProcessInfo &gt; on Windows &gt; should handle PowerShell errors without crashing the process chain" time="0.0002745">
        </testcase>
        <testcase classname="src/ide/process-utils.test.ts" name="getIdeProcessInfo &gt; on Windows &gt; should handle partial JSON data with defaults" time="0.0001459">
        </testcase>
    </testsuite>
    <testsuite name="src/mcp/google-auth-provider.test.ts" timestamp="2025-09-23T13:26:52.071Z" hostname="WIN-33AANMPCPKN" tests="8" failures="0" errors="0" skipped="0" time="0.0154866">
        <testcase classname="src/mcp/google-auth-provider.test.ts" name="GoogleCredentialProvider &gt; should throw an error if no scopes are provided" time="0.0023754">
        </testcase>
        <testcase classname="src/mcp/google-auth-provider.test.ts" name="GoogleCredentialProvider &gt; should use scopes from the config if provided" time="0.0029715">
        </testcase>
        <testcase classname="src/mcp/google-auth-provider.test.ts" name="GoogleCredentialProvider &gt; should throw an error for a non-allowlisted host" time="0.0002331">
        </testcase>
        <testcase classname="src/mcp/google-auth-provider.test.ts" name="GoogleCredentialProvider &gt; should allow luci.app" time="0.0007947">
        </testcase>
        <testcase classname="src/mcp/google-auth-provider.test.ts" name="GoogleCredentialProvider &gt; should allow sub.luci.app" time="0.0012519">
        </testcase>
        <testcase classname="src/mcp/google-auth-provider.test.ts" name="GoogleCredentialProvider &gt; should not allow googleapis.com without a subdomain" time="0.0001629">
        </testcase>
        <testcase classname="src/mcp/google-auth-provider.test.ts" name="GoogleCredentialProvider &gt; with provider instance &gt; should return credentials" time="0.0019123">
        </testcase>
        <testcase classname="src/mcp/google-auth-provider.test.ts" name="GoogleCredentialProvider &gt; with provider instance &gt; should return undefined if access token is not available" time="0.0045583">
            <system-err>
Failed to get access token from Google ADC

            </system-err>
        </testcase>
    </testsuite>
    <testsuite name="src/mcp/oauth-provider.test.ts" timestamp="2025-09-23T13:26:52.072Z" hostname="WIN-33AANMPCPKN" tests="19" failures="0" errors="0" skipped="0" time="0.2113169">
        <testcase classname="src/mcp/oauth-provider.test.ts" name="MCPOAuthProvider &gt; authenticate &gt; should perform complete OAuth flow with PKCE" time="0.0248172">
            <system-out>
✓ Authorization code received, exchanging for tokens...

✓ Authentication successful! Token saved.

            </system-out>
        </testcase>
        <testcase classname="src/mcp/oauth-provider.test.ts" name="MCPOAuthProvider &gt; authenticate &gt; should handle OAuth discovery when no authorization URL provided" time="0.0248309">
            <system-out>
Starting OAuth for MCP server &quot;test-server&quot;…
✓ No authorization URL; using OAuth discovery

✓ Authorization code received, exchanging for tokens...

✓ Authentication successful! Token saved.

            </system-out>
        </testcase>
        <testcase classname="src/mcp/oauth-provider.test.ts" name="MCPOAuthProvider &gt; authenticate &gt; should perform dynamic client registration when no client ID provided" time="0.015723">
            <system-out>
→ Attempting dynamic client registration...

✓ Dynamic client registration successful

✓ Authorization code received, exchanging for tokens...

✓ Authentication successful! Token saved.

            </system-out>
        </testcase>
        <testcase classname="src/mcp/oauth-provider.test.ts" name="MCPOAuthProvider &gt; authenticate &gt; should handle OAuth callback errors" time="0.0151702">
        </testcase>
        <testcase classname="src/mcp/oauth-provider.test.ts" name="MCPOAuthProvider &gt; authenticate &gt; should handle state mismatch in callback" time="0.0140587">
        </testcase>
        <testcase classname="src/mcp/oauth-provider.test.ts" name="MCPOAuthProvider &gt; authenticate &gt; should handle token exchange failure" time="0.0201495">
            <system-out>
✓ Authorization code received, exchanging for tokens...

            </system-out>
        </testcase>
        <testcase classname="src/mcp/oauth-provider.test.ts" name="MCPOAuthProvider &gt; authenticate &gt; should handle callback timeout" time="0.0019467">
        </testcase>
        <testcase classname="src/mcp/oauth-provider.test.ts" name="MCPOAuthProvider &gt; refreshAccessToken &gt; should refresh token successfully" time="0.0018843">
        </testcase>
        <testcase classname="src/mcp/oauth-provider.test.ts" name="MCPOAuthProvider &gt; refreshAccessToken &gt; should include client secret in refresh request when available" time="0.0009295">
        </testcase>
        <testcase classname="src/mcp/oauth-provider.test.ts" name="MCPOAuthProvider &gt; refreshAccessToken &gt; should handle refresh token failure" time="0.0046435">
        </testcase>
        <testcase classname="src/mcp/oauth-provider.test.ts" name="MCPOAuthProvider &gt; getValidToken &gt; should return valid token when not expired" time="0.0014574">
            <system-out>
Getting valid token for server: test-server

Found token for server: test-server, expired: false
Returning valid token for server: test-server

            </system-out>
        </testcase>
        <testcase classname="src/mcp/oauth-provider.test.ts" name="MCPOAuthProvider &gt; getValidToken &gt; should refresh expired token and return new token" time="0.0011387">
            <system-out>
Getting valid token for server: test-server

Found token for server: test-server, expired: true

            </system-out>
        </testcase>
        <testcase classname="src/mcp/oauth-provider.test.ts" name="MCPOAuthProvider &gt; getValidToken &gt; should return null when no credentials exist" time="0.0012199">
            <system-out>
Getting valid token for server: test-server

No credentials found for server: test-server

            </system-out>
        </testcase>
        <testcase classname="src/mcp/oauth-provider.test.ts" name="MCPOAuthProvider &gt; getValidToken &gt; should handle refresh failure and remove invalid token" time="0.0024152">
            <system-out>
Getting valid token for server: test-server

Found token for server: test-server, expired: true

            </system-out>
        </testcase>
        <testcase classname="src/mcp/oauth-provider.test.ts" name="MCPOAuthProvider &gt; getValidToken &gt; should return null for token without refresh capability" time="0.0013089">
            <system-out>
Getting valid token for server: test-server

Found token for server: test-server, expired: true

            </system-out>
        </testcase>
        <testcase classname="src/mcp/oauth-provider.test.ts" name="MCPOAuthProvider &gt; PKCE parameter generation &gt; should generate valid PKCE parameters" time="0.0297637">
            <system-out>
✓ Authorization code received, exchanging for tokens...

✓ Authentication successful! Token saved.

            </system-out>
        </testcase>
        <testcase classname="src/mcp/oauth-provider.test.ts" name="MCPOAuthProvider &gt; Authorization URL building &gt; should build correct authorization URL with all parameters" time="0.0170721">
            <system-out>
✓ Authorization code received, exchanging for tokens...

✓ Authentication successful! Token saved.

            </system-out>
        </testcase>
        <testcase classname="src/mcp/oauth-provider.test.ts" name="MCPOAuthProvider &gt; Authorization URL building &gt; should correctly append parameters to an authorization URL that already has query params" time="0.0147953">
            <system-out>
✓ Authorization code received, exchanging for tokens...

✓ Authentication successful! Token saved.

            </system-out>
        </testcase>
        <testcase classname="src/mcp/oauth-provider.test.ts" name="MCPOAuthProvider &gt; Authorization URL building &gt; should correctly append parameters to a URL with a fragment" time="0.0158916">
            <system-out>
✓ Authorization code received, exchanging for tokens...

✓ Authentication successful! Token saved.

            </system-out>
        </testcase>
    </testsuite>
    <testsuite name="src/mcp/oauth-token-storage.test.ts" timestamp="2025-09-23T13:26:52.076Z" hostname="WIN-33AANMPCPKN" tests="28" failures="0" errors="0" skipped="0" time="0.022708">
        <testcase classname="src/mcp/oauth-token-storage.test.ts" name="MCPOAuthTokenStorage &gt; with encrypted flag false &gt; getAllCredentials &gt; should return empty map when token file does not exist" time="0.0033001">
        </testcase>
        <testcase classname="src/mcp/oauth-token-storage.test.ts" name="MCPOAuthTokenStorage &gt; with encrypted flag false &gt; getAllCredentials &gt; should load tokens from file successfully" time="0.0021215">
        </testcase>
        <testcase classname="src/mcp/oauth-token-storage.test.ts" name="MCPOAuthTokenStorage &gt; with encrypted flag false &gt; getAllCredentials &gt; should handle corrupted token file gracefully" time="0.0034448">
            <system-err>
Failed to load MCP OAuth tokens: Unexpected token &apos;i&apos;, &quot;invalid json&quot; is not valid JSON

            </system-err>
        </testcase>
        <testcase classname="src/mcp/oauth-token-storage.test.ts" name="MCPOAuthTokenStorage &gt; with encrypted flag false &gt; getAllCredentials &gt; should handle file read errors other than ENOENT" time="0.0006431">
            <system-err>
Failed to load MCP OAuth tokens: Permission denied

            </system-err>
        </testcase>
        <testcase classname="src/mcp/oauth-token-storage.test.ts" name="MCPOAuthTokenStorage &gt; with encrypted flag false &gt; saveToken &gt; should save token with restricted permissions" time="0.0009692">
        </testcase>
        <testcase classname="src/mcp/oauth-token-storage.test.ts" name="MCPOAuthTokenStorage &gt; with encrypted flag false &gt; saveToken &gt; should update existing token for same server" time="0.0009941">
        </testcase>
        <testcase classname="src/mcp/oauth-token-storage.test.ts" name="MCPOAuthTokenStorage &gt; with encrypted flag false &gt; saveToken &gt; should handle write errors gracefully" time="0.0020857">
            <system-err>
Failed to save MCP OAuth token: Disk full

            </system-err>
        </testcase>
        <testcase classname="src/mcp/oauth-token-storage.test.ts" name="MCPOAuthTokenStorage &gt; with encrypted flag false &gt; getCredentials &gt; should return token for existing server" time="0.0004076">
        </testcase>
        <testcase classname="src/mcp/oauth-token-storage.test.ts" name="MCPOAuthTokenStorage &gt; with encrypted flag false &gt; getCredentials &gt; should return null for non-existent server" time="0.0003077">
        </testcase>
        <testcase classname="src/mcp/oauth-token-storage.test.ts" name="MCPOAuthTokenStorage &gt; with encrypted flag false &gt; getCredentials &gt; should return null when no tokens file exists" time="0.0004505">
        </testcase>
        <testcase classname="src/mcp/oauth-token-storage.test.ts" name="MCPOAuthTokenStorage &gt; with encrypted flag false &gt; deleteCredentials &gt; should remove token for specific server" time="0.0004958">
        </testcase>
        <testcase classname="src/mcp/oauth-token-storage.test.ts" name="MCPOAuthTokenStorage &gt; with encrypted flag false &gt; deleteCredentials &gt; should remove token file when no tokens remain" time="0.0003593">
        </testcase>
        <testcase classname="src/mcp/oauth-token-storage.test.ts" name="MCPOAuthTokenStorage &gt; with encrypted flag false &gt; deleteCredentials &gt; should handle removal of non-existent token gracefully" time="0.0003088">
        </testcase>
        <testcase classname="src/mcp/oauth-token-storage.test.ts" name="MCPOAuthTokenStorage &gt; with encrypted flag false &gt; deleteCredentials &gt; should handle file operation errors gracefully" time="0.0004582">
            <system-err>
Failed to remove MCP OAuth token: Permission denied

            </system-err>
        </testcase>
        <testcase classname="src/mcp/oauth-token-storage.test.ts" name="MCPOAuthTokenStorage &gt; with encrypted flag false &gt; isTokenExpired &gt; should return false for token without expiry" time="0.0002759">
        </testcase>
        <testcase classname="src/mcp/oauth-token-storage.test.ts" name="MCPOAuthTokenStorage &gt; with encrypted flag false &gt; isTokenExpired &gt; should return false for valid token" time="0.0002422">
        </testcase>
        <testcase classname="src/mcp/oauth-token-storage.test.ts" name="MCPOAuthTokenStorage &gt; with encrypted flag false &gt; isTokenExpired &gt; should return true for expired token" time="0.0002376">
        </testcase>
        <testcase classname="src/mcp/oauth-token-storage.test.ts" name="MCPOAuthTokenStorage &gt; with encrypted flag false &gt; isTokenExpired &gt; should return true for token expiring within buffer time" time="0.0002324">
        </testcase>
        <testcase classname="src/mcp/oauth-token-storage.test.ts" name="MCPOAuthTokenStorage &gt; with encrypted flag false &gt; clearAll &gt; should remove token file successfully" time="0.0003269">
        </testcase>
        <testcase classname="src/mcp/oauth-token-storage.test.ts" name="MCPOAuthTokenStorage &gt; with encrypted flag false &gt; clearAll &gt; should handle non-existent file gracefully" time="0.0002739">
        </testcase>
        <testcase classname="src/mcp/oauth-token-storage.test.ts" name="MCPOAuthTokenStorage &gt; with encrypted flag false &gt; clearAll &gt; should handle other file errors gracefully" time="0.0004139">
            <system-err>
Failed to clear MCP OAuth tokens: Permission denied

            </system-err>
        </testcase>
        <testcase classname="src/mcp/oauth-token-storage.test.ts" name="MCPOAuthTokenStorage &gt; with encrypted flag true &gt; should use HybridTokenStorage to list all credentials" time="0.0004248">
        </testcase>
        <testcase classname="src/mcp/oauth-token-storage.test.ts" name="MCPOAuthTokenStorage &gt; with encrypted flag true &gt; should use HybridTokenStorage to list servers" time="0.0003361">
        </testcase>
        <testcase classname="src/mcp/oauth-token-storage.test.ts" name="MCPOAuthTokenStorage &gt; with encrypted flag true &gt; should use HybridTokenStorage to set credentials" time="0.0003745">
        </testcase>
        <testcase classname="src/mcp/oauth-token-storage.test.ts" name="MCPOAuthTokenStorage &gt; with encrypted flag true &gt; should use HybridTokenStorage to save a token" time="0.0004635">
        </testcase>
        <testcase classname="src/mcp/oauth-token-storage.test.ts" name="MCPOAuthTokenStorage &gt; with encrypted flag true &gt; should use HybridTokenStorage to get credentials" time="0.000305">
        </testcase>
        <testcase classname="src/mcp/oauth-token-storage.test.ts" name="MCPOAuthTokenStorage &gt; with encrypted flag true &gt; should use HybridTokenStorage to delete credentials" time="0.0002661">
        </testcase>
        <testcase classname="src/mcp/oauth-token-storage.test.ts" name="MCPOAuthTokenStorage &gt; with encrypted flag true &gt; should use HybridTokenStorage to clear all tokens" time="0.0002539">
        </testcase>
    </testsuite>
    <testsuite name="src/mcp/oauth-utils.test.ts" timestamp="2025-09-23T13:26:52.080Z" hostname="WIN-33AANMPCPKN" tests="21" failures="0" errors="0" skipped="0" time="0.0115389">
        <testcase classname="src/mcp/oauth-utils.test.ts" name="OAuthUtils &gt; buildWellKnownUrls &gt; should build standard root-based URLs by default" time="0.0018281">
        </testcase>
        <testcase classname="src/mcp/oauth-utils.test.ts" name="OAuthUtils &gt; buildWellKnownUrls &gt; should build path-based URLs when includePathSuffix is true" time="0.000336">
        </testcase>
        <testcase classname="src/mcp/oauth-utils.test.ts" name="OAuthUtils &gt; buildWellKnownUrls &gt; should handle root path correctly" time="0.0004061">
        </testcase>
        <testcase classname="src/mcp/oauth-utils.test.ts" name="OAuthUtils &gt; buildWellKnownUrls &gt; should handle trailing slash in path" time="0.000262">
        </testcase>
        <testcase classname="src/mcp/oauth-utils.test.ts" name="OAuthUtils &gt; fetchProtectedResourceMetadata &gt; should fetch protected resource metadata successfully" time="0.000872">
        </testcase>
        <testcase classname="src/mcp/oauth-utils.test.ts" name="OAuthUtils &gt; fetchProtectedResourceMetadata &gt; should return null when fetch fails" time="0.0002553">
        </testcase>
        <testcase classname="src/mcp/oauth-utils.test.ts" name="OAuthUtils &gt; fetchAuthorizationServerMetadata &gt; should fetch authorization server metadata successfully" time="0.0004065">
        </testcase>
        <testcase classname="src/mcp/oauth-utils.test.ts" name="OAuthUtils &gt; fetchAuthorizationServerMetadata &gt; should return null when fetch fails" time="0.000205">
        </testcase>
        <testcase classname="src/mcp/oauth-utils.test.ts" name="OAuthUtils &gt; discoverAuthorizationServerMetadata &gt; should handle URLs without path components correctly" time="0.0005301">
        </testcase>
        <testcase classname="src/mcp/oauth-utils.test.ts" name="OAuthUtils &gt; discoverAuthorizationServerMetadata &gt; should handle URLs with path components correctly" time="0.0004928">
        </testcase>
        <testcase classname="src/mcp/oauth-utils.test.ts" name="OAuthUtils &gt; metadataToOAuthConfig &gt; should convert metadata to OAuth config" time="0.0004286">
        </testcase>
        <testcase classname="src/mcp/oauth-utils.test.ts" name="OAuthUtils &gt; metadataToOAuthConfig &gt; should handle empty scopes" time="0.0002688">
        </testcase>
        <testcase classname="src/mcp/oauth-utils.test.ts" name="OAuthUtils &gt; parseWWWAuthenticateHeader &gt; should parse resource metadata URI from WWW-Authenticate header" time="0.0003232">
        </testcase>
        <testcase classname="src/mcp/oauth-utils.test.ts" name="OAuthUtils &gt; parseWWWAuthenticateHeader &gt; should return null when no resource metadata URI is found" time="0.0003703">
        </testcase>
        <testcase classname="src/mcp/oauth-utils.test.ts" name="OAuthUtils &gt; extractBaseUrl &gt; should extract base URL from MCP server URL" time="0.0002486">
        </testcase>
        <testcase classname="src/mcp/oauth-utils.test.ts" name="OAuthUtils &gt; extractBaseUrl &gt; should handle URLs with ports" time="0.0002252">
        </testcase>
        <testcase classname="src/mcp/oauth-utils.test.ts" name="OAuthUtils &gt; isSSEEndpoint &gt; should return true for SSE endpoints" time="0.0002705">
        </testcase>
        <testcase classname="src/mcp/oauth-utils.test.ts" name="OAuthUtils &gt; isSSEEndpoint &gt; should return true for non-MCP endpoints" time="0.0015492">
        </testcase>
        <testcase classname="src/mcp/oauth-utils.test.ts" name="OAuthUtils &gt; isSSEEndpoint &gt; should return false for MCP endpoints" time="0.0002854">
        </testcase>
        <testcase classname="src/mcp/oauth-utils.test.ts" name="OAuthUtils &gt; buildResourceParameter &gt; should build resource parameter from endpoint URL" time="0.0002358">
        </testcase>
        <testcase classname="src/mcp/oauth-utils.test.ts" name="OAuthUtils &gt; buildResourceParameter &gt; should handle URLs with ports" time="0.0002188">
        </testcase>
    </testsuite>
    <testsuite name="src/output/json-formatter.test.ts" timestamp="2025-09-23T13:26:52.082Z" hostname="WIN-33AANMPCPKN" tests="15" failures="0" errors="0" skipped="0" time="0.0061934">
        <testcase classname="src/output/json-formatter.test.ts" name="JsonFormatter &gt; should format the response as JSON" time="0.002034">
        </testcase>
        <testcase classname="src/output/json-formatter.test.ts" name="JsonFormatter &gt; should strip ANSI escape sequences from response text" time="0.0003325">
        </testcase>
        <testcase classname="src/output/json-formatter.test.ts" name="JsonFormatter &gt; should strip control characters from response text" time="0.0000887">
        </testcase>
        <testcase classname="src/output/json-formatter.test.ts" name="JsonFormatter &gt; should preserve newlines and tabs in response text" time="0.0000739">
        </testcase>
        <testcase classname="src/output/json-formatter.test.ts" name="JsonFormatter &gt; should format the response as JSON with stats" time="0.0002663">
        </testcase>
        <testcase classname="src/output/json-formatter.test.ts" name="JsonFormatter &gt; should format error as JSON" time="0.0000959">
        </testcase>
        <testcase classname="src/output/json-formatter.test.ts" name="JsonFormatter &gt; should format response with error as JSON" time="0.0000929">
        </testcase>
        <testcase classname="src/output/json-formatter.test.ts" name="JsonFormatter &gt; should format error using formatError method" time="0.0001258">
        </testcase>
        <testcase classname="src/output/json-formatter.test.ts" name="JsonFormatter &gt; should format custom error using formatError method" time="0.0002536">
        </testcase>
        <testcase classname="src/output/json-formatter.test.ts" name="JsonFormatter &gt; should format complete JSON output with response, stats, and error" time="0.0001469">
        </testcase>
        <testcase classname="src/output/json-formatter.test.ts" name="JsonFormatter &gt; should handle error messages containing JSON content" time="0.0007764">
        </testcase>
        <testcase classname="src/output/json-formatter.test.ts" name="JsonFormatter &gt; should handle error messages with quotes and special characters" time="0.0001852">
        </testcase>
        <testcase classname="src/output/json-formatter.test.ts" name="JsonFormatter &gt; should handle error messages with control characters" time="0.0001576">
        </testcase>
        <testcase classname="src/output/json-formatter.test.ts" name="JsonFormatter &gt; should strip ANSI escape sequences from error messages" time="0.0001472">
        </testcase>
        <testcase classname="src/output/json-formatter.test.ts" name="JsonFormatter &gt; should strip unsafe control characters from error messages" time="0.0001407">
        </testcase>
    </testsuite>
    <testsuite name="src/policy/policy-engine.test.ts" timestamp="2025-09-23T13:26:52.084Z" hostname="WIN-33AANMPCPKN" tests="28" failures="0" errors="0" skipped="0" time="0.012827">
        <testcase classname="src/policy/policy-engine.test.ts" name="PolicyEngine &gt; constructor &gt; should use default config when none provided" time="0.0020343">
        </testcase>
        <testcase classname="src/policy/policy-engine.test.ts" name="PolicyEngine &gt; constructor &gt; should respect custom default decision" time="0.0001933">
        </testcase>
        <testcase classname="src/policy/policy-engine.test.ts" name="PolicyEngine &gt; constructor &gt; should sort rules by priority" time="0.0002449">
        </testcase>
        <testcase classname="src/policy/policy-engine.test.ts" name="PolicyEngine &gt; check &gt; should match tool by name" time="0.0002653">
        </testcase>
        <testcase classname="src/policy/policy-engine.test.ts" name="PolicyEngine &gt; check &gt; should match by args pattern" time="0.0004402">
        </testcase>
        <testcase classname="src/policy/policy-engine.test.ts" name="PolicyEngine &gt; check &gt; should apply rules by priority" time="0.0001352">
        </testcase>
        <testcase classname="src/policy/policy-engine.test.ts" name="PolicyEngine &gt; check &gt; should apply wildcard rules (no toolName)" time="0.0001539">
        </testcase>
        <testcase classname="src/policy/policy-engine.test.ts" name="PolicyEngine &gt; check &gt; should handle non-interactive mode" time="0.0001833">
        </testcase>
        <testcase classname="src/policy/policy-engine.test.ts" name="PolicyEngine &gt; addRule &gt; should add a new rule and maintain priority order" time="0.0011979">
        </testcase>
        <testcase classname="src/policy/policy-engine.test.ts" name="PolicyEngine &gt; addRule &gt; should apply newly added rules" time="0.0003099">
        </testcase>
        <testcase classname="src/policy/policy-engine.test.ts" name="PolicyEngine &gt; removeRulesForTool &gt; should remove rules for specific tool" time="0.0003869">
        </testcase>
        <testcase classname="src/policy/policy-engine.test.ts" name="PolicyEngine &gt; removeRulesForTool &gt; should handle removing non-existent tool" time="0.0008981">
        </testcase>
        <testcase classname="src/policy/policy-engine.test.ts" name="PolicyEngine &gt; getRules &gt; should return readonly array of rules" time="0.0002361">
        </testcase>
        <testcase classname="src/policy/policy-engine.test.ts" name="PolicyEngine &gt; MCP server wildcard patterns &gt; should match MCP server wildcard patterns" time="0.0002927">
        </testcase>
        <testcase classname="src/policy/policy-engine.test.ts" name="PolicyEngine &gt; MCP server wildcard patterns &gt; should prioritize specific tool rules over server wildcards" time="0.0001478">
        </testcase>
        <testcase classname="src/policy/policy-engine.test.ts" name="PolicyEngine &gt; complex scenarios &gt; should handle multiple matching rules with different priorities" time="0.0002334">
        </testcase>
        <testcase classname="src/policy/policy-engine.test.ts" name="PolicyEngine &gt; complex scenarios &gt; should handle tools with no args" time="0.0001916">
        </testcase>
        <testcase classname="src/policy/policy-engine.test.ts" name="PolicyEngine &gt; complex scenarios &gt; should match args pattern regardless of property order" time="0.0003423">
        </testcase>
        <testcase classname="src/policy/policy-engine.test.ts" name="PolicyEngine &gt; complex scenarios &gt; should handle nested objects in args with stable stringification" time="0.0001778">
        </testcase>
        <testcase classname="src/policy/policy-engine.test.ts" name="PolicyEngine &gt; complex scenarios &gt; should handle circular references without stack overflow" time="0.0002911">
        </testcase>
        <testcase classname="src/policy/policy-engine.test.ts" name="PolicyEngine &gt; complex scenarios &gt; should handle deep circular references" time="0.0002421">
        </testcase>
        <testcase classname="src/policy/policy-engine.test.ts" name="PolicyEngine &gt; complex scenarios &gt; should handle repeated non-circular objects correctly" time="0.0001521">
        </testcase>
        <testcase classname="src/policy/policy-engine.test.ts" name="PolicyEngine &gt; complex scenarios &gt; should omit undefined and function values from objects" time="0.0002267">
        </testcase>
        <testcase classname="src/policy/policy-engine.test.ts" name="PolicyEngine &gt; complex scenarios &gt; should convert undefined and functions to null in arrays" time="0.0001527">
        </testcase>
        <testcase classname="src/policy/policy-engine.test.ts" name="PolicyEngine &gt; complex scenarios &gt; should produce valid JSON for all inputs" time="0.0009173">
        </testcase>
        <testcase classname="src/policy/policy-engine.test.ts" name="PolicyEngine &gt; complex scenarios &gt; should respect toJSON methods on objects" time="0.0001871">
        </testcase>
        <testcase classname="src/policy/policy-engine.test.ts" name="PolicyEngine &gt; complex scenarios &gt; should handle toJSON that returns primitives" time="0.0001421">
        </testcase>
        <testcase classname="src/policy/policy-engine.test.ts" name="PolicyEngine &gt; complex scenarios &gt; should handle toJSON that throws an error" time="0.0001776">
        </testcase>
    </testsuite>
    <testsuite name="src/routing/modelRouterService.test.ts" timestamp="2025-09-23T13:26:52.087Z" hostname="WIN-33AANMPCPKN" tests="5" failures="0" errors="0" skipped="0" time="0.0285327">
        <testcase classname="src/routing/modelRouterService.test.ts" name="ModelRouterService &gt; should initialize with a CompositeStrategy" time="0.0060212">
        </testcase>
        <testcase classname="src/routing/modelRouterService.test.ts" name="ModelRouterService &gt; should initialize the CompositeStrategy with the correct child strategies in order" time="0.0027077">
        </testcase>
        <testcase classname="src/routing/modelRouterService.test.ts" name="ModelRouterService &gt; route() &gt; should delegate routing to the composite strategy" time="0.00397">
        </testcase>
        <testcase classname="src/routing/modelRouterService.test.ts" name="ModelRouterService &gt; route() &gt; should log a telemetry event on a successful decision" time="0.0044921">
        </testcase>
        <testcase classname="src/routing/modelRouterService.test.ts" name="ModelRouterService &gt; route() &gt; should log a telemetry event and re-throw on a failed decision" time="0.0100844">
        </testcase>
    </testsuite>
    <testsuite name="src/services/chatRecordingService.test.ts" timestamp="2025-09-23T13:26:52.087Z" hostname="WIN-33AANMPCPKN" tests="10" failures="0" errors="0" skipped="0" time="0.0190132">
        <testcase classname="src/services/chatRecordingService.test.ts" name="ChatRecordingService &gt; initialize &gt; should create a new session if none is provided" time="0.0063289">
        </testcase>
        <testcase classname="src/services/chatRecordingService.test.ts" name="ChatRecordingService &gt; initialize &gt; should resume from an existing session if provided" time="0.0012222">
        </testcase>
        <testcase classname="src/services/chatRecordingService.test.ts" name="ChatRecordingService &gt; recordMessage &gt; should record a new message" time="0.0021">
        </testcase>
        <testcase classname="src/services/chatRecordingService.test.ts" name="ChatRecordingService &gt; recordMessage &gt; should create separate messages when recording multiple messages" time="0.0010207">
        </testcase>
        <testcase classname="src/services/chatRecordingService.test.ts" name="ChatRecordingService &gt; recordThought &gt; should queue a thought" time="0.0010004">
        </testcase>
        <testcase classname="src/services/chatRecordingService.test.ts" name="ChatRecordingService &gt; recordMessageTokens &gt; should update the last message with token info" time="0.0013306">
        </testcase>
        <testcase classname="src/services/chatRecordingService.test.ts" name="ChatRecordingService &gt; recordMessageTokens &gt; should queue token info if the last message already has tokens" time="0.0008686">
        </testcase>
        <testcase classname="src/services/chatRecordingService.test.ts" name="ChatRecordingService &gt; recordToolCalls &gt; should add new tool calls to the last message" time="0.0012466">
        </testcase>
        <testcase classname="src/services/chatRecordingService.test.ts" name="ChatRecordingService &gt; recordToolCalls &gt; should create a new message if the last message is not from gemini" time="0.0011499">
        </testcase>
        <testcase classname="src/services/chatRecordingService.test.ts" name="ChatRecordingService &gt; deleteSession &gt; should delete the session file" time="0.000972">
        </testcase>
    </testsuite>
    <testsuite name="src/services/fileDiscoveryService.test.ts" timestamp="2025-09-23T13:26:52.089Z" hostname="WIN-33AANMPCPKN" tests="13" failures="0" errors="0" skipped="0" time="0.1907395">
        <testcase classname="src/services/fileDiscoveryService.test.ts" name="FileDiscoveryService &gt; initialization &gt; should initialize git ignore parser by default in a git repo" time="0.0511385">
        </testcase>
        <testcase classname="src/services/fileDiscoveryService.test.ts" name="FileDiscoveryService &gt; initialization &gt; should not load git repo patterns when not in a git repo" time="0.0180836">
        </testcase>
        <testcase classname="src/services/fileDiscoveryService.test.ts" name="FileDiscoveryService &gt; initialization &gt; should load .geminiignore patterns even when not in a git repo" time="0.0043957">
        </testcase>
        <testcase classname="src/services/fileDiscoveryService.test.ts" name="FileDiscoveryService &gt; filterFiles &gt; should filter out git-ignored and gemini-ignored files by default" time="0.0055799">
        </testcase>
        <testcase classname="src/services/fileDiscoveryService.test.ts" name="FileDiscoveryService &gt; filterFiles &gt; should not filter files when respectGitIgnore is false" time="0.0035262">
        </testcase>
        <testcase classname="src/services/fileDiscoveryService.test.ts" name="FileDiscoveryService &gt; filterFiles &gt; should not filter files when respectGeminiIgnore is false" time="0.0058356">
        </testcase>
        <testcase classname="src/services/fileDiscoveryService.test.ts" name="FileDiscoveryService &gt; filterFiles &gt; should handle empty file list" time="0.0040002">
        </testcase>
        <testcase classname="src/services/fileDiscoveryService.test.ts" name="FileDiscoveryService &gt; shouldGitIgnoreFile &amp; shouldGeminiIgnoreFile &gt; should return true for git-ignored files" time="0.0039088">
        </testcase>
        <testcase classname="src/services/fileDiscoveryService.test.ts" name="FileDiscoveryService &gt; shouldGitIgnoreFile &amp; shouldGeminiIgnoreFile &gt; should return false for non-git-ignored files" time="0.037289">
        </testcase>
        <testcase classname="src/services/fileDiscoveryService.test.ts" name="FileDiscoveryService &gt; shouldGitIgnoreFile &amp; shouldGeminiIgnoreFile &gt; should return true for gemini-ignored files" time="0.0240385">
        </testcase>
        <testcase classname="src/services/fileDiscoveryService.test.ts" name="FileDiscoveryService &gt; shouldGitIgnoreFile &amp; shouldGeminiIgnoreFile &gt; should return false for non-gemini-ignored files" time="0.0073479">
        </testcase>
        <testcase classname="src/services/fileDiscoveryService.test.ts" name="FileDiscoveryService &gt; edge cases &gt; should handle relative project root paths" time="0.0088101">
        </testcase>
        <testcase classname="src/services/fileDiscoveryService.test.ts" name="FileDiscoveryService &gt; edge cases &gt; should handle filterFiles with undefined options" time="0.0147508">
        </testcase>
    </testsuite>
    <testsuite name="src/services/fileSystemService.test.ts" timestamp="2025-09-23T13:26:52.090Z" hostname="WIN-33AANMPCPKN" tests="3" failures="0" errors="0" skipped="0" time="0.0072832">
        <testcase classname="src/services/fileSystemService.test.ts" name="StandardFileSystemService &gt; readTextFile &gt; should read file content using fs" time="0.0038072">
        </testcase>
        <testcase classname="src/services/fileSystemService.test.ts" name="StandardFileSystemService &gt; readTextFile &gt; should propagate fs.readFile errors" time="0.0016877">
        </testcase>
        <testcase classname="src/services/fileSystemService.test.ts" name="StandardFileSystemService &gt; writeTextFile &gt; should write file content using fs" time="0.0002968">
        </testcase>
    </testsuite>
    <testsuite name="src/services/gitService.test.ts" timestamp="2025-09-23T13:26:52.091Z" hostname="WIN-33AANMPCPKN" tests="14" failures="0" errors="0" skipped="0" time="0.0925158">
        <testcase classname="src/services/gitService.test.ts" name="GitService &gt; constructor &gt; should successfully create an instance" time="0.0087223">
        </testcase>
        <testcase classname="src/services/gitService.test.ts" name="GitService &gt; verifyGitAvailability &gt; should resolve true if git --version command succeeds" time="0.0055717">
        </testcase>
        <testcase classname="src/services/gitService.test.ts" name="GitService &gt; verifyGitAvailability &gt; should resolve false if git --version command fails" time="0.0037052">
        </testcase>
        <testcase classname="src/services/gitService.test.ts" name="GitService &gt; initialize &gt; should throw an error if Git is not available" time="0.0017208">
        </testcase>
        <testcase classname="src/services/gitService.test.ts" name="GitService &gt; initialize &gt; should call setupShadowGitRepository if Git is available" time="0.0017961">
        </testcase>
        <testcase classname="src/services/gitService.test.ts" name="GitService &gt; setupShadowGitRepository &gt; should create history and repository directories" time="0.005554">
        </testcase>
        <testcase classname="src/services/gitService.test.ts" name="GitService &gt; setupShadowGitRepository &gt; should create a .gitconfig file with the correct content" time="0.0043534">
        </testcase>
        <testcase classname="src/services/gitService.test.ts" name="GitService &gt; setupShadowGitRepository &gt; should initialize git repo in historyDir if not already initialized" time="0.0036839">
        </testcase>
        <testcase classname="src/services/gitService.test.ts" name="GitService &gt; setupShadowGitRepository &gt; should not initialize git repo if already initialized" time="0.0237367">
        </testcase>
        <testcase classname="src/services/gitService.test.ts" name="GitService &gt; setupShadowGitRepository &gt; should copy .gitignore from projectRoot if it exists" time="0.0069853">
        </testcase>
        <testcase classname="src/services/gitService.test.ts" name="GitService &gt; setupShadowGitRepository &gt; should not create a .gitignore in shadow repo if project .gitignore does not exist" time="0.0056439">
        </testcase>
        <testcase classname="src/services/gitService.test.ts" name="GitService &gt; setupShadowGitRepository &gt; should throw an error if reading projectRoot .gitignore fails with other errors" time="0.0080343">
        </testcase>
        <testcase classname="src/services/gitService.test.ts" name="GitService &gt; setupShadowGitRepository &gt; should make an initial commit if no commits exist in history repo" time="0.0067705">
        </testcase>
        <testcase classname="src/services/gitService.test.ts" name="GitService &gt; setupShadowGitRepository &gt; should not make an initial commit if commits already exist" time="0.0048795">
        </testcase>
    </testsuite>
    <testsuite name="src/services/loopDetectionService.test.ts" timestamp="2025-09-23T13:26:52.092Z" hostname="WIN-33AANMPCPKN" tests="37" failures="0" errors="0" skipped="0" time="0.5370594">
        <testcase classname="src/services/loopDetectionService.test.ts" name="LoopDetectionService &gt; Tool Call Loop Detection &gt; should not detect a loop for fewer than TOOL_CALL_LOOP_THRESHOLD identical calls" time="0.0021799">
        </testcase>
        <testcase classname="src/services/loopDetectionService.test.ts" name="LoopDetectionService &gt; Tool Call Loop Detection &gt; should detect a loop on the TOOL_CALL_LOOP_THRESHOLD-th identical call" time="0.0017708">
        </testcase>
        <testcase classname="src/services/loopDetectionService.test.ts" name="LoopDetectionService &gt; Tool Call Loop Detection &gt; should detect a loop on subsequent identical calls" time="0.000193">
        </testcase>
        <testcase classname="src/services/loopDetectionService.test.ts" name="LoopDetectionService &gt; Tool Call Loop Detection &gt; should not detect a loop for different tool calls" time="0.0002866">
        </testcase>
        <testcase classname="src/services/loopDetectionService.test.ts" name="LoopDetectionService &gt; Tool Call Loop Detection &gt; should not reset tool call counter for other event types" time="0.0002293">
        </testcase>
        <testcase classname="src/services/loopDetectionService.test.ts" name="LoopDetectionService &gt; Tool Call Loop Detection &gt; should not detect a loop when disabled for session" time="0.0002597">
        </testcase>
        <testcase classname="src/services/loopDetectionService.test.ts" name="LoopDetectionService &gt; Content Loop Detection &gt; should not detect a loop for random content" time="0.362012">
        </testcase>
        <testcase classname="src/services/loopDetectionService.test.ts" name="LoopDetectionService &gt; Content Loop Detection &gt; should detect a loop when a chunk of content repeats consecutively" time="0.0013021">
        </testcase>
        <testcase classname="src/services/loopDetectionService.test.ts" name="LoopDetectionService &gt; Content Loop Detection &gt; should not detect a loop if repetitions are very far apart" time="0.0444622">
        </testcase>
        <testcase classname="src/services/loopDetectionService.test.ts" name="LoopDetectionService &gt; Content Loop Detection with Code Blocks &gt; should not detect a loop when repetitive content is inside a code block" time="0.0003462">
        </testcase>
        <testcase classname="src/services/loopDetectionService.test.ts" name="LoopDetectionService &gt; Content Loop Detection with Code Blocks &gt; should not detect loops when content transitions into a code block" time="0.0010967">
        </testcase>
        <testcase classname="src/services/loopDetectionService.test.ts" name="LoopDetectionService &gt; Content Loop Detection with Code Blocks &gt; should skip loop detection when already inside a code block (this.inCodeBlock)" time="0.0002867">
        </testcase>
        <testcase classname="src/services/loopDetectionService.test.ts" name="LoopDetectionService &gt; Content Loop Detection with Code Blocks &gt; should correctly track inCodeBlock state with multiple fence transitions" time="0.0002108">
        </testcase>
        <testcase classname="src/services/loopDetectionService.test.ts" name="LoopDetectionService &gt; Content Loop Detection with Code Blocks &gt; should detect a loop when repetitive content is outside a code block" time="0.0013551">
        </testcase>
        <testcase classname="src/services/loopDetectionService.test.ts" name="LoopDetectionService &gt; Content Loop Detection with Code Blocks &gt; should handle content with multiple code blocks and no loops" time="0.000222">
        </testcase>
        <testcase classname="src/services/loopDetectionService.test.ts" name="LoopDetectionService &gt; Content Loop Detection with Code Blocks &gt; should handle content with mixed code blocks and looping text" time="0.0011053">
        </testcase>
        <testcase classname="src/services/loopDetectionService.test.ts" name="LoopDetectionService &gt; Content Loop Detection with Code Blocks &gt; should not detect a loop for a long code block with some repeating tokens" time="0.0003598">
        </testcase>
        <testcase classname="src/services/loopDetectionService.test.ts" name="LoopDetectionService &gt; Content Loop Detection with Code Blocks &gt; should reset tracking when a code fence is found" time="0.0017012">
        </testcase>
        <testcase classname="src/services/loopDetectionService.test.ts" name="LoopDetectionService &gt; Content Loop Detection with Code Blocks &gt; should reset tracking when a table is detected" time="0.002544">
        </testcase>
        <testcase classname="src/services/loopDetectionService.test.ts" name="LoopDetectionService &gt; Content Loop Detection with Code Blocks &gt; should reset tracking when a list item is detected" time="0.0023317">
        </testcase>
        <testcase classname="src/services/loopDetectionService.test.ts" name="LoopDetectionService &gt; Content Loop Detection with Code Blocks &gt; should reset tracking when a heading is detected" time="0.0021266">
        </testcase>
        <testcase classname="src/services/loopDetectionService.test.ts" name="LoopDetectionService &gt; Content Loop Detection with Code Blocks &gt; should reset tracking when a blockquote is detected" time="0.0024923">
        </testcase>
        <testcase classname="src/services/loopDetectionService.test.ts" name="LoopDetectionService &gt; Content Loop Detection with Code Blocks &gt; should reset tracking for various list item formats" time="0.0130081">
        </testcase>
        <testcase classname="src/services/loopDetectionService.test.ts" name="LoopDetectionService &gt; Content Loop Detection with Code Blocks &gt; should reset tracking for various table formats" time="0.0408213">
        </testcase>
        <testcase classname="src/services/loopDetectionService.test.ts" name="LoopDetectionService &gt; Content Loop Detection with Code Blocks &gt; should reset tracking for various heading levels" time="0.0257259">
        </testcase>
        <testcase classname="src/services/loopDetectionService.test.ts" name="LoopDetectionService &gt; Edge Cases &gt; should handle empty content" time="0.0001657">
        </testcase>
        <testcase classname="src/services/loopDetectionService.test.ts" name="LoopDetectionService &gt; Divider Content Detection &gt; should not detect a loop for repeating divider-like content" time="0.0004093">
        </testcase>
        <testcase classname="src/services/loopDetectionService.test.ts" name="LoopDetectionService &gt; Divider Content Detection &gt; should not detect a loop for repeating complex box-drawing dividers" time="0.0006615">
        </testcase>
        <testcase classname="src/services/loopDetectionService.test.ts" name="LoopDetectionService &gt; Reset Functionality &gt; tool call should reset content count" time="0.000592">
        </testcase>
        <testcase classname="src/services/loopDetectionService.test.ts" name="LoopDetectionService &gt; General Behavior &gt; should return false for unhandled event types" time="0.0002046">
        </testcase>
        <testcase classname="src/services/loopDetectionService.test.ts" name="LoopDetectionService LLM Checks &gt; should not trigger LLM check before LLM_CHECK_AFTER_TURNS" time="0.0006978">
        </testcase>
        <testcase classname="src/services/loopDetectionService.test.ts" name="LoopDetectionService LLM Checks &gt; should trigger LLM check on the 30th turn" time="0.0084096">
        </testcase>
        <testcase classname="src/services/loopDetectionService.test.ts" name="LoopDetectionService LLM Checks &gt; should detect a cognitive loop when confidence is high" time="0.0027775">
            <system-err>
Repetitive actions

            </system-err>
        </testcase>
        <testcase classname="src/services/loopDetectionService.test.ts" name="LoopDetectionService LLM Checks &gt; should not detect a loop when confidence is low" time="0.0005316">
        </testcase>
        <testcase classname="src/services/loopDetectionService.test.ts" name="LoopDetectionService LLM Checks &gt; should adjust the check interval based on confidence" time="0.0002441">
        </testcase>
        <testcase classname="src/services/loopDetectionService.test.ts" name="LoopDetectionService LLM Checks &gt; should handle errors from generateJson gracefully" time="0.0111247">
            <system-out>
Error: API error
    at [90mE:\claude-code\pipedream\modelcontextprotocol\agentrpc\gemini-cli\packages\core\[39msrc\services\loopDetectionService.test.ts:742:26
    at file:///E:/claude-code/pipedream/modelcontextprotocol/agentrpc/gemini-cli/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:155:11
    at file:///E:/claude-code/pipedream/modelcontextprotocol/agentrpc/gemini-cli/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:752:26
    at file:///E:/claude-code/pipedream/modelcontextprotocol/agentrpc/gemini-cli/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:1897:20
    at new Promise (&lt;anonymous&gt;)
    at runWithTimeout (file:///E:/claude-code/pipedream/modelcontextprotocol/agentrpc/gemini-cli/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:1863:10)
    at runTest (file:///E:/claude-code/pipedream/modelcontextprotocol/agentrpc/gemini-cli/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:1574:12)
[90m    at processTicksAndRejections (node:internal/process/task_queues:105:5)[39m
    at runSuite (file:///E:/claude-code/pipedream/modelcontextprotocol/agentrpc/gemini-cli/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:1729:8)
    at runSuite (file:///E:/claude-code/pipedream/modelcontextprotocol/agentrpc/gemini-cli/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:1729:8)

            </system-out>
        </testcase>
        <testcase classname="src/services/loopDetectionService.test.ts" name="LoopDetectionService LLM Checks &gt; should not trigger LLM check when disabled for session" time="0.0003011">
        </testcase>
    </testsuite>
    <testsuite name="src/services/shellExecutionService.test.ts" timestamp="2025-09-23T13:26:52.096Z" hostname="WIN-33AANMPCPKN" tests="37" failures="0" errors="0" skipped="0" time="0.2482692">
        <testcase classname="src/services/shellExecutionService.test.ts" name="ShellExecutionService &gt; Successful Execution &gt; should execute a command and capture output" time="0.0392635">
            <system-err>
Failed to get locale charmap.

            </system-err>
        </testcase>
        <testcase classname="src/services/shellExecutionService.test.ts" name="ShellExecutionService &gt; Successful Execution &gt; should strip ANSI codes from output" time="0.0075528">
        </testcase>
        <testcase classname="src/services/shellExecutionService.test.ts" name="ShellExecutionService &gt; Successful Execution &gt; should correctly decode multi-byte characters split across chunks" time="0.0309618">
        </testcase>
        <testcase classname="src/services/shellExecutionService.test.ts" name="ShellExecutionService &gt; Successful Execution &gt; should handle commands with no output" time="0.0030372">
        </testcase>
        <testcase classname="src/services/shellExecutionService.test.ts" name="ShellExecutionService &gt; Successful Execution &gt; should call onPid with the process id" time="0.0030064">
        </testcase>
        <testcase classname="src/services/shellExecutionService.test.ts" name="ShellExecutionService &gt; pty interaction &gt; should write to the pty and trigger a render" time="0.0070367">
        </testcase>
        <testcase classname="src/services/shellExecutionService.test.ts" name="ShellExecutionService &gt; pty interaction &gt; should resize the pty and the headless terminal" time="0.0160147">
        </testcase>
        <testcase classname="src/services/shellExecutionService.test.ts" name="ShellExecutionService &gt; pty interaction &gt; should scroll the headless terminal" time="0.0203472">
        </testcase>
        <testcase classname="src/services/shellExecutionService.test.ts" name="ShellExecutionService &gt; Failed Execution &gt; should capture a non-zero exit code" time="0.0086125">
        </testcase>
        <testcase classname="src/services/shellExecutionService.test.ts" name="ShellExecutionService &gt; Failed Execution &gt; should capture a termination signal" time="0.0026587">
        </testcase>
        <testcase classname="src/services/shellExecutionService.test.ts" name="ShellExecutionService &gt; Failed Execution &gt; should handle a synchronous spawn error" time="0.0023596">
        </testcase>
        <testcase classname="src/services/shellExecutionService.test.ts" name="ShellExecutionService &gt; Aborting Commands &gt; should abort a running process and set the aborted flag" time="0.003117">
        </testcase>
        <testcase classname="src/services/shellExecutionService.test.ts" name="ShellExecutionService &gt; Binary Output &gt; should detect binary output and switch to progress events" time="0.0060095">
        </testcase>
        <testcase classname="src/services/shellExecutionService.test.ts" name="ShellExecutionService &gt; Binary Output &gt; should not emit data events after binary is detected" time="0.010583">
        </testcase>
        <testcase classname="src/services/shellExecutionService.test.ts" name="ShellExecutionService &gt; Platform-Specific Behavior &gt; should use cmd.exe on Windows" time="0.0020512">
        </testcase>
        <testcase classname="src/services/shellExecutionService.test.ts" name="ShellExecutionService &gt; Platform-Specific Behavior &gt; should use bash on Linux" time="0.0019493">
        </testcase>
        <testcase classname="src/services/shellExecutionService.test.ts" name="ShellExecutionService &gt; AnsiOutput rendering &gt; should call onOutputEvent with AnsiOutput when showColor is true" time="0.0187637">
        </testcase>
        <testcase classname="src/services/shellExecutionService.test.ts" name="ShellExecutionService &gt; AnsiOutput rendering &gt; should call onOutputEvent with AnsiOutput when showColor is false" time="0.0172606">
        </testcase>
        <testcase classname="src/services/shellExecutionService.test.ts" name="ShellExecutionService &gt; AnsiOutput rendering &gt; should handle multi-line output correctly when showColor is false" time="0.0142583">
        </testcase>
        <testcase classname="src/services/shellExecutionService.test.ts" name="ShellExecutionService child_process fallback &gt; Successful Execution &gt; should execute a command and capture stdout and stderr" time="0.0035579">
        </testcase>
        <testcase classname="src/services/shellExecutionService.test.ts" name="ShellExecutionService child_process fallback &gt; Successful Execution &gt; should strip ANSI codes from output" time="0.0020102">
        </testcase>
        <testcase classname="src/services/shellExecutionService.test.ts" name="ShellExecutionService child_process fallback &gt; Successful Execution &gt; should correctly decode multi-byte characters split across chunks" time="0.0016036">
        </testcase>
        <testcase classname="src/services/shellExecutionService.test.ts" name="ShellExecutionService child_process fallback &gt; Successful Execution &gt; should handle commands with no output" time="0.0010547">
        </testcase>
        <testcase classname="src/services/shellExecutionService.test.ts" name="ShellExecutionService child_process fallback &gt; Failed Execution &gt; should capture a non-zero exit code and format output correctly" time="0.0014442">
        </testcase>
        <testcase classname="src/services/shellExecutionService.test.ts" name="ShellExecutionService child_process fallback &gt; Failed Execution &gt; should capture a termination signal" time="0.000941">
        </testcase>
        <testcase classname="src/services/shellExecutionService.test.ts" name="ShellExecutionService child_process fallback &gt; Failed Execution &gt; should handle a spawn error" time="0.000996">
        </testcase>
        <testcase classname="src/services/shellExecutionService.test.ts" name="ShellExecutionService child_process fallback &gt; Failed Execution &gt; handles errors that do not fire the exit event" time="0.0007991">
        </testcase>
        <testcase classname="src/services/shellExecutionService.test.ts" name="ShellExecutionService child_process fallback &gt; Aborting Commands &gt; on &apos;linux&apos; &gt; should abort a running process and set the aborted flag" time="0.0011098">
        </testcase>
        <testcase classname="src/services/shellExecutionService.test.ts" name="ShellExecutionService child_process fallback &gt; Aborting Commands &gt; on &apos;win32&apos; &gt; should abort a running process and set the aborted flag" time="0.0009519">
        </testcase>
        <testcase classname="src/services/shellExecutionService.test.ts" name="ShellExecutionService child_process fallback &gt; Aborting Commands &gt; should gracefully attempt SIGKILL on linux if SIGTERM fails" time="0.0049332">
        </testcase>
        <testcase classname="src/services/shellExecutionService.test.ts" name="ShellExecutionService child_process fallback &gt; Binary Output &gt; should detect binary output and switch to progress events" time="0.0022424">
        </testcase>
        <testcase classname="src/services/shellExecutionService.test.ts" name="ShellExecutionService child_process fallback &gt; Binary Output &gt; should not emit data events after binary is detected" time="0.0014877">
        </testcase>
        <testcase classname="src/services/shellExecutionService.test.ts" name="ShellExecutionService child_process fallback &gt; Platform-Specific Behavior &gt; should use cmd.exe on Windows" time="0.001007">
        </testcase>
        <testcase classname="src/services/shellExecutionService.test.ts" name="ShellExecutionService child_process fallback &gt; Platform-Specific Behavior &gt; should use bash and detached process group on Linux" time="0.00082">
        </testcase>
        <testcase classname="src/services/shellExecutionService.test.ts" name="ShellExecutionService execution method selection &gt; should use node-pty when shouldUseNodePty is true and pty is available" time="0.002248">
        </testcase>
        <testcase classname="src/services/shellExecutionService.test.ts" name="ShellExecutionService execution method selection &gt; should use child_process when shouldUseNodePty is false" time="0.0012157">
        </testcase>
        <testcase classname="src/services/shellExecutionService.test.ts" name="ShellExecutionService execution method selection &gt; should fall back to child_process if pty is not available even if shouldUseNodePty is true" time="0.001012">
        </testcase>
    </testsuite>
    <testsuite name="src/telemetry/activity-detector.test.ts" timestamp="2025-09-23T13:26:52.100Z" hostname="WIN-33AANMPCPKN" tests="13" failures="0" errors="0" skipped="0" time="0.0071465">
        <testcase classname="src/telemetry/activity-detector.test.ts" name="ActivityDetector &gt; constructor &gt; should initialize with default idle threshold" time="0.0013846">
        </testcase>
        <testcase classname="src/telemetry/activity-detector.test.ts" name="ActivityDetector &gt; constructor &gt; should initialize with custom idle threshold" time="0.0001218">
        </testcase>
        <testcase classname="src/telemetry/activity-detector.test.ts" name="ActivityDetector &gt; recordActivity &gt; should update last activity time" time="0.0020759">
        </testcase>
        <testcase classname="src/telemetry/activity-detector.test.ts" name="ActivityDetector &gt; isUserActive &gt; should return true immediately after construction" time="0.0003339">
        </testcase>
        <testcase classname="src/telemetry/activity-detector.test.ts" name="ActivityDetector &gt; isUserActive &gt; should return true within idle threshold" time="0.0001984">
        </testcase>
        <testcase classname="src/telemetry/activity-detector.test.ts" name="ActivityDetector &gt; isUserActive &gt; should return false after idle threshold" time="0.0001837">
        </testcase>
        <testcase classname="src/telemetry/activity-detector.test.ts" name="ActivityDetector &gt; isUserActive &gt; should return true again after recording new activity" time="0.0002017">
        </testcase>
        <testcase classname="src/telemetry/activity-detector.test.ts" name="ActivityDetector &gt; getTimeSinceLastActivity &gt; should return time elapsed since last activity" time="0.0002147">
        </testcase>
        <testcase classname="src/telemetry/activity-detector.test.ts" name="ActivityDetector &gt; getLastActivityTime &gt; should return the timestamp of last activity" time="0.000306">
        </testcase>
        <testcase classname="src/telemetry/activity-detector.test.ts" name="Global Activity Detector Functions &gt; global instance &gt; should expose a global ActivityDetector via getActivityDetector" time="0.0000921">
        </testcase>
        <testcase classname="src/telemetry/activity-detector.test.ts" name="Global Activity Detector Functions &gt; getActivityDetector &gt; should always return the global instance" time="0.0000646">
        </testcase>
        <testcase classname="src/telemetry/activity-detector.test.ts" name="Global Activity Detector Functions &gt; recordUserActivity &gt; should record activity on existing detector" time="0.0002345">
        </testcase>
        <testcase classname="src/telemetry/activity-detector.test.ts" name="Global Activity Detector Functions &gt; isUserActive &gt; should reflect global detector state" time="0.0002339">
        </testcase>
    </testsuite>
    <testsuite name="src/telemetry/config.test.ts" timestamp="2025-09-23T13:26:52.102Z" hostname="WIN-33AANMPCPKN" tests="11" failures="0" errors="0" skipped="0" time="0.0093234">
        <testcase classname="src/telemetry/config.test.ts" name="telemetry/config helpers &gt; parseBooleanEnvFlag &gt; returns undefined for undefined" time="0.0018555">
        </testcase>
        <testcase classname="src/telemetry/config.test.ts" name="telemetry/config helpers &gt; parseBooleanEnvFlag &gt; parses true values" time="0.0009571">
        </testcase>
        <testcase classname="src/telemetry/config.test.ts" name="telemetry/config helpers &gt; parseBooleanEnvFlag &gt; parses false/other values as false" time="0.0002406">
        </testcase>
        <testcase classname="src/telemetry/config.test.ts" name="telemetry/config helpers &gt; parseTelemetryTargetValue &gt; parses string values" time="0.0002006">
        </testcase>
        <testcase classname="src/telemetry/config.test.ts" name="telemetry/config helpers &gt; parseTelemetryTargetValue &gt; accepts enum values" time="0.0001239">
        </testcase>
        <testcase classname="src/telemetry/config.test.ts" name="telemetry/config helpers &gt; parseTelemetryTargetValue &gt; returns undefined for unknown" time="0.0001167">
        </testcase>
        <testcase classname="src/telemetry/config.test.ts" name="telemetry/config helpers &gt; resolveTelemetrySettings &gt; falls back to settings when no argv/env provided" time="0.0011103">
        </testcase>
        <testcase classname="src/telemetry/config.test.ts" name="telemetry/config helpers &gt; resolveTelemetrySettings &gt; uses env over settings and argv over env" time="0.0003145">
        </testcase>
        <testcase classname="src/telemetry/config.test.ts" name="telemetry/config helpers &gt; resolveTelemetrySettings &gt; falls back to OTEL_EXPORTER_OTLP_ENDPOINT when GEMINI var is missing" time="0.0001442">
        </testcase>
        <testcase classname="src/telemetry/config.test.ts" name="telemetry/config helpers &gt; resolveTelemetrySettings &gt; throws on unknown protocol values" time="0.0017365">
        </testcase>
        <testcase classname="src/telemetry/config.test.ts" name="telemetry/config helpers &gt; resolveTelemetrySettings &gt; throws on unknown target values" time="0.0002956">
        </testcase>
    </testsuite>
    <testsuite name="src/telemetry/gcp-exporters.test.ts" timestamp="2025-09-23T13:26:52.103Z" hostname="WIN-33AANMPCPKN" tests="18" failures="0" errors="0" skipped="0" time="0.1020422">
        <testcase classname="src/telemetry/gcp-exporters.test.ts" name="GCP Exporters &gt; GcpTraceExporter &gt; should create a trace exporter with correct configuration" time="0.0014278">
        </testcase>
        <testcase classname="src/telemetry/gcp-exporters.test.ts" name="GCP Exporters &gt; GcpTraceExporter &gt; should create a trace exporter without project ID" time="0.0003747">
        </testcase>
        <testcase classname="src/telemetry/gcp-exporters.test.ts" name="GCP Exporters &gt; GcpMetricExporter &gt; should create a metric exporter with correct configuration" time="0.000248">
        </testcase>
        <testcase classname="src/telemetry/gcp-exporters.test.ts" name="GCP Exporters &gt; GcpMetricExporter &gt; should create a metric exporter without project ID" time="0.0001464">
        </testcase>
        <testcase classname="src/telemetry/gcp-exporters.test.ts" name="GCP Exporters &gt; GcpLogExporter &gt; constructor &gt; should create a log exporter with project ID" time="0.0016288">
        </testcase>
        <testcase classname="src/telemetry/gcp-exporters.test.ts" name="GCP Exporters &gt; GcpLogExporter &gt; constructor &gt; should create a log exporter without project ID" time="0.0002083">
        </testcase>
        <testcase classname="src/telemetry/gcp-exporters.test.ts" name="GCP Exporters &gt; GcpLogExporter &gt; export &gt; should export logs successfully" time="0.0162201">
        </testcase>
        <testcase classname="src/telemetry/gcp-exporters.test.ts" name="GCP Exporters &gt; GcpLogExporter &gt; export &gt; should handle export failures" time="0.0118978">
        </testcase>
        <testcase classname="src/telemetry/gcp-exporters.test.ts" name="GCP Exporters &gt; GcpLogExporter &gt; export &gt; should handle synchronous errors" time="0.0003757">
        </testcase>
        <testcase classname="src/telemetry/gcp-exporters.test.ts" name="GCP Exporters &gt; GcpLogExporter &gt; severity mapping &gt; should map OpenTelemetry severity numbers to Cloud Logging levels" time="0.0010275">
        </testcase>
        <testcase classname="src/telemetry/gcp-exporters.test.ts" name="GCP Exporters &gt; GcpLogExporter &gt; forceFlush &gt; should resolve immediately when no pending writes exist" time="0.000602">
        </testcase>
        <testcase classname="src/telemetry/gcp-exporters.test.ts" name="GCP Exporters &gt; GcpLogExporter &gt; forceFlush &gt; should wait for pending writes to complete" time="0.013718">
        </testcase>
        <testcase classname="src/telemetry/gcp-exporters.test.ts" name="GCP Exporters &gt; GcpLogExporter &gt; forceFlush &gt; should handle multiple pending writes" time="0.0004211">
        </testcase>
        <testcase classname="src/telemetry/gcp-exporters.test.ts" name="GCP Exporters &gt; GcpLogExporter &gt; forceFlush &gt; should handle write failures gracefully" time="0.015606">
        </testcase>
        <testcase classname="src/telemetry/gcp-exporters.test.ts" name="GCP Exporters &gt; GcpLogExporter &gt; shutdown &gt; should call forceFlush" time="0.0005598">
        </testcase>
        <testcase classname="src/telemetry/gcp-exporters.test.ts" name="GCP Exporters &gt; GcpLogExporter &gt; shutdown &gt; should handle shutdown gracefully" time="0.0002305">
        </testcase>
        <testcase classname="src/telemetry/gcp-exporters.test.ts" name="GCP Exporters &gt; GcpLogExporter &gt; shutdown &gt; should wait for pending writes before shutting down" time="0.019633">
        </testcase>
        <testcase classname="src/telemetry/gcp-exporters.test.ts" name="GCP Exporters &gt; GcpLogExporter &gt; shutdown &gt; should clear pending writes array after shutdown" time="0.0155521">
        </testcase>
    </testsuite>
    <testsuite name="src/telemetry/high-water-mark-tracker.test.ts" timestamp="2025-09-23T13:26:52.105Z" hostname="WIN-33AANMPCPKN" tests="18" failures="0" errors="0" skipped="0" time="0.011367">
        <testcase classname="src/telemetry/high-water-mark-tracker.test.ts" name="HighWaterMarkTracker &gt; constructor &gt; should initialize with default values" time="0.0018622">
        </testcase>
        <testcase classname="src/telemetry/high-water-mark-tracker.test.ts" name="HighWaterMarkTracker &gt; constructor &gt; should initialize with custom values" time="0.0001632">
        </testcase>
        <testcase classname="src/telemetry/high-water-mark-tracker.test.ts" name="HighWaterMarkTracker &gt; constructor &gt; should throw on negative threshold" time="0.0010651">
        </testcase>
        <testcase classname="src/telemetry/high-water-mark-tracker.test.ts" name="HighWaterMarkTracker &gt; shouldRecordMetric &gt; should return true for first measurement" time="0.0003002">
        </testcase>
        <testcase classname="src/telemetry/high-water-mark-tracker.test.ts" name="HighWaterMarkTracker &gt; shouldRecordMetric &gt; should return false for small increases" time="0.0001103">
        </testcase>
        <testcase classname="src/telemetry/high-water-mark-tracker.test.ts" name="HighWaterMarkTracker &gt; shouldRecordMetric &gt; should return true for significant increases" time="0.0001003">
        </testcase>
        <testcase classname="src/telemetry/high-water-mark-tracker.test.ts" name="HighWaterMarkTracker &gt; shouldRecordMetric &gt; should handle decreasing values correctly" time="0.0000891">
        </testcase>
        <testcase classname="src/telemetry/high-water-mark-tracker.test.ts" name="HighWaterMarkTracker &gt; shouldRecordMetric &gt; should update high-water mark when threshold exceeded" time="0.0001693">
        </testcase>
        <testcase classname="src/telemetry/high-water-mark-tracker.test.ts" name="HighWaterMarkTracker &gt; shouldRecordMetric &gt; should handle multiple metric types independently" time="0.0009627">
        </testcase>
        <testcase classname="src/telemetry/high-water-mark-tracker.test.ts" name="HighWaterMarkTracker &gt; smoothing functionality &gt; should reduce noise from garbage collection spikes" time="0.0001222">
        </testcase>
        <testcase classname="src/telemetry/high-water-mark-tracker.test.ts" name="HighWaterMarkTracker &gt; smoothing functionality &gt; should eventually respond to sustained growth" time="0.0001065">
        </testcase>
        <testcase classname="src/telemetry/high-water-mark-tracker.test.ts" name="HighWaterMarkTracker &gt; getHighWaterMark &gt; should return 0 for unknown metric types" time="0.0000925">
        </testcase>
        <testcase classname="src/telemetry/high-water-mark-tracker.test.ts" name="HighWaterMarkTracker &gt; getHighWaterMark &gt; should return correct value for known metric types" time="0.0000917">
        </testcase>
        <testcase classname="src/telemetry/high-water-mark-tracker.test.ts" name="HighWaterMarkTracker &gt; getAllHighWaterMarks &gt; should return empty object initially" time="0.0002295">
        </testcase>
        <testcase classname="src/telemetry/high-water-mark-tracker.test.ts" name="HighWaterMarkTracker &gt; getAllHighWaterMarks &gt; should return all recorded marks" time="0.0011607">
        </testcase>
        <testcase classname="src/telemetry/high-water-mark-tracker.test.ts" name="HighWaterMarkTracker &gt; resetHighWaterMark &gt; should reset specific metric type" time="0.0001567">
        </testcase>
        <testcase classname="src/telemetry/high-water-mark-tracker.test.ts" name="HighWaterMarkTracker &gt; resetAllHighWaterMarks &gt; should reset all metrics" time="0.000183">
        </testcase>
        <testcase classname="src/telemetry/high-water-mark-tracker.test.ts" name="HighWaterMarkTracker &gt; time-based cleanup &gt; should clean up old readings" time="0.0025787">
        </testcase>
    </testsuite>
    <testsuite name="src/telemetry/loggers.test.ts" timestamp="2025-09-23T13:26:52.107Z" hostname="WIN-33AANMPCPKN" tests="25" failures="0" errors="0" skipped="0" time="0.0693323">
        <testcase classname="src/telemetry/loggers.test.ts" name="loggers &gt; logChatCompression &gt; logs the chat compression event to Clearcut" time="0.0114267">
        </testcase>
        <testcase classname="src/telemetry/loggers.test.ts" name="loggers &gt; logChatCompression &gt; records the chat compression event to OTEL" time="0.0030038">
        </testcase>
        <testcase classname="src/telemetry/loggers.test.ts" name="loggers &gt; logCliConfiguration &gt; should log the cli configuration" time="0.0216954">
        </testcase>
        <testcase classname="src/telemetry/loggers.test.ts" name="loggers &gt; logUserPrompt &gt; should log a user prompt" time="0.0058344">
        </testcase>
        <testcase classname="src/telemetry/loggers.test.ts" name="loggers &gt; logUserPrompt &gt; should not log prompt if disabled" time="0.0010164">
        </testcase>
        <testcase classname="src/telemetry/loggers.test.ts" name="loggers &gt; logApiResponse &gt; should log an API response with all fields" time="0.0022237">
        </testcase>
        <testcase classname="src/telemetry/loggers.test.ts" name="loggers &gt; logApiRequest &gt; should log an API request with request_text" time="0.0015223">
        </testcase>
        <testcase classname="src/telemetry/loggers.test.ts" name="loggers &gt; logApiRequest &gt; should log an API request without request_text" time="0.0007041">
        </testcase>
        <testcase classname="src/telemetry/loggers.test.ts" name="loggers &gt; logFlashFallback &gt; should log flash fallback event" time="0.0007435">
        </testcase>
        <testcase classname="src/telemetry/loggers.test.ts" name="loggers &gt; logRipgrepFallback &gt; should log ripgrep fallback event" time="0.0013191">
        </testcase>
        <testcase classname="src/telemetry/loggers.test.ts" name="loggers &gt; logRipgrepFallback &gt; should log ripgrep fallback event with an error" time="0.0017611">
        </testcase>
        <testcase classname="src/telemetry/loggers.test.ts" name="loggers &gt; logToolCall &gt; should log a tool call with all fields" time="0.0022466">
        </testcase>
        <testcase classname="src/telemetry/loggers.test.ts" name="loggers &gt; logToolCall &gt; should log a tool call with a reject decision" time="0.0016196">
        </testcase>
        <testcase classname="src/telemetry/loggers.test.ts" name="loggers &gt; logToolCall &gt; should log a tool call with a modify decision" time="0.0011479">
        </testcase>
        <testcase classname="src/telemetry/loggers.test.ts" name="loggers &gt; logToolCall &gt; should log a tool call without a decision" time="0.0008921">
        </testcase>
        <testcase classname="src/telemetry/loggers.test.ts" name="loggers &gt; logToolCall &gt; should log a failed tool call with an error" time="0.0009789">
        </testcase>
        <testcase classname="src/telemetry/loggers.test.ts" name="loggers &gt; logToolCall &gt; should log a tool call with mcp_server_name for MCP tools" time="0.0008682">
        </testcase>
        <testcase classname="src/telemetry/loggers.test.ts" name="loggers &gt; logMalformedJsonResponse &gt; logs the event to Clearcut and OTEL" time="0.0011614">
        </testcase>
        <testcase classname="src/telemetry/loggers.test.ts" name="loggers &gt; logFileOperation &gt; should log a file operation event" time="0.001036">
        </testcase>
        <testcase classname="src/telemetry/loggers.test.ts" name="loggers &gt; logToolOutputTruncated &gt; should log a tool output truncated event" time="0.0007418">
        </testcase>
        <testcase classname="src/telemetry/loggers.test.ts" name="loggers &gt; logModelRouting &gt; should log the event to Clearcut and OTEL, and record metrics" time="0.0013214">
        </testcase>
        <testcase classname="src/telemetry/loggers.test.ts" name="loggers &gt; logModelRouting &gt; should only log to Clearcut if OTEL SDK is not initialized" time="0.0007824">
        </testcase>
        <testcase classname="src/telemetry/loggers.test.ts" name="loggers &gt; logExtensionInstall &gt; should log extension install event" time="0.0010555">
        </testcase>
        <testcase classname="src/telemetry/loggers.test.ts" name="loggers &gt; logExtensionUninstall &gt; should log extension uninstall event" time="0.0009497">
        </testcase>
        <testcase classname="src/telemetry/loggers.test.ts" name="loggers &gt; logExtensionEnable &gt; should log extension enable event" time="0.0009133">
        </testcase>
    </testsuite>
    <testsuite name="src/telemetry/metrics.test.ts" timestamp="2025-09-23T13:26:52.110Z" hostname="WIN-33AANMPCPKN" tests="16" failures="0" errors="0" skipped="0" time="0.048323">
        <testcase classname="src/telemetry/metrics.test.ts" name="Telemetry Metrics &gt; recordChatCompressionMetrics &gt; does not record metrics if not initialized" time="0.0071432">
        </testcase>
        <testcase classname="src/telemetry/metrics.test.ts" name="Telemetry Metrics &gt; recordChatCompressionMetrics &gt; records token compression with the correct attributes" time="0.005999">
        </testcase>
        <testcase classname="src/telemetry/metrics.test.ts" name="Telemetry Metrics &gt; recordTokenUsageMetrics &gt; should not record metrics if not initialized" time="0.0026014">
        </testcase>
        <testcase classname="src/telemetry/metrics.test.ts" name="Telemetry Metrics &gt; recordTokenUsageMetrics &gt; should record token usage with the correct attributes" time="0.0025176">
        </testcase>
        <testcase classname="src/telemetry/metrics.test.ts" name="Telemetry Metrics &gt; recordTokenUsageMetrics &gt; should record token usage for different types" time="0.0025759">
        </testcase>
        <testcase classname="src/telemetry/metrics.test.ts" name="Telemetry Metrics &gt; recordTokenUsageMetrics &gt; should handle different models" time="0.0022102">
        </testcase>
        <testcase classname="src/telemetry/metrics.test.ts" name="Telemetry Metrics &gt; recordFileOperationMetric &gt; should not record metrics if not initialized" time="0.0018677">
        </testcase>
        <testcase classname="src/telemetry/metrics.test.ts" name="Telemetry Metrics &gt; recordFileOperationMetric &gt; should record file creation with all attributes" time="0.0031614">
        </testcase>
        <testcase classname="src/telemetry/metrics.test.ts" name="Telemetry Metrics &gt; recordFileOperationMetric &gt; should record file read with minimal attributes" time="0.0038099">
        </testcase>
        <testcase classname="src/telemetry/metrics.test.ts" name="Telemetry Metrics &gt; recordFileOperationMetric &gt; should record file update with some attributes" time="0.0019777">
        </testcase>
        <testcase classname="src/telemetry/metrics.test.ts" name="Telemetry Metrics &gt; recordFileOperationMetric &gt; should record file operation without diffStat" time="0.0022577">
        </testcase>
        <testcase classname="src/telemetry/metrics.test.ts" name="Telemetry Metrics &gt; recordFileOperationMetric &gt; should record minimal file operation when optional parameters are undefined" time="0.0023842">
        </testcase>
        <testcase classname="src/telemetry/metrics.test.ts" name="Telemetry Metrics &gt; recordFileOperationMetric &gt; should not include diffStat attributes when diffStat is not provided" time="0.0019358">
        </testcase>
        <testcase classname="src/telemetry/metrics.test.ts" name="Telemetry Metrics &gt; recordModelRoutingMetrics &gt; should not record metrics if not initialized" time="0.0025763">
        </testcase>
        <testcase classname="src/telemetry/metrics.test.ts" name="Telemetry Metrics &gt; recordModelRoutingMetrics &gt; should record latency for a successful routing decision" time="0.0020322">
        </testcase>
        <testcase classname="src/telemetry/metrics.test.ts" name="Telemetry Metrics &gt; recordModelRoutingMetrics &gt; should record latency and failure for a failed routing decision" time="0.0019071">
        </testcase>
    </testsuite>
    <testsuite name="src/telemetry/rate-limiter.test.ts" timestamp="2025-09-23T13:26:52.112Z" hostname="WIN-33AANMPCPKN" tests="24" failures="0" errors="0" skipped="0" time="0.0103565">
        <testcase classname="src/telemetry/rate-limiter.test.ts" name="RateLimiter &gt; constructor &gt; should initialize with default interval" time="0.0013502">
        </testcase>
        <testcase classname="src/telemetry/rate-limiter.test.ts" name="RateLimiter &gt; constructor &gt; should initialize with custom interval" time="0.0001206">
        </testcase>
        <testcase classname="src/telemetry/rate-limiter.test.ts" name="RateLimiter &gt; constructor &gt; should throw on negative interval" time="0.0010285">
        </testcase>
        <testcase classname="src/telemetry/rate-limiter.test.ts" name="RateLimiter &gt; shouldRecord &gt; should allow first recording" time="0.0002554">
        </testcase>
        <testcase classname="src/telemetry/rate-limiter.test.ts" name="RateLimiter &gt; shouldRecord &gt; should block immediate subsequent recordings" time="0.0000879">
        </testcase>
        <testcase classname="src/telemetry/rate-limiter.test.ts" name="RateLimiter &gt; shouldRecord &gt; should allow recording after interval" time="0.0023471">
        </testcase>
        <testcase classname="src/telemetry/rate-limiter.test.ts" name="RateLimiter &gt; shouldRecord &gt; should handle different metric keys independently" time="0.0001362">
        </testcase>
        <testcase classname="src/telemetry/rate-limiter.test.ts" name="RateLimiter &gt; shouldRecord &gt; should use shorter interval for high priority events" time="0.0002364">
        </testcase>
        <testcase classname="src/telemetry/rate-limiter.test.ts" name="RateLimiter &gt; shouldRecord &gt; should still block high priority events if interval not met" time="0.0001892">
        </testcase>
        <testcase classname="src/telemetry/rate-limiter.test.ts" name="RateLimiter &gt; forceRecord &gt; should update last record time" time="0.000157">
        </testcase>
        <testcase classname="src/telemetry/rate-limiter.test.ts" name="RateLimiter &gt; forceRecord &gt; should block subsequent recordings after force record" time="0.0000751">
        </testcase>
        <testcase classname="src/telemetry/rate-limiter.test.ts" name="RateLimiter &gt; getTimeUntilNextAllowed &gt; should return 0 for new metric" time="0.0000724">
        </testcase>
        <testcase classname="src/telemetry/rate-limiter.test.ts" name="RateLimiter &gt; getTimeUntilNextAllowed &gt; should return correct time after recording" time="0.000227">
        </testcase>
        <testcase classname="src/telemetry/rate-limiter.test.ts" name="RateLimiter &gt; getTimeUntilNextAllowed &gt; should return 0 after interval has passed" time="0.0001745">
        </testcase>
        <testcase classname="src/telemetry/rate-limiter.test.ts" name="RateLimiter &gt; getTimeUntilNextAllowed &gt; should account for high priority interval" time="0.0003847">
        </testcase>
        <testcase classname="src/telemetry/rate-limiter.test.ts" name="RateLimiter &gt; getStats &gt; should return empty stats initially" time="0.0007404">
        </testcase>
        <testcase classname="src/telemetry/rate-limiter.test.ts" name="RateLimiter &gt; getStats &gt; should return correct stats after recordings" time="0.0002359">
        </testcase>
        <testcase classname="src/telemetry/rate-limiter.test.ts" name="RateLimiter &gt; getStats &gt; should handle single recording correctly" time="0.0001022">
        </testcase>
        <testcase classname="src/telemetry/rate-limiter.test.ts" name="RateLimiter &gt; reset &gt; should clear all rate limiting state" time="0.0001079">
        </testcase>
        <testcase classname="src/telemetry/rate-limiter.test.ts" name="RateLimiter &gt; cleanup &gt; should remove old entries" time="0.0002176">
        </testcase>
        <testcase classname="src/telemetry/rate-limiter.test.ts" name="RateLimiter &gt; cleanup &gt; should preserve recent entries" time="0.0001752">
        </testcase>
        <testcase classname="src/telemetry/rate-limiter.test.ts" name="RateLimiter &gt; cleanup &gt; should use default cleanup age" time="0.0001742">
        </testcase>
        <testcase classname="src/telemetry/rate-limiter.test.ts" name="RateLimiter &gt; edge cases &gt; should handle zero interval" time="0.000153">
        </testcase>
        <testcase classname="src/telemetry/rate-limiter.test.ts" name="RateLimiter &gt; edge cases &gt; should handle very large intervals" time="0.0001343">
        </testcase>
    </testsuite>
    <testsuite name="src/telemetry/sdk.test.ts" timestamp="2025-09-23T13:26:52.115Z" hostname="WIN-33AANMPCPKN" tests="9" failures="0" errors="0" skipped="0" time="0.0186775">
        <testcase classname="src/telemetry/sdk.test.ts" name="Telemetry SDK &gt; should use gRPC exporters when protocol is grpc" time="0.0073926">
        </testcase>
        <testcase classname="src/telemetry/sdk.test.ts" name="Telemetry SDK &gt; should use HTTP exporters when protocol is http" time="0.0017629">
        </testcase>
        <testcase classname="src/telemetry/sdk.test.ts" name="Telemetry SDK &gt; should parse gRPC endpoint correctly" time="0.0023065">
        </testcase>
        <testcase classname="src/telemetry/sdk.test.ts" name="Telemetry SDK &gt; should parse HTTP endpoint correctly" time="0.0009177">
        </testcase>
        <testcase classname="src/telemetry/sdk.test.ts" name="Telemetry SDK &gt; should use direct GCP exporters when target is gcp, project ID is set, and useCollector is false" time="0.0010255">
        </testcase>
        <testcase classname="src/telemetry/sdk.test.ts" name="Telemetry SDK &gt; should use OTLP exporters when target is gcp but useCollector is true" time="0.0008454">
        </testcase>
        <testcase classname="src/telemetry/sdk.test.ts" name="Telemetry SDK &gt; should not use GCP exporters when project ID environment variable is not set" time="0.0008144">
        </testcase>
        <testcase classname="src/telemetry/sdk.test.ts" name="Telemetry SDK &gt; should use GOOGLE_CLOUD_PROJECT as fallback when OTLP_GOOGLE_CLOUD_PROJECT is not set" time="0.0010028">
        </testcase>
        <testcase classname="src/telemetry/sdk.test.ts" name="Telemetry SDK &gt; should not use OTLP exporters when telemetryOutfile is set" time="0.0012482">
        </testcase>
    </testsuite>
    <testsuite name="src/telemetry/telemetry-utils.test.ts" timestamp="2025-09-23T13:26:52.116Z" hostname="WIN-33AANMPCPKN" tests="6" failures="0" errors="0" skipped="0" time="0.0035814">
        <testcase classname="src/telemetry/telemetry-utils.test.ts" name="getProgrammingLanguage &gt; should return the programming language when file_path is present" time="0.0016074">
        </testcase>
        <testcase classname="src/telemetry/telemetry-utils.test.ts" name="getProgrammingLanguage &gt; should return the programming language when absolute_path is present" time="0.0001599">
        </testcase>
        <testcase classname="src/telemetry/telemetry-utils.test.ts" name="getProgrammingLanguage &gt; should return the programming language when path is present" time="0.0001071">
        </testcase>
        <testcase classname="src/telemetry/telemetry-utils.test.ts" name="getProgrammingLanguage &gt; should return undefined when no file path is present" time="0.0001162">
        </testcase>
        <testcase classname="src/telemetry/telemetry-utils.test.ts" name="getProgrammingLanguage &gt; should handle unknown file extensions gracefully" time="0.0000881">
        </testcase>
        <testcase classname="src/telemetry/telemetry-utils.test.ts" name="getProgrammingLanguage &gt; should handle files with no extension" time="0.0000939">
        </testcase>
    </testsuite>
    <testsuite name="src/telemetry/telemetry.test.ts" timestamp="2025-09-23T13:26:52.117Z" hostname="WIN-33AANMPCPKN" tests="2" failures="0" errors="0" skipped="0" time="0.0169203">
        <testcase classname="src/telemetry/telemetry.test.ts" name="telemetry &gt; should initialize the telemetry service" time="0.0111491">
        </testcase>
        <testcase classname="src/telemetry/telemetry.test.ts" name="telemetry &gt; should shutdown the telemetry service" time="0.0042616">
        </testcase>
    </testsuite>
    <testsuite name="src/telemetry/uiTelemetry.test.ts" timestamp="2025-09-23T13:26:52.117Z" hostname="WIN-33AANMPCPKN" tests="19" failures="0" errors="0" skipped="0" time="0.040959">
        <testcase classname="src/telemetry/uiTelemetry.test.ts" name="UiTelemetryService &gt; should have correct initial metrics" time="0.0020916">
        </testcase>
        <testcase classname="src/telemetry/uiTelemetry.test.ts" name="UiTelemetryService &gt; should emit an update event when an event is added" time="0.0011778">
        </testcase>
        <testcase classname="src/telemetry/uiTelemetry.test.ts" name="UiTelemetryService &gt; API Response Event Processing &gt; should process a single ApiResponseEvent" time="0.0001786">
        </testcase>
        <testcase classname="src/telemetry/uiTelemetry.test.ts" name="UiTelemetryService &gt; API Response Event Processing &gt; should aggregate multiple ApiResponseEvents for the same model" time="0.0001567">
        </testcase>
        <testcase classname="src/telemetry/uiTelemetry.test.ts" name="UiTelemetryService &gt; API Response Event Processing &gt; should handle ApiResponseEvents for different models" time="0.0001856">
        </testcase>
        <testcase classname="src/telemetry/uiTelemetry.test.ts" name="UiTelemetryService &gt; API Error Event Processing &gt; should process a single ApiErrorEvent" time="0.0001565">
        </testcase>
        <testcase classname="src/telemetry/uiTelemetry.test.ts" name="UiTelemetryService &gt; API Error Event Processing &gt; should aggregate ApiErrorEvents and ApiResponseEvents" time="0.0001242">
        </testcase>
        <testcase classname="src/telemetry/uiTelemetry.test.ts" name="UiTelemetryService &gt; Tool Call Event Processing &gt; should process a single successful ToolCallEvent" time="0.028073">
        </testcase>
        <testcase classname="src/telemetry/uiTelemetry.test.ts" name="UiTelemetryService &gt; Tool Call Event Processing &gt; should process a single failed ToolCallEvent" time="0.0005539">
        </testcase>
        <testcase classname="src/telemetry/uiTelemetry.test.ts" name="UiTelemetryService &gt; Tool Call Event Processing &gt; should process a ToolCallEvent with modify decision" time="0.0008162">
        </testcase>
        <testcase classname="src/telemetry/uiTelemetry.test.ts" name="UiTelemetryService &gt; Tool Call Event Processing &gt; should process a ToolCallEvent without a decision" time="0.0006728">
        </testcase>
        <testcase classname="src/telemetry/uiTelemetry.test.ts" name="UiTelemetryService &gt; Tool Call Event Processing &gt; should aggregate multiple ToolCallEvents for the same tool" time="0.0013366">
        </testcase>
        <testcase classname="src/telemetry/uiTelemetry.test.ts" name="UiTelemetryService &gt; Tool Call Event Processing &gt; should handle ToolCallEvents for different tools" time="0.000952">
        </testcase>
        <testcase classname="src/telemetry/uiTelemetry.test.ts" name="UiTelemetryService &gt; resetLastPromptTokenCount &gt; should reset the last prompt token count to 0" time="0.0002878">
        </testcase>
        <testcase classname="src/telemetry/uiTelemetry.test.ts" name="UiTelemetryService &gt; resetLastPromptTokenCount &gt; should emit an update event when resetLastPromptTokenCount is called" time="0.0004022">
        </testcase>
        <testcase classname="src/telemetry/uiTelemetry.test.ts" name="UiTelemetryService &gt; resetLastPromptTokenCount &gt; should not affect other metrics when resetLastPromptTokenCount is called" time="0.0001214">
        </testcase>
        <testcase classname="src/telemetry/uiTelemetry.test.ts" name="UiTelemetryService &gt; resetLastPromptTokenCount &gt; should work correctly when called multiple times" time="0.0001844">
        </testcase>
        <testcase classname="src/telemetry/uiTelemetry.test.ts" name="UiTelemetryService &gt; Tool Call Event with Line Count Metadata &gt; should aggregate valid line count metadata" time="0.001293">
        </testcase>
        <testcase classname="src/telemetry/uiTelemetry.test.ts" name="UiTelemetryService &gt; Tool Call Event with Line Count Metadata &gt; should ignore null/undefined values in line count metadata" time="0.0007733">
        </testcase>
    </testsuite>
    <testsuite name="src/tools/diffOptions.test.ts" timestamp="2025-09-23T13:26:52.120Z" hostname="WIN-33AANMPCPKN" tests="9" failures="0" errors="0" skipped="0" time="0.0063946">
        <testcase classname="src/tools/diffOptions.test.ts" name="getDiffStat &gt; should return 0 for all stats when there are no changes" time="0.0030115">
        </testcase>
        <testcase classname="src/tools/diffOptions.test.ts" name="getDiffStat &gt; should correctly report model additions" time="0.00051">
        </testcase>
        <testcase classname="src/tools/diffOptions.test.ts" name="getDiffStat &gt; should correctly report model removals" time="0.0001592">
        </testcase>
        <testcase classname="src/tools/diffOptions.test.ts" name="getDiffStat &gt; should correctly report model modifications" time="0.0001488">
        </testcase>
        <testcase classname="src/tools/diffOptions.test.ts" name="getDiffStat &gt; should correctly report user additions" time="0.0001269">
        </testcase>
        <testcase classname="src/tools/diffOptions.test.ts" name="getDiffStat &gt; should correctly report user removals" time="0.0001192">
        </testcase>
        <testcase classname="src/tools/diffOptions.test.ts" name="getDiffStat &gt; should correctly report user modifications" time="0.0001414">
        </testcase>
        <testcase classname="src/tools/diffOptions.test.ts" name="getDiffStat &gt; should handle complex changes from both model and user" time="0.0005217">
        </testcase>
        <testcase classname="src/tools/diffOptions.test.ts" name="getDiffStat &gt; should report a single line modification as one addition and one removal" time="0.0002196">
        </testcase>
    </testsuite>
    <testsuite name="src/tools/edit.test.ts" timestamp="2025-09-23T13:26:52.121Z" hostname="WIN-33AANMPCPKN" tests="52" failures="0" errors="0" skipped="0" time="0.6199601">
        <testcase classname="src/tools/edit.test.ts" name="EditTool &gt; applyReplacement &gt; should return newString if isNewFile is true" time="0.0042087">
        </testcase>
        <testcase classname="src/tools/edit.test.ts" name="EditTool &gt; applyReplacement &gt; should return newString if currentContent is null and oldString is empty (defensive)" time="0.001548">
        </testcase>
        <testcase classname="src/tools/edit.test.ts" name="EditTool &gt; applyReplacement &gt; should return empty string if currentContent is null and oldString is not empty (defensive)" time="0.001148">
        </testcase>
        <testcase classname="src/tools/edit.test.ts" name="EditTool &gt; applyReplacement &gt; should replace oldString with newString in currentContent" time="0.0008366">
        </testcase>
        <testcase classname="src/tools/edit.test.ts" name="EditTool &gt; applyReplacement &gt; should return currentContent if oldString is empty and not a new file" time="0.0008398">
        </testcase>
        <testcase classname="src/tools/edit.test.ts" name="EditTool &gt; applyReplacement &gt; should treat $ literally and not as replacement pattern" time="0.0007713">
        </testcase>
        <testcase classname="src/tools/edit.test.ts" name="EditTool &gt; applyReplacement &gt; should treat $&apos; literally and not as a replacement pattern" time="0.0007489">
        </testcase>
        <testcase classname="src/tools/edit.test.ts" name="EditTool &gt; applyReplacement &gt; should treat $&amp; literally and not as a replacement pattern" time="0.0007908">
        </testcase>
        <testcase classname="src/tools/edit.test.ts" name="EditTool &gt; applyReplacement &gt; should treat $` literally and not as a replacement pattern" time="0.0007949">
        </testcase>
        <testcase classname="src/tools/edit.test.ts" name="EditTool &gt; applyReplacement &gt; should treat $1, $2 capture groups literally" time="0.0009087">
        </testcase>
        <testcase classname="src/tools/edit.test.ts" name="EditTool &gt; applyReplacement &gt; should use replaceAll for normal strings without problematic $ sequences" time="0.0007985">
        </testcase>
        <testcase classname="src/tools/edit.test.ts" name="EditTool &gt; applyReplacement &gt; should handle multiple occurrences with problematic $ sequences" time="0.0008479">
        </testcase>
        <testcase classname="src/tools/edit.test.ts" name="EditTool &gt; applyReplacement &gt; should handle complex regex patterns with $ at end" time="0.0008074">
        </testcase>
        <testcase classname="src/tools/edit.test.ts" name="EditTool &gt; applyReplacement &gt; should handle empty replacement with problematic $ in newString" time="0.0008232">
        </testcase>
        <testcase classname="src/tools/edit.test.ts" name="EditTool &gt; applyReplacement &gt; should handle $$ (escaped dollar) correctly" time="0.0007909">
        </testcase>
        <testcase classname="src/tools/edit.test.ts" name="EditTool &gt; validateToolParams &gt; should return null for valid params" time="0.0313763">
        </testcase>
        <testcase classname="src/tools/edit.test.ts" name="EditTool &gt; validateToolParams &gt; should return error for relative path" time="0.0031168">
        </testcase>
        <testcase classname="src/tools/edit.test.ts" name="EditTool &gt; validateToolParams &gt; should return error for path outside root" time="0.0028184">
        </testcase>
        <testcase classname="src/tools/edit.test.ts" name="EditTool &gt; shouldConfirmExecute &gt; should throw an error if params are invalid" time="0.033682">
        </testcase>
        <testcase classname="src/tools/edit.test.ts" name="EditTool &gt; shouldConfirmExecute &gt; should request confirmation for valid edit" time="0.0104555">
        </testcase>
        <testcase classname="src/tools/edit.test.ts" name="EditTool &gt; shouldConfirmExecute &gt; should return false if old_string is not found (ensureCorrectEdit returns 0)" time="0.0066851">
            <system-out>
Error: Failed to edit, could not find the string to replace.

            </system-out>
        </testcase>
        <testcase classname="src/tools/edit.test.ts" name="EditTool &gt; shouldConfirmExecute &gt; should return false if multiple occurrences of old_string are found (ensureCorrectEdit returns &gt; 1)" time="0.004594">
            <system-out>
Error: Failed to edit, expected 1 occurrence but found 2.

            </system-out>
        </testcase>
        <testcase classname="src/tools/edit.test.ts" name="EditTool &gt; shouldConfirmExecute &gt; should request confirmation for creating a new file (empty old_string)" time="0.0032294">
        </testcase>
        <testcase classname="src/tools/edit.test.ts" name="EditTool &gt; shouldConfirmExecute &gt; should use corrected params from ensureCorrectEdit for diff generation" time="0.0060152">
        </testcase>
        <testcase classname="src/tools/edit.test.ts" name="EditTool &gt; execute &gt; should throw error if file path is not absolute" time="0.0547348">
        </testcase>
        <testcase classname="src/tools/edit.test.ts" name="EditTool &gt; execute &gt; should throw error if file path is empty" time="0.0031094">
        </testcase>
        <testcase classname="src/tools/edit.test.ts" name="EditTool &gt; execute &gt; should edit an existing file and return diff with fileName" time="0.0068055">
        </testcase>
        <testcase classname="src/tools/edit.test.ts" name="EditTool &gt; execute &gt; should create a new file if old_string is empty and file does not exist, and return created message" time="0.0055808">
        </testcase>
        <testcase classname="src/tools/edit.test.ts" name="EditTool &gt; execute &gt; should return error if old_string is not found in file" time="0.0055114">
        </testcase>
        <testcase classname="src/tools/edit.test.ts" name="EditTool &gt; execute &gt; should return error if multiple occurrences of old_string are found" time="0.0039373">
        </testcase>
        <testcase classname="src/tools/edit.test.ts" name="EditTool &gt; execute &gt; should successfully replace multiple occurrences when expected_replacements specified" time="0.0052884">
        </testcase>
        <testcase classname="src/tools/edit.test.ts" name="EditTool &gt; execute &gt; should return error if expected_replacements does not match actual occurrences" time="0.0036797">
        </testcase>
        <testcase classname="src/tools/edit.test.ts" name="EditTool &gt; execute &gt; should return error if trying to create a file that already exists (empty old_string)" time="0.0039778">
        </testcase>
        <testcase classname="src/tools/edit.test.ts" name="EditTool &gt; execute &gt; should include modification message when proposed content is modified" time="0.0056287">
        </testcase>
        <testcase classname="src/tools/edit.test.ts" name="EditTool &gt; execute &gt; should not include modification message when proposed content is not modified" time="0.006407">
        </testcase>
        <testcase classname="src/tools/edit.test.ts" name="EditTool &gt; execute &gt; should not include modification message when modified_by_user is not provided" time="0.004004">
        </testcase>
        <testcase classname="src/tools/edit.test.ts" name="EditTool &gt; execute &gt; should return error if old_string and new_string are identical" time="0.0040045">
        </testcase>
        <testcase classname="src/tools/edit.test.ts" name="EditTool &gt; execute &gt; should return EDIT_NO_CHANGE error if replacement results in identical content" time="0.0041646">
        </testcase>
        <testcase classname="src/tools/edit.test.ts" name="EditTool &gt; Error Scenarios &gt; should return FILE_NOT_FOUND error" time="0.003883">
        </testcase>
        <testcase classname="src/tools/edit.test.ts" name="EditTool &gt; Error Scenarios &gt; should return ATTEMPT_TO_CREATE_EXISTING_FILE error" time="0.0040841">
        </testcase>
        <testcase classname="src/tools/edit.test.ts" name="EditTool &gt; Error Scenarios &gt; should return NO_OCCURRENCE_FOUND error" time="0.0725979">
        </testcase>
        <testcase classname="src/tools/edit.test.ts" name="EditTool &gt; Error Scenarios &gt; should return EXPECTED_OCCURRENCE_MISMATCH error" time="0.0524009">
        </testcase>
        <testcase classname="src/tools/edit.test.ts" name="EditTool &gt; Error Scenarios &gt; should return NO_CHANGE error" time="0.0921423">
        </testcase>
        <testcase classname="src/tools/edit.test.ts" name="EditTool &gt; Error Scenarios &gt; should throw INVALID_PARAMETERS error for relative path" time="0.013274">
        </testcase>
        <testcase classname="src/tools/edit.test.ts" name="EditTool &gt; Error Scenarios &gt; should return FILE_WRITE_FAILURE on write error" time="0.0631305">
        </testcase>
        <testcase classname="src/tools/edit.test.ts" name="EditTool &gt; getDescription &gt; should return &quot;No file changes to...&quot; if old_string and new_string are the same" time="0.0045863">
        </testcase>
        <testcase classname="src/tools/edit.test.ts" name="EditTool &gt; getDescription &gt; should return a snippet of old and new strings if they are different" time="0.0563754">
        </testcase>
        <testcase classname="src/tools/edit.test.ts" name="EditTool &gt; getDescription &gt; should handle very short strings correctly in the description" time="0.0036059">
        </testcase>
        <testcase classname="src/tools/edit.test.ts" name="EditTool &gt; getDescription &gt; should truncate long strings in the description" time="0.0039071">
        </testcase>
        <testcase classname="src/tools/edit.test.ts" name="EditTool &gt; workspace boundary validation &gt; should validate paths are within workspace root" time="0.0031048">
        </testcase>
        <testcase classname="src/tools/edit.test.ts" name="EditTool &gt; workspace boundary validation &gt; should reject paths outside workspace root" time="0.0027159">
        </testcase>
        <testcase classname="src/tools/edit.test.ts" name="EditTool &gt; IDE mode &gt; should call ideClient.openDiff and update params on confirmation" time="0.0065288">
        </testcase>
    </testsuite>
    <testsuite name="src/tools/glob.test.ts" timestamp="2025-09-23T13:26:52.126Z" hostname="WIN-33AANMPCPKN" tests="38" failures="0" errors="0" skipped="0" time="8.8767565">
        <testcase classname="src/tools/glob.test.ts" name="GlobTool &gt; execute &gt; should find files matching a simple pattern in the root" time="0.5146113">
        </testcase>
        <testcase classname="src/tools/glob.test.ts" name="GlobTool &gt; execute &gt; should find files case-sensitively when case_sensitive is true" time="0.2080222">
        </testcase>
        <testcase classname="src/tools/glob.test.ts" name="GlobTool &gt; execute &gt; should find files case-insensitively by default (pattern: *.TXT)" time="0.3535914">
        </testcase>
        <testcase classname="src/tools/glob.test.ts" name="GlobTool &gt; execute &gt; should find files case-insensitively when case_sensitive is false (pattern: *.TXT)" time="0.6011134">
        </testcase>
        <testcase classname="src/tools/glob.test.ts" name="GlobTool &gt; execute &gt; should find files using a pattern that includes a subdirectory" time="0.0618461">
        </testcase>
        <testcase classname="src/tools/glob.test.ts" name="GlobTool &gt; execute &gt; should find files in a specified relative path (relative to rootDir)" time="0.2727943">
        </testcase>
        <testcase classname="src/tools/glob.test.ts" name="GlobTool &gt; execute &gt; should find files using a deep globstar pattern (e.g., **/*.log)" time="0.0721825">
        </testcase>
        <testcase classname="src/tools/glob.test.ts" name="GlobTool &gt; execute &gt; should return &quot;No files found&quot; message when pattern matches nothing" time="0.6483605">
        </testcase>
        <testcase classname="src/tools/glob.test.ts" name="GlobTool &gt; execute &gt; should find files with special characters in the name" time="1.2687242">
        </testcase>
        <testcase classname="src/tools/glob.test.ts" name="GlobTool &gt; execute &gt; should find files with special characters like [] and () in the path" time="0.2220172">
        </testcase>
        <testcase classname="src/tools/glob.test.ts" name="GlobTool &gt; execute &gt; should correctly sort files by modification time (newest first)" time="0.0753502">
        </testcase>
        <testcase classname="src/tools/glob.test.ts" name="GlobTool &gt; execute &gt; should return a PATH_NOT_IN_WORKSPACE error if path is outside workspace" time="0.0713457">
        </testcase>
        <testcase classname="src/tools/glob.test.ts" name="GlobTool &gt; execute &gt; should return a GLOB_EXECUTION_ERROR on glob failure" time="0.5129145">
            <system-err>
GlobLogic execute Error: Glob failed Error: Glob failed
    at [90mE:\claude-code\pipedream\modelcontextprotocol\agentrpc\gemini-cli\packages\core\[39msrc\tools\glob.test.ts:231:46
    at file:///E:/claude-code/pipedream/modelcontextprotocol/agentrpc/gemini-cli/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:155:11
    at file:///E:/claude-code/pipedream/modelcontextprotocol/agentrpc/gemini-cli/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:752:26
    at file:///E:/claude-code/pipedream/modelcontextprotocol/agentrpc/gemini-cli/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:1897:20
    at new Promise (&lt;anonymous&gt;)
    at runWithTimeout (file:///E:/claude-code/pipedream/modelcontextprotocol/agentrpc/gemini-cli/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:1863:10)
    at runTest (file:///E:/claude-code/pipedream/modelcontextprotocol/agentrpc/gemini-cli/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:1574:12)
    at runSuite (file:///E:/claude-code/pipedream/modelcontextprotocol/agentrpc/gemini-cli/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:1729:8)
    at runSuite (file:///E:/claude-code/pipedream/modelcontextprotocol/agentrpc/gemini-cli/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:1729:8)
    at runSuite (file:///E:/claude-code/pipedream/modelcontextprotocol/agentrpc/gemini-cli/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:1729:8)

            </system-err>
        </testcase>
        <testcase classname="src/tools/glob.test.ts" name="GlobTool &gt; validateToolParams &gt; should return null for valid parameters (pattern only)" time="0.1912913">
        </testcase>
        <testcase classname="src/tools/glob.test.ts" name="GlobTool &gt; validateToolParams &gt; should return null for valid parameters (pattern and path)" time="0.1776294">
        </testcase>
        <testcase classname="src/tools/glob.test.ts" name="GlobTool &gt; validateToolParams &gt; should return null for valid parameters (pattern, path, and case_sensitive)" time="0.6634078">
        </testcase>
        <testcase classname="src/tools/glob.test.ts" name="GlobTool &gt; validateToolParams &gt; should return error if pattern is missing (schema validation)" time="0.1902145">
        </testcase>
        <testcase classname="src/tools/glob.test.ts" name="GlobTool &gt; validateToolParams &gt; should return error if pattern is an empty string" time="0.2353714">
        </testcase>
        <testcase classname="src/tools/glob.test.ts" name="GlobTool &gt; validateToolParams &gt; should return error if pattern is only whitespace" time="0.0869756">
        </testcase>
        <testcase classname="src/tools/glob.test.ts" name="GlobTool &gt; validateToolParams &gt; should return error if path is provided but is not a string (schema validation)" time="0.0855364">
        </testcase>
        <testcase classname="src/tools/glob.test.ts" name="GlobTool &gt; validateToolParams &gt; should return error if case_sensitive is provided but is not a boolean (schema validation)" time="0.6001793">
        </testcase>
        <testcase classname="src/tools/glob.test.ts" name="GlobTool &gt; validateToolParams &gt; should return error if search path resolves outside the tool&apos;s root directory" time="0.9816882">
        </testcase>
        <testcase classname="src/tools/glob.test.ts" name="GlobTool &gt; validateToolParams &gt; should return error if specified search path does not exist" time="0.0880948">
        </testcase>
        <testcase classname="src/tools/glob.test.ts" name="GlobTool &gt; validateToolParams &gt; should return error if specified search path is a file, not a directory" time="0.0777041">
        </testcase>
        <testcase classname="src/tools/glob.test.ts" name="GlobTool &gt; workspace boundary validation &gt; should validate search paths are within workspace boundaries" time="0.0759135">
        </testcase>
        <testcase classname="src/tools/glob.test.ts" name="GlobTool &gt; workspace boundary validation &gt; should provide clear error messages when path is outside workspace" time="0.0631793">
        </testcase>
        <testcase classname="src/tools/glob.test.ts" name="GlobTool &gt; workspace boundary validation &gt; should work with paths in workspace subdirectories" time="0.0723633">
        </testcase>
        <testcase classname="src/tools/glob.test.ts" name="GlobTool &gt; ignore file handling &gt; should respect .gitignore files by default" time="0.1077086">
        </testcase>
        <testcase classname="src/tools/glob.test.ts" name="GlobTool &gt; ignore file handling &gt; should respect .geminiignore files by default" time="0.1420703">
        </testcase>
        <testcase classname="src/tools/glob.test.ts" name="GlobTool &gt; ignore file handling &gt; should not respect .gitignore when respect_git_ignore is false" time="0.067466">
        </testcase>
        <testcase classname="src/tools/glob.test.ts" name="GlobTool &gt; ignore file handling &gt; should not respect .geminiignore when respect_gemini_ignore is false" time="0.0818759">
        </testcase>
        <testcase classname="src/tools/glob.test.ts" name="sortFileEntries &gt; should sort a mix of recent and older files correctly" time="0.0011129">
        </testcase>
        <testcase classname="src/tools/glob.test.ts" name="sortFileEntries &gt; should sort only recent files by mtime descending" time="0.0001517">
        </testcase>
        <testcase classname="src/tools/glob.test.ts" name="sortFileEntries &gt; should sort only older files alphabetically by path" time="0.0001251">
        </testcase>
        <testcase classname="src/tools/glob.test.ts" name="sortFileEntries &gt; should handle an empty array" time="0.0000797">
        </testcase>
        <testcase classname="src/tools/glob.test.ts" name="sortFileEntries &gt; should correctly sort files when mtimes are identical for older files" time="0.0001026">
        </testcase>
        <testcase classname="src/tools/glob.test.ts" name="sortFileEntries &gt; should correctly sort files when mtimes are identical for recent files (maintaining mtime sort)" time="0.0003654">
        </testcase>
        <testcase classname="src/tools/glob.test.ts" name="sortFileEntries &gt; should use recencyThresholdMs parameter correctly" time="0.0003452">
        </testcase>
    </testsuite>
    <testsuite name="src/tools/grep.test.ts" timestamp="2025-09-23T13:26:52.131Z" hostname="WIN-33AANMPCPKN" tests="24" failures="0" errors="0" skipped="0" time="0.8955491">
        <testcase classname="src/tools/grep.test.ts" name="GrepTool &gt; validateToolParams &gt; should return null for valid params (pattern only)" time="0.0792938">
        </testcase>
        <testcase classname="src/tools/grep.test.ts" name="GrepTool &gt; validateToolParams &gt; should return null for valid params (pattern and path)" time="0.0165455">
        </testcase>
        <testcase classname="src/tools/grep.test.ts" name="GrepTool &gt; validateToolParams &gt; should return null for valid params (pattern, path, and include)" time="0.006732">
        </testcase>
        <testcase classname="src/tools/grep.test.ts" name="GrepTool &gt; validateToolParams &gt; should return error if pattern is missing" time="0.005761">
        </testcase>
        <testcase classname="src/tools/grep.test.ts" name="GrepTool &gt; validateToolParams &gt; should return error for invalid regex pattern" time="0.0093831">
        </testcase>
        <testcase classname="src/tools/grep.test.ts" name="GrepTool &gt; validateToolParams &gt; should return error if path does not exist" time="0.0103586">
        </testcase>
        <testcase classname="src/tools/grep.test.ts" name="GrepTool &gt; validateToolParams &gt; should return error if path is a file, not a directory" time="0.0106085">
        </testcase>
        <testcase classname="src/tools/grep.test.ts" name="GrepTool &gt; execute &gt; should find matches for a simple pattern in all files" time="0.0573016">
            <system-out>
GrepLogic: Falling back to JavaScript grep implementation.

            </system-out>
        </testcase>
        <testcase classname="src/tools/grep.test.ts" name="GrepTool &gt; execute &gt; should find matches in a specific path" time="0.0476749">
            <system-out>
GrepLogic: Falling back to JavaScript grep implementation.

            </system-out>
        </testcase>
        <testcase classname="src/tools/grep.test.ts" name="GrepTool &gt; execute &gt; should find matches with an include glob" time="0.0266824">
            <system-out>
GrepLogic: Falling back to JavaScript grep implementation.

            </system-out>
        </testcase>
        <testcase classname="src/tools/grep.test.ts" name="GrepTool &gt; execute &gt; should find matches with an include glob and path" time="0.0315987">
            <system-out>
GrepLogic: Falling back to JavaScript grep implementation.

            </system-out>
        </testcase>
        <testcase classname="src/tools/grep.test.ts" name="GrepTool &gt; execute &gt; should return &quot;No matches found&quot; when pattern does not exist" time="0.0352285">
            <system-out>
GrepLogic: Falling back to JavaScript grep implementation.

            </system-out>
        </testcase>
        <testcase classname="src/tools/grep.test.ts" name="GrepTool &gt; execute &gt; should handle regex special characters correctly" time="0.0878503">
            <system-out>
GrepLogic: Falling back to JavaScript grep implementation.

            </system-out>
        </testcase>
        <testcase classname="src/tools/grep.test.ts" name="GrepTool &gt; execute &gt; should be case-insensitive by default (JS fallback)" time="0.0717389">
            <system-out>
GrepLogic: Falling back to JavaScript grep implementation.

            </system-out>
        </testcase>
        <testcase classname="src/tools/grep.test.ts" name="GrepTool &gt; execute &gt; should throw an error if params are invalid" time="0.0129359">
        </testcase>
        <testcase classname="src/tools/grep.test.ts" name="GrepTool &gt; execute &gt; should return a GREP_EXECUTION_ERROR on failure" time="0.0454596">
            <system-out>
GrepLogic: Falling back to JavaScript grep implementation.

            </system-out>
            <system-err>
GrepLogic: Error in performGrepSearch (Strategy: javascript fallback): filesStream is not async iterable

Error during GrepLogic execution: TypeError: filesStream is not async iterable

            </system-err>
        </testcase>
        <testcase classname="src/tools/grep.test.ts" name="GrepTool &gt; multi-directory workspace &gt; should search across all workspace directories when no path is specified" time="0.1472876">
            <system-out>
GrepLogic: Falling back to JavaScript grep implementation.

GrepLogic: Falling back to JavaScript grep implementation.

            </system-out>
        </testcase>
        <testcase classname="src/tools/grep.test.ts" name="GrepTool &gt; multi-directory workspace &gt; should search only specified path within workspace directories" time="0.0838519">
            <system-out>
GrepLogic: Falling back to JavaScript grep implementation.

            </system-out>
        </testcase>
        <testcase classname="src/tools/grep.test.ts" name="GrepTool &gt; getDescription &gt; should generate correct description with pattern only" time="0.0127699">
        </testcase>
        <testcase classname="src/tools/grep.test.ts" name="GrepTool &gt; getDescription &gt; should generate correct description with pattern and include" time="0.0586172">
        </testcase>
        <testcase classname="src/tools/grep.test.ts" name="GrepTool &gt; getDescription &gt; should generate correct description with pattern and path" time="0.0068016">
        </testcase>
        <testcase classname="src/tools/grep.test.ts" name="GrepTool &gt; getDescription &gt; should indicate searching across all workspace directories when no path specified" time="0.007393">
        </testcase>
        <testcase classname="src/tools/grep.test.ts" name="GrepTool &gt; getDescription &gt; should generate correct description with pattern, include, and path" time="0.0112243">
        </testcase>
        <testcase classname="src/tools/grep.test.ts" name="GrepTool &gt; getDescription &gt; should use ./ for root path in description" time="0.0080906">
        </testcase>
    </testsuite>
    <testsuite name="src/tools/ls.test.ts" timestamp="2025-09-23T13:26:52.135Z" hostname="WIN-33AANMPCPKN" tests="22" failures="0" errors="0" skipped="0" time="1.4839495">
        <testcase classname="src/tools/ls.test.ts" name="LSTool &gt; parameter validation &gt; should accept valid absolute paths within workspace" time="0.0657142">
        </testcase>
        <testcase classname="src/tools/ls.test.ts" name="LSTool &gt; parameter validation &gt; should reject relative paths" time="0.0204366">
        </testcase>
        <testcase classname="src/tools/ls.test.ts" name="LSTool &gt; parameter validation &gt; should reject paths outside workspace with clear error message" time="0.0039478">
        </testcase>
        <testcase classname="src/tools/ls.test.ts" name="LSTool &gt; parameter validation &gt; should accept paths in secondary workspace directory" time="0.0073375">
        </testcase>
        <testcase classname="src/tools/ls.test.ts" name="LSTool &gt; execute &gt; should list files in a directory" time="0.4236132">
        </testcase>
        <testcase classname="src/tools/ls.test.ts" name="LSTool &gt; execute &gt; should list files from secondary workspace directory" time="0.3929533">
        </testcase>
        <testcase classname="src/tools/ls.test.ts" name="LSTool &gt; execute &gt; should handle empty directories" time="0.2314606">
        </testcase>
        <testcase classname="src/tools/ls.test.ts" name="LSTool &gt; execute &gt; should respect ignore patterns" time="0.0075394">
        </testcase>
        <testcase classname="src/tools/ls.test.ts" name="LSTool &gt; execute &gt; should respect gitignore patterns" time="0.0083355">
        </testcase>
        <testcase classname="src/tools/ls.test.ts" name="LSTool &gt; execute &gt; should respect geminiignore patterns" time="0.0070276">
        </testcase>
        <testcase classname="src/tools/ls.test.ts" name="LSTool &gt; execute &gt; should handle non-directory paths" time="0.0046839">
        </testcase>
        <testcase classname="src/tools/ls.test.ts" name="LSTool &gt; execute &gt; should handle non-existent paths" time="0.0037901">
        </testcase>
        <testcase classname="src/tools/ls.test.ts" name="LSTool &gt; execute &gt; should sort directories first, then files alphabetically" time="0.012523">
        </testcase>
        <testcase classname="src/tools/ls.test.ts" name="LSTool &gt; execute &gt; should handle permission errors gracefully" time="0.0055494">
        </testcase>
        <testcase classname="src/tools/ls.test.ts" name="LSTool &gt; execute &gt; should throw for invalid params at build time" time="0.0031365">
        </testcase>
        <testcase classname="src/tools/ls.test.ts" name="LSTool &gt; execute &gt; should handle errors accessing individual files during listing" time="0.0094392">
        </testcase>
        <testcase classname="src/tools/ls.test.ts" name="LSTool &gt; getDescription &gt; should return shortened relative path" time="0.0039397">
        </testcase>
        <testcase classname="src/tools/ls.test.ts" name="LSTool &gt; getDescription &gt; should handle paths in secondary workspace" time="0.0033533">
        </testcase>
        <testcase classname="src/tools/ls.test.ts" name="LSTool &gt; workspace boundary validation &gt; should accept paths in primary workspace directory" time="0.0047593">
        </testcase>
        <testcase classname="src/tools/ls.test.ts" name="LSTool &gt; workspace boundary validation &gt; should accept paths in secondary workspace directory" time="0.1522784">
        </testcase>
        <testcase classname="src/tools/ls.test.ts" name="LSTool &gt; workspace boundary validation &gt; should reject paths outside all workspace directories" time="0.0971888">
        </testcase>
        <testcase classname="src/tools/ls.test.ts" name="LSTool &gt; workspace boundary validation &gt; should list files from secondary workspace directory" time="0.0070291">
        </testcase>
    </testsuite>
    <testsuite name="src/tools/mcp-client-manager.test.ts" timestamp="2025-09-23T13:26:52.138Z" hostname="WIN-33AANMPCPKN" tests="2" failures="0" errors="0" skipped="0" time="0.0038274">
        <testcase classname="src/tools/mcp-client-manager.test.ts" name="McpClientManager &gt; should discover tools from all servers" time="0.0020237">
        </testcase>
        <testcase classname="src/tools/mcp-client-manager.test.ts" name="McpClientManager &gt; should not discover tools if folder is not trusted" time="0.0005895">
        </testcase>
    </testsuite>
    <testsuite name="src/tools/mcp-client.test.ts" timestamp="2025-09-23T13:26:52.139Z" hostname="WIN-33AANMPCPKN" tests="42" failures="0" errors="0" skipped="0" time="0.0328626">
        <testcase classname="src/tools/mcp-client.test.ts" name="mcp-client &gt; McpClient &gt; should discover tools" time="0.0053506">
            <system-err>
Error discovering prompts from test-server: mcpClient.getServerCapabilities is not a function

            </system-err>
        </testcase>
        <testcase classname="src/tools/mcp-client.test.ts" name="mcp-client &gt; McpClient &gt; should skip tools if a parameter is missing a type" time="0.0027096">
            <system-err>
Error discovering prompts from test-server: mcpClient.getServerCapabilities is not a function

            </system-err>
        </testcase>
        <testcase classname="src/tools/mcp-client.test.ts" name="mcp-client &gt; McpClient &gt; should handle errors when discovering prompts" time="0.0026906">
        </testcase>
        <testcase classname="src/tools/mcp-client.test.ts" name="mcp-client &gt; appendMcpServerCommand &gt; should do nothing if no MCP servers or command are configured" time="0.0004097">
        </testcase>
        <testcase classname="src/tools/mcp-client.test.ts" name="mcp-client &gt; appendMcpServerCommand &gt; should discover tools via mcpServerCommand" time="0.0010642">
        </testcase>
        <testcase classname="src/tools/mcp-client.test.ts" name="mcp-client &gt; appendMcpServerCommand &gt; should handle error if mcpServerCommand parsing fails" time="0.0003187">
        </testcase>
        <testcase classname="src/tools/mcp-client.test.ts" name="mcp-client &gt; createTransport &gt; should connect via httpUrl &gt; without headers" time="0.0005437">
        </testcase>
        <testcase classname="src/tools/mcp-client.test.ts" name="mcp-client &gt; createTransport &gt; should connect via httpUrl &gt; with headers" time="0.0004566">
        </testcase>
        <testcase classname="src/tools/mcp-client.test.ts" name="mcp-client &gt; createTransport &gt; should connect via url &gt; without headers" time="0.0004708">
        </testcase>
        <testcase classname="src/tools/mcp-client.test.ts" name="mcp-client &gt; createTransport &gt; should connect via url &gt; with headers" time="0.0004566">
        </testcase>
        <testcase classname="src/tools/mcp-client.test.ts" name="mcp-client &gt; createTransport &gt; should connect via command" time="0.0015833">
        </testcase>
        <testcase classname="src/tools/mcp-client.test.ts" name="mcp-client &gt; createTransport &gt; useGoogleCredentialProvider &gt; should use GoogleCredentialProvider when specified" time="0.000633">
        </testcase>
        <testcase classname="src/tools/mcp-client.test.ts" name="mcp-client &gt; createTransport &gt; useGoogleCredentialProvider &gt; should use GoogleCredentialProvider with SSE transport" time="0.0003558">
        </testcase>
        <testcase classname="src/tools/mcp-client.test.ts" name="mcp-client &gt; createTransport &gt; useGoogleCredentialProvider &gt; should throw an error if no URL is provided with GoogleCredentialProvider" time="0.0003609">
        </testcase>
        <testcase classname="src/tools/mcp-client.test.ts" name="mcp-client &gt; isEnabled &gt; should return true if no include or exclude lists are provided" time="0.0004207">
        </testcase>
        <testcase classname="src/tools/mcp-client.test.ts" name="mcp-client &gt; isEnabled &gt; should return false if the tool is in the exclude list" time="0.0002179">
        </testcase>
        <testcase classname="src/tools/mcp-client.test.ts" name="mcp-client &gt; isEnabled &gt; should return true if the tool is in the include list" time="0.0002589">
        </testcase>
        <testcase classname="src/tools/mcp-client.test.ts" name="mcp-client &gt; isEnabled &gt; should return true if the tool is in the include list with parentheses" time="0.0002072">
        </testcase>
        <testcase classname="src/tools/mcp-client.test.ts" name="mcp-client &gt; isEnabled &gt; should return false if the include list exists but does not contain the tool" time="0.0002059">
        </testcase>
        <testcase classname="src/tools/mcp-client.test.ts" name="mcp-client &gt; isEnabled &gt; should return false if the tool is in both the include and exclude lists" time="0.0002016">
        </testcase>
        <testcase classname="src/tools/mcp-client.test.ts" name="mcp-client &gt; isEnabled &gt; should return false if the function declaration has no name" time="0.000336">
            <system-err>
Discovered a function declaration without a name from MCP server &apos;myServer&apos;. Skipping.

            </system-err>
        </testcase>
        <testcase classname="src/tools/mcp-client.test.ts" name="mcp-client &gt; hasValidTypes &gt; should return true for a valid schema with anyOf" time="0.0002267">
        </testcase>
        <testcase classname="src/tools/mcp-client.test.ts" name="mcp-client &gt; hasValidTypes &gt; should return false for an invalid schema with anyOf" time="0.0063169">
        </testcase>
        <testcase classname="src/tools/mcp-client.test.ts" name="mcp-client &gt; hasValidTypes &gt; should return true for a valid schema with allOf" time="0.000258">
        </testcase>
        <testcase classname="src/tools/mcp-client.test.ts" name="mcp-client &gt; hasValidTypes &gt; should return false for an invalid schema with allOf" time="0.0002097">
        </testcase>
        <testcase classname="src/tools/mcp-client.test.ts" name="mcp-client &gt; hasValidTypes &gt; should return true for a valid schema with oneOf" time="0.000201">
        </testcase>
        <testcase classname="src/tools/mcp-client.test.ts" name="mcp-client &gt; hasValidTypes &gt; should return false for an invalid schema with oneOf" time="0.0001974">
        </testcase>
        <testcase classname="src/tools/mcp-client.test.ts" name="mcp-client &gt; hasValidTypes &gt; should return true for a valid schema with nested subschemas" time="0.0002111">
        </testcase>
        <testcase classname="src/tools/mcp-client.test.ts" name="mcp-client &gt; hasValidTypes &gt; should return false for an invalid schema with nested subschemas" time="0.0009024">
        </testcase>
        <testcase classname="src/tools/mcp-client.test.ts" name="mcp-client &gt; hasValidTypes &gt; should return true for a schema with a type and subschemas" time="0.0004623">
        </testcase>
        <testcase classname="src/tools/mcp-client.test.ts" name="mcp-client &gt; hasValidTypes &gt; should return false for a schema with no type and no subschemas" time="0.0004907">
        </testcase>
        <testcase classname="src/tools/mcp-client.test.ts" name="mcp-client &gt; hasValidTypes &gt; should return true for a valid schema" time="0.0004043">
        </testcase>
        <testcase classname="src/tools/mcp-client.test.ts" name="mcp-client &gt; hasValidTypes &gt; should return false if a parameter is missing a type" time="0.000229">
        </testcase>
        <testcase classname="src/tools/mcp-client.test.ts" name="mcp-client &gt; hasValidTypes &gt; should return false if a nested parameter is missing a type" time="0.0002264">
        </testcase>
        <testcase classname="src/tools/mcp-client.test.ts" name="mcp-client &gt; hasValidTypes &gt; should return false if an array item is missing a type" time="0.0002182">
        </testcase>
        <testcase classname="src/tools/mcp-client.test.ts" name="mcp-client &gt; hasValidTypes &gt; should return true for a schema with no properties" time="0.0002062">
        </testcase>
        <testcase classname="src/tools/mcp-client.test.ts" name="mcp-client &gt; hasValidTypes &gt; should return true for a schema with an empty properties object" time="0.0002008">
        </testcase>
        <testcase classname="src/tools/mcp-client.test.ts" name="mcp-client &gt; hasNetworkTransport &gt; should return true if only url is provided" time="0.0002365">
        </testcase>
        <testcase classname="src/tools/mcp-client.test.ts" name="mcp-client &gt; hasNetworkTransport &gt; should return true if only httpUrl is provided" time="0.000198">
        </testcase>
        <testcase classname="src/tools/mcp-client.test.ts" name="mcp-client &gt; hasNetworkTransport &gt; should return true if both url and httpUrl are provided" time="0.0002004">
        </testcase>
        <testcase classname="src/tools/mcp-client.test.ts" name="mcp-client &gt; hasNetworkTransport &gt; should return false if neither url nor httpUrl is provided" time="0.0002024">
        </testcase>
        <testcase classname="src/tools/mcp-client.test.ts" name="mcp-client &gt; hasNetworkTransport &gt; should return false for an empty config object" time="0.0002931">
        </testcase>
    </testsuite>
    <testsuite name="src/tools/mcp-tool.test.ts" timestamp="2025-09-23T13:26:52.143Z" hostname="WIN-33AANMPCPKN" tests="35" failures="0" errors="0" skipped="0" time="0.0534115">
        <testcase classname="src/tools/mcp-tool.test.ts" name="generateValidName &gt; should return a valid name for a simple function" time="0.0017474">
        </testcase>
        <testcase classname="src/tools/mcp-tool.test.ts" name="generateValidName &gt; should replace invalid characters with underscores" time="0.0002591">
        </testcase>
        <testcase classname="src/tools/mcp-tool.test.ts" name="generateValidName &gt; should truncate long names" time="0.0001265">
        </testcase>
        <testcase classname="src/tools/mcp-tool.test.ts" name="generateValidName &gt; should handle names with only invalid characters" time="0.0000936">
        </testcase>
        <testcase classname="src/tools/mcp-tool.test.ts" name="generateValidName &gt; should handle names that are exactly 63 characters long" time="0.0000897">
        </testcase>
        <testcase classname="src/tools/mcp-tool.test.ts" name="generateValidName &gt; should handle names that are exactly 64 characters long" time="0.0000901">
        </testcase>
        <testcase classname="src/tools/mcp-tool.test.ts" name="generateValidName &gt; should handle names that are longer than 64 characters" time="0.0000793">
        </testcase>
        <testcase classname="src/tools/mcp-tool.test.ts" name="DiscoveredMCPTool &gt; constructor &gt; should set properties correctly" time="0.0379784">
        </testcase>
        <testcase classname="src/tools/mcp-tool.test.ts" name="DiscoveredMCPTool &gt; execute &gt; should call mcpTool.callTool with correct parameters and format display output" time="0.0029995">
        </testcase>
        <testcase classname="src/tools/mcp-tool.test.ts" name="DiscoveredMCPTool &gt; execute &gt; should handle empty result from getStringifiedResultForDisplay" time="0.0003656">
        </testcase>
        <testcase classname="src/tools/mcp-tool.test.ts" name="DiscoveredMCPTool &gt; execute &gt; should propagate rejection if mcpTool.callTool rejects" time="0.0012901">
        </testcase>
        <testcase classname="src/tools/mcp-tool.test.ts" name="DiscoveredMCPTool &gt; execute &gt; should return a structured error if MCP tool reports an error" time="0.0006932">
        </testcase>
        <testcase classname="src/tools/mcp-tool.test.ts" name="DiscoveredMCPTool &gt; execute &gt; should return a structured error if MCP tool reports an error" time="0.0001996">
        </testcase>
        <testcase classname="src/tools/mcp-tool.test.ts" name="DiscoveredMCPTool &gt; execute &gt; should consider a ToolResult with isError ${description} to be a success" time="0.0003303">
        </testcase>
        <testcase classname="src/tools/mcp-tool.test.ts" name="DiscoveredMCPTool &gt; execute &gt; should consider a ToolResult with isError ${description} to be a success" time="0.0003315">
        </testcase>
        <testcase classname="src/tools/mcp-tool.test.ts" name="DiscoveredMCPTool &gt; execute &gt; should handle a simple text response correctly" time="0.0004116">
        </testcase>
        <testcase classname="src/tools/mcp-tool.test.ts" name="DiscoveredMCPTool &gt; execute &gt; should handle an AudioBlock response" time="0.0002822">
        </testcase>
        <testcase classname="src/tools/mcp-tool.test.ts" name="DiscoveredMCPTool &gt; execute &gt; should handle a ResourceLinkBlock response" time="0.0002348">
        </testcase>
        <testcase classname="src/tools/mcp-tool.test.ts" name="DiscoveredMCPTool &gt; execute &gt; should handle an embedded text ResourceBlock response" time="0.0002447">
        </testcase>
        <testcase classname="src/tools/mcp-tool.test.ts" name="DiscoveredMCPTool &gt; execute &gt; should handle an embedded binary ResourceBlock response" time="0.0002304">
        </testcase>
        <testcase classname="src/tools/mcp-tool.test.ts" name="DiscoveredMCPTool &gt; execute &gt; should handle a mix of content block types" time="0.0002438">
        </testcase>
        <testcase classname="src/tools/mcp-tool.test.ts" name="DiscoveredMCPTool &gt; execute &gt; should ignore unknown content block types" time="0.0002">
        </testcase>
        <testcase classname="src/tools/mcp-tool.test.ts" name="DiscoveredMCPTool &gt; execute &gt; should handle a complex mix of content block types" time="0.0002462">
        </testcase>
        <testcase classname="src/tools/mcp-tool.test.ts" name="DiscoveredMCPTool &gt; shouldConfirmExecute &gt; should return false if trust is true" time="0.0002634">
        </testcase>
        <testcase classname="src/tools/mcp-tool.test.ts" name="DiscoveredMCPTool &gt; shouldConfirmExecute &gt; should return false if server is allowlisted" time="0.0001363">
        </testcase>
        <testcase classname="src/tools/mcp-tool.test.ts" name="DiscoveredMCPTool &gt; shouldConfirmExecute &gt; should return false if tool is allowlisted" time="0.0001365">
        </testcase>
        <testcase classname="src/tools/mcp-tool.test.ts" name="DiscoveredMCPTool &gt; shouldConfirmExecute &gt; should return confirmation details if not trusted and not allowlisted" time="0.0003137">
        </testcase>
        <testcase classname="src/tools/mcp-tool.test.ts" name="DiscoveredMCPTool &gt; shouldConfirmExecute &gt; should add server to allowlist on ProceedAlwaysServer" time="0.0002455">
        </testcase>
        <testcase classname="src/tools/mcp-tool.test.ts" name="DiscoveredMCPTool &gt; shouldConfirmExecute &gt; should add tool to allowlist on ProceedAlwaysTool" time="0.0002483">
        </testcase>
        <testcase classname="src/tools/mcp-tool.test.ts" name="DiscoveredMCPTool &gt; shouldConfirmExecute &gt; should handle Cancel confirmation outcome" time="0.0002077">
        </testcase>
        <testcase classname="src/tools/mcp-tool.test.ts" name="DiscoveredMCPTool &gt; shouldConfirmExecute &gt; should handle ProceedOnce confirmation outcome" time="0.0002081">
        </testcase>
        <testcase classname="src/tools/mcp-tool.test.ts" name="DiscoveredMCPTool &gt; shouldConfirmExecute with folder trust &gt; should return false if trust is true and folder is trusted" time="0.0001658">
        </testcase>
        <testcase classname="src/tools/mcp-tool.test.ts" name="DiscoveredMCPTool &gt; shouldConfirmExecute with folder trust &gt; should return confirmation details if trust is true but folder is not trusted" time="0.0003564">
        </testcase>
        <testcase classname="src/tools/mcp-tool.test.ts" name="DiscoveredMCPTool &gt; shouldConfirmExecute with folder trust &gt; should return confirmation details if trust is false, even if folder is trusted" time="0.0001891">
        </testcase>
        <testcase classname="src/tools/mcp-tool.test.ts" name="DiscoveredMCPTool &gt; DiscoveredMCPToolInvocation &gt; should return the stringified params from getDescription" time="0.0001523">
        </testcase>
    </testsuite>
    <testsuite name="src/tools/memoryTool.test.ts" timestamp="2025-09-23T13:26:52.147Z" hostname="WIN-33AANMPCPKN" tests="19" failures="0" errors="0" skipped="0" time="0.1192959">
        <testcase classname="src/tools/memoryTool.test.ts" name="MemoryTool &gt; setGeminiMdFilename &gt; should update currentGeminiMdFilename when a valid new name is provided" time="0.0021046">
        </testcase>
        <testcase classname="src/tools/memoryTool.test.ts" name="MemoryTool &gt; setGeminiMdFilename &gt; should not update currentGeminiMdFilename if the new name is empty or whitespace" time="0.00022">
        </testcase>
        <testcase classname="src/tools/memoryTool.test.ts" name="MemoryTool &gt; setGeminiMdFilename &gt; should handle an array of filenames" time="0.0007452">
        </testcase>
        <testcase classname="src/tools/memoryTool.test.ts" name="MemoryTool &gt; performAddMemoryEntry (static method) &gt; should create section and save a fact if file does not exist" time="0.0019022">
        </testcase>
        <testcase classname="src/tools/memoryTool.test.ts" name="MemoryTool &gt; performAddMemoryEntry (static method) &gt; should create section and save a fact if file is empty" time="0.0002992">
        </testcase>
        <testcase classname="src/tools/memoryTool.test.ts" name="MemoryTool &gt; performAddMemoryEntry (static method) &gt; should add a fact to an existing section" time="0.0002283">
        </testcase>
        <testcase classname="src/tools/memoryTool.test.ts" name="MemoryTool &gt; performAddMemoryEntry (static method) &gt; should add a fact to an existing empty section" time="0.0001955">
        </testcase>
        <testcase classname="src/tools/memoryTool.test.ts" name="MemoryTool &gt; performAddMemoryEntry (static method) &gt; should add a fact when other ## sections exist and preserve spacing" time="0.0004125">
        </testcase>
        <testcase classname="src/tools/memoryTool.test.ts" name="MemoryTool &gt; performAddMemoryEntry (static method) &gt; should correctly trim and add a fact that starts with a dash" time="0.0001739">
        </testcase>
        <testcase classname="src/tools/memoryTool.test.ts" name="MemoryTool &gt; performAddMemoryEntry (static method) &gt; should handle error from fsAdapter.writeFile" time="0.0090742">
            <system-err>
[MemoryTool] Error adding memory entry to \mock\home\.gemini\GEMINI.md: Error: Disk full
    at [90mE:\claude-code\pipedream\modelcontextprotocol\agentrpc\gemini-cli\packages\core\[39msrc\tools\memoryTool.test.ts:189:49
    at file:///E:/claude-code/pipedream/modelcontextprotocol/agentrpc/gemini-cli/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:155:11
    at file:///E:/claude-code/pipedream/modelcontextprotocol/agentrpc/gemini-cli/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:752:26
    at file:///E:/claude-code/pipedream/modelcontextprotocol/agentrpc/gemini-cli/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:1897:20
    at new Promise (&lt;anonymous&gt;)
    at runWithTimeout (file:///E:/claude-code/pipedream/modelcontextprotocol/agentrpc/gemini-cli/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:1863:10)
    at runTest (file:///E:/claude-code/pipedream/modelcontextprotocol/agentrpc/gemini-cli/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:1574:12)
[90m    at processTicksAndRejections (node:internal/process/task_queues:105:5)[39m
    at runSuite (file:///E:/claude-code/pipedream/modelcontextprotocol/agentrpc/gemini-cli/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:1729:8)
    at runSuite (file:///E:/claude-code/pipedream/modelcontextprotocol/agentrpc/gemini-cli/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:1729:8)

            </system-err>
        </testcase>
        <testcase classname="src/tools/memoryTool.test.ts" name="MemoryTool &gt; execute (instance method) &gt; should have correct name, displayName, description, and schema" time="0.0010778">
        </testcase>
        <testcase classname="src/tools/memoryTool.test.ts" name="MemoryTool &gt; execute (instance method) &gt; should call performAddMemoryEntry with correct parameters and return success" time="0.0973449">
        </testcase>
        <testcase classname="src/tools/memoryTool.test.ts" name="MemoryTool &gt; execute (instance method) &gt; should return an error if fact is empty" time="0.0003261">
        </testcase>
        <testcase classname="src/tools/memoryTool.test.ts" name="MemoryTool &gt; execute (instance method) &gt; should handle errors from performAddMemoryEntry" time="0.0004473">
            <system-err>
[MemoryTool] Error executing save_memory for fact &quot;This will fail&quot;: [MemoryTool] Failed to add memory entry: Disk full

            </system-err>
        </testcase>
        <testcase classname="src/tools/memoryTool.test.ts" name="MemoryTool &gt; shouldConfirmExecute &gt; should return confirmation details when memory file is not allowlisted" time="0.0016679">
        </testcase>
        <testcase classname="src/tools/memoryTool.test.ts" name="MemoryTool &gt; shouldConfirmExecute &gt; should return false when memory file is already allowlisted" time="0.0001771">
        </testcase>
        <testcase classname="src/tools/memoryTool.test.ts" name="MemoryTool &gt; shouldConfirmExecute &gt; should add memory file to allowlist when ProceedAlways is confirmed" time="0.0003108">
        </testcase>
        <testcase classname="src/tools/memoryTool.test.ts" name="MemoryTool &gt; shouldConfirmExecute &gt; should not add memory file to allowlist when other outcomes are confirmed" time="0.0002857">
        </testcase>
        <testcase classname="src/tools/memoryTool.test.ts" name="MemoryTool &gt; shouldConfirmExecute &gt; should handle existing memory file with content" time="0.0004336">
        </testcase>
    </testsuite>
    <testsuite name="src/tools/message-bus-integration.test.ts" timestamp="2025-09-23T13:26:52.150Z" hostname="WIN-33AANMPCPKN" tests="9" failures="0" errors="0" skipped="0" time="0.0819484">
        <testcase classname="src/tools/message-bus-integration.test.ts" name="Message Bus Integration &gt; BaseToolInvocation with MessageBus &gt; should use message bus for confirmation when available" time="0.0479675">
            <system-out>
[DEBUG] Tool TestToolInvocation created with messageBus: YES
[DEBUG] Using message bus for tool confirmation: TestToolInvocation

            </system-out>
        </testcase>
        <testcase classname="src/tools/message-bus-integration.test.ts" name="Message Bus Integration &gt; BaseToolInvocation with MessageBus &gt; should reject promise when confirmation is denied" time="0.0029123">
            <system-out>
[DEBUG] Tool TestToolInvocation created with messageBus: YES
[DEBUG] Using message bus for tool confirmation: TestToolInvocation

            </system-out>
        </testcase>
        <testcase classname="src/tools/message-bus-integration.test.ts" name="Message Bus Integration &gt; BaseToolInvocation with MessageBus &gt; should handle timeout" time="0.0045037">
            <system-out>
[DEBUG] Tool TestToolInvocation created with messageBus: YES
[DEBUG] Using message bus for tool confirmation: TestToolInvocation

            </system-out>
        </testcase>
        <testcase classname="src/tools/message-bus-integration.test.ts" name="Message Bus Integration &gt; BaseToolInvocation with MessageBus &gt; should handle abort signal" time="0.0018331">
            <system-out>
[DEBUG] Tool TestToolInvocation created with messageBus: YES
[DEBUG] Using message bus for tool confirmation: TestToolInvocation

            </system-out>
        </testcase>
        <testcase classname="src/tools/message-bus-integration.test.ts" name="Message Bus Integration &gt; BaseToolInvocation with MessageBus &gt; should fall back to default behavior when no message bus" time="0.000935">
        </testcase>
        <testcase classname="src/tools/message-bus-integration.test.ts" name="Message Bus Integration &gt; BaseToolInvocation with MessageBus &gt; should ignore responses with wrong correlation ID" time="0.0015248">
            <system-out>
[DEBUG] Tool TestToolInvocation created with messageBus: YES
[DEBUG] Using message bus for tool confirmation: TestToolInvocation

            </system-out>
        </testcase>
        <testcase classname="src/tools/message-bus-integration.test.ts" name="Message Bus Integration &gt; Backward Compatibility &gt; should work with existing tools that do not use message bus" time="0.0094368">
        </testcase>
        <testcase classname="src/tools/message-bus-integration.test.ts" name="Message Bus Integration &gt; Backward Compatibility &gt; should work with tools that have message bus but use default confirmation" time="0.0014684">
            <system-out>
[DEBUG] Tool TestToolInvocation created with messageBus: YES

            </system-out>
        </testcase>
        <testcase classname="src/tools/message-bus-integration.test.ts" name="Message Bus Integration &gt; Error Handling &gt; should handle message bus publish errors gracefully" time="0.0093313">
            <system-out>
[DEBUG] Tool TestToolInvocation created with messageBus: YES
[DEBUG] Using message bus for tool confirmation: TestToolInvocation

            </system-out>
        </testcase>
    </testsuite>
    <testsuite name="src/tools/modifiable-tool.test.ts" timestamp="2025-09-23T13:26:52.152Z" hostname="WIN-33AANMPCPKN" tests="11" failures="0" errors="0" skipped="0" time="0.2084506">
        <testcase classname="src/tools/modifiable-tool.test.ts" name="modifyWithEditor &gt; successful modification &gt; should successfully modify content with VSCode editor" time="0.0207325">
        </testcase>
        <testcase classname="src/tools/modifiable-tool.test.ts" name="modifyWithEditor &gt; successful modification &gt; should create temp directory if it does not exist" time="0.0044266">
        </testcase>
        <testcase classname="src/tools/modifiable-tool.test.ts" name="modifyWithEditor &gt; successful modification &gt; should not create temp directory if it already exists" time="0.039868">
        </testcase>
        <testcase classname="src/tools/modifiable-tool.test.ts" name="modifyWithEditor &gt; should handle missing old temp file gracefully" time="0.0431443">
            <system-err>
Error deleting temp diff file: C:\Users\alroh\AppData\Local\Temp\gemini-cli-tool-modify-diffs\gemini-cli-modify-test-old-1758633993994.txt

            </system-err>
        </testcase>
        <testcase classname="src/tools/modifiable-tool.test.ts" name="modifyWithEditor &gt; should handle missing new temp file gracefully" time="0.0072747">
            <system-err>
Error deleting temp diff file: C:\Users\alroh\AppData\Local\Temp\gemini-cli-tool-modify-diffs\gemini-cli-modify-test-new-1758633994037.txt

            </system-err>
        </testcase>
        <testcase classname="src/tools/modifiable-tool.test.ts" name="modifyWithEditor &gt; should clean up temp files even if editor fails" time="0.0097176">
        </testcase>
        <testcase classname="src/tools/modifiable-tool.test.ts" name="modifyWithEditor &gt; should handle temp file cleanup errors gracefully" time="0.0133547">
        </testcase>
        <testcase classname="src/tools/modifiable-tool.test.ts" name="modifyWithEditor &gt; should create temp files with correct naming with extension" time="0.028665">
        </testcase>
        <testcase classname="src/tools/modifiable-tool.test.ts" name="modifyWithEditor &gt; should create temp files with correct naming without extension" time="0.038149">
        </testcase>
        <testcase classname="src/tools/modifiable-tool.test.ts" name="isModifiableTool &gt; should return true for objects with getModifyContext method" time="0.0003686">
        </testcase>
        <testcase classname="src/tools/modifiable-tool.test.ts" name="isModifiableTool &gt; should return false for objects without getModifyContext method" time="0.0003048">
        </testcase>
    </testsuite>
    <testsuite name="src/tools/read-file.test.ts" timestamp="2025-09-23T13:26:52.153Z" hostname="WIN-33AANMPCPKN" tests="28" failures="0" errors="0" skipped="0" time="0.3130564">
        <testcase classname="src/tools/read-file.test.ts" name="ReadFileTool &gt; build &gt; should return an invocation for valid params (absolute path within root)" time="0.0676679">
        </testcase>
        <testcase classname="src/tools/read-file.test.ts" name="ReadFileTool &gt; build &gt; should throw error if file path is relative" time="0.0147845">
        </testcase>
        <testcase classname="src/tools/read-file.test.ts" name="ReadFileTool &gt; build &gt; should throw error if path is outside root" time="0.0035616">
        </testcase>
        <testcase classname="src/tools/read-file.test.ts" name="ReadFileTool &gt; build &gt; should allow access to files in project temp directory" time="0.0045916">
        </testcase>
        <testcase classname="src/tools/read-file.test.ts" name="ReadFileTool &gt; build &gt; should show temp directory in error message when path is outside workspace and temp dir" time="0.003141">
        </testcase>
        <testcase classname="src/tools/read-file.test.ts" name="ReadFileTool &gt; build &gt; should throw error if path is empty" time="0.0032371">
        </testcase>
        <testcase classname="src/tools/read-file.test.ts" name="ReadFileTool &gt; build &gt; should throw error if offset is negative" time="0.003722">
        </testcase>
        <testcase classname="src/tools/read-file.test.ts" name="ReadFileTool &gt; build &gt; should throw error if limit is zero or negative" time="0.0027977">
        </testcase>
        <testcase classname="src/tools/read-file.test.ts" name="ReadFileTool &gt; getDescription &gt; should return relative path without limit/offset" time="0.0042704">
        </testcase>
        <testcase classname="src/tools/read-file.test.ts" name="ReadFileTool &gt; getDescription &gt; should return shortened path when file path is deep" time="0.0034756">
        </testcase>
        <testcase classname="src/tools/read-file.test.ts" name="ReadFileTool &gt; getDescription &gt; should handle non-normalized file paths correctly" time="0.0030508">
        </testcase>
        <testcase classname="src/tools/read-file.test.ts" name="ReadFileTool &gt; getDescription &gt; should return . if path is the root directory" time="0.0036985">
        </testcase>
        <testcase classname="src/tools/read-file.test.ts" name="ReadFileTool &gt; execute &gt; should return error if file does not exist" time="0.0039571">
        </testcase>
        <testcase classname="src/tools/read-file.test.ts" name="ReadFileTool &gt; execute &gt; should return success result for a text file" time="0.0229188">
        </testcase>
        <testcase classname="src/tools/read-file.test.ts" name="ReadFileTool &gt; execute &gt; should return error if path is a directory" time="0.0099004">
        </testcase>
        <testcase classname="src/tools/read-file.test.ts" name="ReadFileTool &gt; execute &gt; should return error for a file that is too large" time="0.0688413">
        </testcase>
        <testcase classname="src/tools/read-file.test.ts" name="ReadFileTool &gt; execute &gt; should handle text file with lines exceeding maximum length" time="0.0061009">
        </testcase>
        <testcase classname="src/tools/read-file.test.ts" name="ReadFileTool &gt; execute &gt; should handle image file and return appropriate content" time="0.0044613">
        </testcase>
        <testcase classname="src/tools/read-file.test.ts" name="ReadFileTool &gt; execute &gt; should handle PDF file and return appropriate content" time="0.0108581">
        </testcase>
        <testcase classname="src/tools/read-file.test.ts" name="ReadFileTool &gt; execute &gt; should handle binary file and skip content" time="0.0066436">
        </testcase>
        <testcase classname="src/tools/read-file.test.ts" name="ReadFileTool &gt; execute &gt; should handle SVG file as text" time="0.0053517">
        </testcase>
        <testcase classname="src/tools/read-file.test.ts" name="ReadFileTool &gt; execute &gt; should handle large SVG file" time="0.0148335">
        </testcase>
        <testcase classname="src/tools/read-file.test.ts" name="ReadFileTool &gt; execute &gt; should handle empty file" time="0.0053435">
        </testcase>
        <testcase classname="src/tools/read-file.test.ts" name="ReadFileTool &gt; execute &gt; should support offset and limit for text files" time="0.0054061">
        </testcase>
        <testcase classname="src/tools/read-file.test.ts" name="ReadFileTool &gt; execute &gt; should successfully read files from project temp directory" time="0.0081606">
        </testcase>
        <testcase classname="src/tools/read-file.test.ts" name="ReadFileTool &gt; execute &gt; with .geminiignore &gt; should throw error if path is ignored by a .geminiignore pattern" time="0.0067681">
        </testcase>
        <testcase classname="src/tools/read-file.test.ts" name="ReadFileTool &gt; execute &gt; with .geminiignore &gt; should throw error if file is in an ignored directory" time="0.0080186">
        </testcase>
        <testcase classname="src/tools/read-file.test.ts" name="ReadFileTool &gt; execute &gt; with .geminiignore &gt; should allow reading non-ignored files" time="0.0048873">
        </testcase>
    </testsuite>
    <testsuite name="src/tools/read-many-files.test.ts" timestamp="2025-09-23T13:26:52.156Z" hostname="WIN-33AANMPCPKN" tests="31" failures="0" errors="0" skipped="0" time="1.1797993">
        <testcase classname="src/tools/read-many-files.test.ts" name="ReadManyFilesTool &gt; build &gt; should return an invocation for valid relative paths within root" time="0.0492888">
        </testcase>
        <testcase classname="src/tools/read-many-files.test.ts" name="ReadManyFilesTool &gt; build &gt; should return an invocation for valid glob patterns within root" time="0.030584">
        </testcase>
        <testcase classname="src/tools/read-many-files.test.ts" name="ReadManyFilesTool &gt; build &gt; should return an invocation for paths trying to escape the root (e.g., ../) as execute handles this" time="0.0125163">
        </testcase>
        <testcase classname="src/tools/read-many-files.test.ts" name="ReadManyFilesTool &gt; build &gt; should return an invocation for absolute paths as execute handles this" time="0.1016601">
        </testcase>
        <testcase classname="src/tools/read-many-files.test.ts" name="ReadManyFilesTool &gt; build &gt; should throw error if paths array is empty" time="0.0065584">
        </testcase>
        <testcase classname="src/tools/read-many-files.test.ts" name="ReadManyFilesTool &gt; build &gt; should return an invocation for valid exclude and include patterns" time="0.0052925">
        </testcase>
        <testcase classname="src/tools/read-many-files.test.ts" name="ReadManyFilesTool &gt; build &gt; should throw error if paths array contains an empty string" time="0.0062846">
        </testcase>
        <testcase classname="src/tools/read-many-files.test.ts" name="ReadManyFilesTool &gt; build &gt; should throw error if include array contains non-string elements" time="0.0049184">
        </testcase>
        <testcase classname="src/tools/read-many-files.test.ts" name="ReadManyFilesTool &gt; build &gt; should throw error if exclude array contains non-string elements" time="0.004638">
        </testcase>
        <testcase classname="src/tools/read-many-files.test.ts" name="ReadManyFilesTool &gt; execute &gt; should read a single specified file" time="0.0565716">
        </testcase>
        <testcase classname="src/tools/read-many-files.test.ts" name="ReadManyFilesTool &gt; execute &gt; should read multiple specified files" time="0.1419978">
        </testcase>
        <testcase classname="src/tools/read-many-files.test.ts" name="ReadManyFilesTool &gt; execute &gt; should handle glob patterns" time="0.0709629">
        </testcase>
        <testcase classname="src/tools/read-many-files.test.ts" name="ReadManyFilesTool &gt; execute &gt; should respect exclude patterns" time="0.0608886">
        </testcase>
        <testcase classname="src/tools/read-many-files.test.ts" name="ReadManyFilesTool &gt; execute &gt; should handle nonexistent specific files gracefully" time="0.0141892">
        </testcase>
        <testcase classname="src/tools/read-many-files.test.ts" name="ReadManyFilesTool &gt; execute &gt; should use default excludes" time="0.0150478">
        </testcase>
        <testcase classname="src/tools/read-many-files.test.ts" name="ReadManyFilesTool &gt; execute &gt; should NOT use default excludes if useDefaultExcludes is false" time="0.0215206">
        </testcase>
        <testcase classname="src/tools/read-many-files.test.ts" name="ReadManyFilesTool &gt; execute &gt; should include images as inlineData parts if explicitly requested by extension" time="0.0112946">
        </testcase>
        <testcase classname="src/tools/read-many-files.test.ts" name="ReadManyFilesTool &gt; execute &gt; should include images as inlineData parts if explicitly requested by name" time="0.0117283">
        </testcase>
        <testcase classname="src/tools/read-many-files.test.ts" name="ReadManyFilesTool &gt; execute &gt; should skip PDF files if not explicitly requested by extension or name" time="0.0631353">
        </testcase>
        <testcase classname="src/tools/read-many-files.test.ts" name="ReadManyFilesTool &gt; execute &gt; should include PDF files as inlineData parts if explicitly requested by extension" time="0.0099062">
        </testcase>
        <testcase classname="src/tools/read-many-files.test.ts" name="ReadManyFilesTool &gt; execute &gt; should include PDF files as inlineData parts if explicitly requested by name" time="0.0096618">
        </testcase>
        <testcase classname="src/tools/read-many-files.test.ts" name="ReadManyFilesTool &gt; execute &gt; should return error if path is ignored by a .geminiignore pattern" time="0.1052613">
        </testcase>
        <testcase classname="src/tools/read-many-files.test.ts" name="ReadManyFilesTool &gt; execute &gt; should read files from multiple workspace directories" time="0.1013147">
        </testcase>
        <testcase classname="src/tools/read-many-files.test.ts" name="ReadManyFilesTool &gt; execute &gt; should add a warning for truncated files" time="0.0454738">
        </testcase>
        <testcase classname="src/tools/read-many-files.test.ts" name="ReadManyFilesTool &gt; execute &gt; should read files with special characters like [] and () in the path" time="0.014762">
        </testcase>
        <testcase classname="src/tools/read-many-files.test.ts" name="ReadManyFilesTool &gt; execute &gt; should read files with special characters in the name" time="0.0117856">
        </testcase>
        <testcase classname="src/tools/read-many-files.test.ts" name="ReadManyFilesTool &gt; Error handling &gt; should return an INVALID_TOOL_PARAMS error if no paths are provided" time="0.0048656">
        </testcase>
        <testcase classname="src/tools/read-many-files.test.ts" name="ReadManyFilesTool &gt; Error handling &gt; should return a READ_MANY_FILES_SEARCH_ERROR on glob failure" time="0.0251422">
        </testcase>
        <testcase classname="src/tools/read-many-files.test.ts" name="ReadManyFilesTool &gt; Batch Processing &gt; should process files in parallel" time="0.0623029">
        </testcase>
        <testcase classname="src/tools/read-many-files.test.ts" name="ReadManyFilesTool &gt; Batch Processing &gt; should handle batch processing errors gracefully" time="0.0137467">
        </testcase>
        <testcase classname="src/tools/read-many-files.test.ts" name="ReadManyFilesTool &gt; Batch Processing &gt; should execute file operations concurrently" time="0.0840529">
            <system-out>
Execution order: [
  [32m&apos;start:C:\\Users\\alroh\\AppData\\Local\\Temp\\read-many-files-root-ckvfTC\\file1.txt&apos;[39m,
  [32m&apos;start:C:\\Users\\alroh\\AppData\\Local\\Temp\\read-many-files-root-ckvfTC\\file2.txt&apos;[39m,
  [32m&apos;start:C:\\Users\\alroh\\AppData\\Local\\Temp\\read-many-files-root-ckvfTC\\file3.txt&apos;[39m,
  [32m&apos;end:C:\\Users\\alroh\\AppData\\Local\\Temp\\read-many-files-root-ckvfTC\\file1.txt&apos;[39m,
  [32m&apos;end:C:\\Users\\alroh\\AppData\\Local\\Temp\\read-many-files-root-ckvfTC\\file2.txt&apos;[39m,
  [32m&apos;end:C:\\Users\\alroh\\AppData\\Local\\Temp\\read-many-files-root-ckvfTC\\file3.txt&apos;[39m
]

            </system-out>
        </testcase>
    </testsuite>
    <testsuite name="src/tools/ripGrep.test.ts" timestamp="2025-09-23T13:26:52.159Z" hostname="WIN-33AANMPCPKN" tests="45" failures="0" errors="0" skipped="0" time="1.0089162">
        <testcase classname="src/tools/ripGrep.test.ts" name="canUseRipgrep &gt; should return true if ripgrep already exists" time="0.0036954">
        </testcase>
        <testcase classname="src/tools/ripGrep.test.ts" name="canUseRipgrep &gt; should download ripgrep and return true if it does not exist initially" time="0.0003416">
        </testcase>
        <testcase classname="src/tools/ripGrep.test.ts" name="canUseRipgrep &gt; should return false if download fails and file does not exist" time="0.0002208">
        </testcase>
        <testcase classname="src/tools/ripGrep.test.ts" name="canUseRipgrep &gt; should propagate errors from downloadRipGrep" time="0.0008452">
        </testcase>
        <testcase classname="src/tools/ripGrep.test.ts" name="ensureRgPath &gt; should return rg path if ripgrep already exists" time="0.0002264">
        </testcase>
        <testcase classname="src/tools/ripGrep.test.ts" name="ensureRgPath &gt; should return rg path if ripgrep is downloaded successfully" time="0.0001538">
        </testcase>
        <testcase classname="src/tools/ripGrep.test.ts" name="ensureRgPath &gt; should throw an error if ripgrep cannot be used after download attempt" time="0.0010034">
        </testcase>
        <testcase classname="src/tools/ripGrep.test.ts" name="ensureRgPath &gt; should propagate errors from downloadRipGrep" time="0.0002919">
        </testcase>
        <testcase classname="src/tools/ripGrep.test.ts" name="RipGrepTool &gt; validateToolParams &gt; should return null for valid params (pattern only)" time="0.0902286">
        </testcase>
        <testcase classname="src/tools/ripGrep.test.ts" name="RipGrepTool &gt; validateToolParams &gt; should return null for valid params (pattern and path)" time="0.0386383">
        </testcase>
        <testcase classname="src/tools/ripGrep.test.ts" name="RipGrepTool &gt; validateToolParams &gt; should return null for valid params (pattern, path, and include)" time="0.0165256">
        </testcase>
        <testcase classname="src/tools/ripGrep.test.ts" name="RipGrepTool &gt; validateToolParams &gt; should return error if pattern is missing" time="0.0397773">
        </testcase>
        <testcase classname="src/tools/ripGrep.test.ts" name="RipGrepTool &gt; validateToolParams &gt; should return null for what would be an invalid regex pattern" time="0.0166006">
        </testcase>
        <testcase classname="src/tools/ripGrep.test.ts" name="RipGrepTool &gt; validateToolParams &gt; should return error if path does not exist" time="0.0112711">
        </testcase>
        <testcase classname="src/tools/ripGrep.test.ts" name="RipGrepTool &gt; validateToolParams &gt; should return error if path is a file, not a directory" time="0.0085281">
        </testcase>
        <testcase classname="src/tools/ripGrep.test.ts" name="RipGrepTool &gt; execute &gt; should find matches for a simple pattern in all files" time="0.019854">
        </testcase>
        <testcase classname="src/tools/ripGrep.test.ts" name="RipGrepTool &gt; execute &gt; should find matches in a specific path" time="0.1885101">
        </testcase>
        <testcase classname="src/tools/ripGrep.test.ts" name="RipGrepTool &gt; execute &gt; should find matches with an include glob" time="0.0492214">
        </testcase>
        <testcase classname="src/tools/ripGrep.test.ts" name="RipGrepTool &gt; execute &gt; should find matches with an include glob and path" time="0.0370294">
        </testcase>
        <testcase classname="src/tools/ripGrep.test.ts" name="RipGrepTool &gt; execute &gt; should return &quot;No matches found&quot; when pattern does not exist" time="0.0378838">
        </testcase>
        <testcase classname="src/tools/ripGrep.test.ts" name="RipGrepTool &gt; execute &gt; should return an error from ripgrep for invalid regex pattern" time="0.0252158">
            <system-err>
GrepLogic: ripgrep failed: ripgrep exited with code 2: 

Error during GrepLogic execution: Error: ripgrep exited with code 2: 

            </system-err>
        </testcase>
        <testcase classname="src/tools/ripGrep.test.ts" name="RipGrepTool &gt; execute &gt; should handle regex special characters correctly" time="0.0205983">
        </testcase>
        <testcase classname="src/tools/ripGrep.test.ts" name="RipGrepTool &gt; execute &gt; should be case-insensitive by default (JS fallback)" time="0.0139972">
        </testcase>
        <testcase classname="src/tools/ripGrep.test.ts" name="RipGrepTool &gt; execute &gt; should throw an error if params are invalid" time="0.0055553">
        </testcase>
        <testcase classname="src/tools/ripGrep.test.ts" name="RipGrepTool &gt; execute &gt; should throw an error if ripgrep is not available" time="0.0070763">
            <system-err>
GrepLogic: ripgrep failed: Cannot use ripgrep.

Error during GrepLogic execution: Error: Cannot use ripgrep.

            </system-err>
        </testcase>
        <testcase classname="src/tools/ripGrep.test.ts" name="RipGrepTool &gt; multi-directory workspace &gt; should search across all workspace directories when no path is specified" time="0.0356913">
        </testcase>
        <testcase classname="src/tools/ripGrep.test.ts" name="RipGrepTool &gt; multi-directory workspace &gt; should search only specified path within workspace directories" time="0.0157003">
        </testcase>
        <testcase classname="src/tools/ripGrep.test.ts" name="RipGrepTool &gt; abort signal handling &gt; should handle AbortSignal during search" time="0.0138274">
        </testcase>
        <testcase classname="src/tools/ripGrep.test.ts" name="RipGrepTool &gt; abort signal handling &gt; should abort streaming search when signal is triggered" time="0.0152156">
            <system-err>
GrepLogic: ripgrep failed: ripgrep exited with code null: 

Error during GrepLogic execution: Error: ripgrep exited with code null: 

            </system-err>
        </testcase>
        <testcase classname="src/tools/ripGrep.test.ts" name="RipGrepTool &gt; error handling and edge cases &gt; should handle workspace boundary violations" time="0.0097387">
        </testcase>
        <testcase classname="src/tools/ripGrep.test.ts" name="RipGrepTool &gt; error handling and edge cases &gt; should handle empty directories gracefully" time="0.0275457">
        </testcase>
        <testcase classname="src/tools/ripGrep.test.ts" name="RipGrepTool &gt; error handling and edge cases &gt; should handle empty files correctly" time="0.0275545">
        </testcase>
        <testcase classname="src/tools/ripGrep.test.ts" name="RipGrepTool &gt; error handling and edge cases &gt; should handle special characters in file names" time="0.0339304">
        </testcase>
        <testcase classname="src/tools/ripGrep.test.ts" name="RipGrepTool &gt; error handling and edge cases &gt; should handle deeply nested directories" time="0.0152752">
        </testcase>
        <testcase classname="src/tools/ripGrep.test.ts" name="RipGrepTool &gt; regex pattern validation &gt; should handle complex regex patterns" time="0.0187689">
        </testcase>
        <testcase classname="src/tools/ripGrep.test.ts" name="RipGrepTool &gt; regex pattern validation &gt; should handle case sensitivity correctly in JS fallback" time="0.0147266">
        </testcase>
        <testcase classname="src/tools/ripGrep.test.ts" name="RipGrepTool &gt; regex pattern validation &gt; should handle escaped regex special characters" time="0.0158337">
        </testcase>
        <testcase classname="src/tools/ripGrep.test.ts" name="RipGrepTool &gt; include pattern filtering &gt; should handle multiple file extensions in include pattern" time="0.0160665">
        </testcase>
        <testcase classname="src/tools/ripGrep.test.ts" name="RipGrepTool &gt; include pattern filtering &gt; should handle directory patterns in include" time="0.0183937">
        </testcase>
        <testcase classname="src/tools/ripGrep.test.ts" name="RipGrepTool &gt; getDescription &gt; should generate correct description with pattern only" time="0.0593111">
        </testcase>
        <testcase classname="src/tools/ripGrep.test.ts" name="RipGrepTool &gt; getDescription &gt; should generate correct description with pattern and include" time="0.0090132">
        </testcase>
        <testcase classname="src/tools/ripGrep.test.ts" name="RipGrepTool &gt; getDescription &gt; should generate correct description with pattern and path" time="0.0080731">
        </testcase>
        <testcase classname="src/tools/ripGrep.test.ts" name="RipGrepTool &gt; getDescription &gt; should indicate searching across all workspace directories when no path specified" time="0.0060378">
        </testcase>
        <testcase classname="src/tools/ripGrep.test.ts" name="RipGrepTool &gt; getDescription &gt; should generate correct description with pattern, include, and path" time="0.0064135">
        </testcase>
        <testcase classname="src/tools/ripGrep.test.ts" name="RipGrepTool &gt; getDescription &gt; should use ./ for root path in description" time="0.0058971">
        </testcase>
    </testsuite>
    <testsuite name="src/tools/shell.test.ts" timestamp="2025-09-23T13:26:52.164Z" hostname="WIN-33AANMPCPKN" tests="21" failures="0" errors="0" skipped="0" time="0.1204127">
        <testcase classname="src/tools/shell.test.ts" name="ShellTool &gt; isCommandAllowed &gt; should allow a command if no restrictions are provided" time="0.0041998">
        </testcase>
        <testcase classname="src/tools/shell.test.ts" name="ShellTool &gt; isCommandAllowed &gt; should block a command with command substitution using $()" time="0.00076">
        </testcase>
        <testcase classname="src/tools/shell.test.ts" name="ShellTool &gt; build &gt; should return an invocation for a valid command" time="0.0261929">
        </testcase>
        <testcase classname="src/tools/shell.test.ts" name="ShellTool &gt; build &gt; should throw an error for an empty command" time="0.0028424">
        </testcase>
        <testcase classname="src/tools/shell.test.ts" name="ShellTool &gt; build &gt; should throw an error for a relative directory path" time="0.0016414">
        </testcase>
        <testcase classname="src/tools/shell.test.ts" name="ShellTool &gt; build &gt; should throw an error for a directory outside the workspace" time="0.0014583">
        </testcase>
        <testcase classname="src/tools/shell.test.ts" name="ShellTool &gt; build &gt; should return an invocation for a valid absolute directory path" time="0.0015671">
        </testcase>
        <testcase classname="src/tools/shell.test.ts" name="ShellTool &gt; execute &gt; should wrap command on linux and parse pgrep output" time="0.0040682">
        </testcase>
        <testcase classname="src/tools/shell.test.ts" name="ShellTool &gt; execute &gt; should use the provided directory as cwd" time="0.0025465">
        </testcase>
        <testcase classname="src/tools/shell.test.ts" name="ShellTool &gt; execute &gt; should not wrap command on windows" time="0.0025134">
        </testcase>
        <testcase classname="src/tools/shell.test.ts" name="ShellTool &gt; execute &gt; should format error messages correctly" time="0.0016875">
        </testcase>
        <testcase classname="src/tools/shell.test.ts" name="ShellTool &gt; execute &gt; should return a SHELL_EXECUTE_ERROR for a command failure" time="0.0022025">
        </testcase>
        <testcase classname="src/tools/shell.test.ts" name="ShellTool &gt; execute &gt; should throw an error for invalid parameters" time="0.0023273">
        </testcase>
        <testcase classname="src/tools/shell.test.ts" name="ShellTool &gt; execute &gt; should throw an error for invalid directory" time="0.0305262">
        </testcase>
        <testcase classname="src/tools/shell.test.ts" name="ShellTool &gt; execute &gt; should summarize output when configured" time="0.0096899">
        </testcase>
        <testcase classname="src/tools/shell.test.ts" name="ShellTool &gt; execute &gt; should clean up the temp file on synchronous execution error" time="0.0025764">
        </testcase>
        <testcase classname="src/tools/shell.test.ts" name="ShellTool &gt; execute &gt; Streaming to `updateOutput` &gt; should immediately show binary detection message and throttle progress" time="0.0114963">
        </testcase>
        <testcase classname="src/tools/shell.test.ts" name="ShellTool &gt; shouldConfirmExecute &gt; should request confirmation for a new command and allowlist it on &quot;Always&quot;" time="0.0035583">
        </testcase>
        <testcase classname="src/tools/shell.test.ts" name="ShellTool &gt; shouldConfirmExecute &gt; should throw an error if validation fails" time="0.0027618">
        </testcase>
        <testcase classname="src/tools/shell.test.ts" name="ShellTool &gt; getDescription &gt; should return the windows description when on windows" time="0.002045">
        </testcase>
        <testcase classname="src/tools/shell.test.ts" name="ShellTool &gt; getDescription &gt; should return the non-windows description when not on windows" time="0.0010232">
        </testcase>
    </testsuite>
    <testsuite name="src/tools/smart-edit.test.ts" timestamp="2025-09-23T13:26:52.169Z" hostname="WIN-33AANMPCPKN" tests="20" failures="0" errors="0" skipped="0" time="0.1405466">
        <testcase classname="src/tools/smart-edit.test.ts" name="SmartEditTool &gt; applyReplacement &gt; should return newString if isNewFile is true" time="0.0059395">
        </testcase>
        <testcase classname="src/tools/smart-edit.test.ts" name="SmartEditTool &gt; applyReplacement &gt; should replace oldString with newString in currentContent" time="0.0019001">
        </testcase>
        <testcase classname="src/tools/smart-edit.test.ts" name="SmartEditTool &gt; applyReplacement &gt; should treat $ literally and not as replacement pattern" time="0.0013615">
        </testcase>
        <testcase classname="src/tools/smart-edit.test.ts" name="SmartEditTool &gt; applyReplacement &gt; should treat $&apos; literally and not as a replacement pattern" time="0.0013603">
        </testcase>
        <testcase classname="src/tools/smart-edit.test.ts" name="SmartEditTool &gt; calculateReplacement &gt; should perform an exact replacement" time="0.0016243">
        </testcase>
        <testcase classname="src/tools/smart-edit.test.ts" name="SmartEditTool &gt; calculateReplacement &gt; should perform a flexible, whitespace-insensitive replacement" time="0.001908">
        </testcase>
        <testcase classname="src/tools/smart-edit.test.ts" name="SmartEditTool &gt; calculateReplacement &gt; should return 0 occurrences if no match is found" time="0.0014221">
        </testcase>
        <testcase classname="src/tools/smart-edit.test.ts" name="SmartEditTool &gt; validateToolParams &gt; should return null for valid params" time="0.0347319">
        </testcase>
        <testcase classname="src/tools/smart-edit.test.ts" name="SmartEditTool &gt; validateToolParams &gt; should return error for relative path" time="0.0065385">
        </testcase>
        <testcase classname="src/tools/smart-edit.test.ts" name="SmartEditTool &gt; execute &gt; should edit an existing file and return diff with fileName" time="0.0185956">
        </testcase>
        <testcase classname="src/tools/smart-edit.test.ts" name="SmartEditTool &gt; execute &gt; should return error if old_string is not found in file" time="0.0107986">
        </testcase>
        <testcase classname="src/tools/smart-edit.test.ts" name="SmartEditTool &gt; execute &gt; should succeed if FixLLMEditWithInstruction corrects the params" time="0.0066278">
        </testcase>
        <testcase classname="src/tools/smart-edit.test.ts" name="SmartEditTool &gt; execute &gt; should return NO_CHANGE if FixLLMEditWithInstruction determines no changes are needed" time="0.0051979">
        </testcase>
        <testcase classname="src/tools/smart-edit.test.ts" name="SmartEditTool &gt; execute &gt; should preserve CRLF line endings when editing a file" time="0.008683">
        </testcase>
        <testcase classname="src/tools/smart-edit.test.ts" name="SmartEditTool &gt; execute &gt; should create a new file with CRLF line endings if new_string has them" time="0.005514">
        </testcase>
        <testcase classname="src/tools/smart-edit.test.ts" name="SmartEditTool &gt; Error Scenarios &gt; should return FILE_NOT_FOUND error" time="0.0045997">
        </testcase>
        <testcase classname="src/tools/smart-edit.test.ts" name="SmartEditTool &gt; Error Scenarios &gt; should return ATTEMPT_TO_CREATE_EXISTING_FILE error" time="0.0047946">
        </testcase>
        <testcase classname="src/tools/smart-edit.test.ts" name="SmartEditTool &gt; Error Scenarios &gt; should return NO_OCCURRENCE_FOUND error" time="0.0047336">
        </testcase>
        <testcase classname="src/tools/smart-edit.test.ts" name="SmartEditTool &gt; Error Scenarios &gt; should return EXPECTED_OCCURRENCE_MISMATCH error" time="0.0047981">
        </testcase>
        <testcase classname="src/tools/smart-edit.test.ts" name="SmartEditTool &gt; IDE mode &gt; should call ideClient.openDiff and update params on confirmation" time="0.0071762">
        </testcase>
    </testsuite>
    <testsuite name="src/tools/tool-registry.test.ts" timestamp="2025-09-23T13:26:52.174Z" hostname="WIN-33AANMPCPKN" tests="9" failures="0" errors="0" skipped="0" time="0.0515459">
        <testcase classname="src/tools/tool-registry.test.ts" name="ToolRegistry &gt; registerTool &gt; should register a new tool" time="0.0039064">
        </testcase>
        <testcase classname="src/tools/tool-registry.test.ts" name="ToolRegistry &gt; getAllTools &gt; should return all registered tools sorted alphabetically by displayName" time="0.0016982">
        </testcase>
        <testcase classname="src/tools/tool-registry.test.ts" name="ToolRegistry &gt; getAllToolNames &gt; should return all registered tool names" time="0.0006853">
        </testcase>
        <testcase classname="src/tools/tool-registry.test.ts" name="ToolRegistry &gt; getToolsByServer &gt; should return an empty array if no tools match the server name" time="0.0006037">
        </testcase>
        <testcase classname="src/tools/tool-registry.test.ts" name="ToolRegistry &gt; getToolsByServer &gt; should return only tools matching the server name, sorted by name" time="0.0043806">
        </testcase>
        <testcase classname="src/tools/tool-registry.test.ts" name="ToolRegistry &gt; discoverTools &gt; should will preserve tool parametersJsonSchema during discovery from command" time="0.0027285">
        </testcase>
        <testcase classname="src/tools/tool-registry.test.ts" name="ToolRegistry &gt; discoverTools &gt; should return a DISCOVERED_TOOL_EXECUTION_ERROR on tool failure" time="0.0325288">
        </testcase>
        <testcase classname="src/tools/tool-registry.test.ts" name="ToolRegistry &gt; discoverTools &gt; should discover tools using MCP servers defined in getMcpServers" time="0.0019676">
        </testcase>
        <testcase classname="src/tools/tool-registry.test.ts" name="ToolRegistry &gt; DiscoveredToolInvocation &gt; should return the stringified params from getDescription" time="0.0016744">
        </testcase>
    </testsuite>
    <testsuite name="src/tools/tools.test.ts" timestamp="2025-09-23T13:26:52.176Z" hostname="WIN-33AANMPCPKN" tests="11" failures="0" errors="0" skipped="0" time="0.0075777">
        <testcase classname="src/tools/tools.test.ts" name="DeclarativeTool &gt; validateBuildAndExecute &gt; should return INVALID_TOOL_PARAMS error if build fails" time="0.0035889">
        </testcase>
        <testcase classname="src/tools/tools.test.ts" name="DeclarativeTool &gt; validateBuildAndExecute &gt; should return EXECUTION_FAILED error if execute fails" time="0.0008546">
        </testcase>
        <testcase classname="src/tools/tools.test.ts" name="DeclarativeTool &gt; validateBuildAndExecute &gt; should return the result of execute on success" time="0.0004066">
        </testcase>
        <testcase classname="src/tools/tools.test.ts" name="hasCycleInSchema &gt; should detect a simple direct cycle" time="0.000641">
        </testcase>
        <testcase classname="src/tools/tools.test.ts" name="hasCycleInSchema &gt; should detect a cycle from object properties referencing parent properties" time="0.0001503">
        </testcase>
        <testcase classname="src/tools/tools.test.ts" name="hasCycleInSchema &gt; should detect a cycle from array items referencing parent properties" time="0.000088">
        </testcase>
        <testcase classname="src/tools/tools.test.ts" name="hasCycleInSchema &gt; should detect a cycle between sibling properties" time="0.0000968">
        </testcase>
        <testcase classname="src/tools/tools.test.ts" name="hasCycleInSchema &gt; should not detect a cycle in a valid schema" time="0.0000916">
        </testcase>
        <testcase classname="src/tools/tools.test.ts" name="hasCycleInSchema &gt; should handle non-cyclic sibling refs" time="0.0000789">
        </testcase>
        <testcase classname="src/tools/tools.test.ts" name="hasCycleInSchema &gt; should handle nested but not cyclic refs" time="0.0000865">
        </testcase>
        <testcase classname="src/tools/tools.test.ts" name="hasCycleInSchema &gt; should return false for an empty schema" time="0.0000659">
        </testcase>
    </testsuite>
    <testsuite name="src/tools/web-fetch.test.ts" timestamp="2025-09-23T13:26:52.178Z" hostname="WIN-33AANMPCPKN" tests="7" failures="0" errors="0" skipped="0" time="0.0403203">
        <testcase classname="src/tools/web-fetch.test.ts" name="WebFetchTool &gt; execute &gt; should return WEB_FETCH_NO_URL_IN_PROMPT when no URL is in the prompt for fallback" time="0.0260362">
        </testcase>
        <testcase classname="src/tools/web-fetch.test.ts" name="WebFetchTool &gt; execute &gt; should return WEB_FETCH_FALLBACK_FAILED on fallback fetch failure" time="0.001566">
        </testcase>
        <testcase classname="src/tools/web-fetch.test.ts" name="WebFetchTool &gt; execute &gt; should return WEB_FETCH_PROCESSING_ERROR on general processing failure" time="0.007042">
            <system-err>
Error processing web content for prompt &quot;fetch https://public.ip...&quot;: API error Error: API error
    at [90mE:\claude-code\pipedream\modelcontextprotocol\agentrpc\gemini-cli\packages\core\[39msrc\tools\web-fetch.test.ts:66:45
    at file:///E:/claude-code/pipedream/modelcontextprotocol/agentrpc/gemini-cli/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:155:11
    at file:///E:/claude-code/pipedream/modelcontextprotocol/agentrpc/gemini-cli/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:752:26
    at file:///E:/claude-code/pipedream/modelcontextprotocol/agentrpc/gemini-cli/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:1897:20
    at new Promise (&lt;anonymous&gt;)
    at runWithTimeout (file:///E:/claude-code/pipedream/modelcontextprotocol/agentrpc/gemini-cli/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:1863:10)
    at runTest (file:///E:/claude-code/pipedream/modelcontextprotocol/agentrpc/gemini-cli/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:1574:12)
[90m    at processTicksAndRejections (node:internal/process/task_queues:105:5)[39m
    at runSuite (file:///E:/claude-code/pipedream/modelcontextprotocol/agentrpc/gemini-cli/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:1729:8)
    at runSuite (file:///E:/claude-code/pipedream/modelcontextprotocol/agentrpc/gemini-cli/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:1729:8)

            </system-err>
        </testcase>
        <testcase classname="src/tools/web-fetch.test.ts" name="WebFetchTool &gt; shouldConfirmExecute &gt; should return confirmation details with the correct prompt and urls" time="0.0016471">
        </testcase>
        <testcase classname="src/tools/web-fetch.test.ts" name="WebFetchTool &gt; shouldConfirmExecute &gt; should convert github urls to raw format" time="0.0007698">
        </testcase>
        <testcase classname="src/tools/web-fetch.test.ts" name="WebFetchTool &gt; shouldConfirmExecute &gt; should return false if approval mode is AUTO_EDIT" time="0.0007009">
        </testcase>
        <testcase classname="src/tools/web-fetch.test.ts" name="WebFetchTool &gt; shouldConfirmExecute &gt; should call setApprovalMode when onConfirm is called with ProceedAlways" time="0.0013925">
        </testcase>
    </testsuite>
    <testsuite name="src/tools/web-search.test.ts" timestamp="2025-09-23T13:26:52.179Z" hostname="WIN-33AANMPCPKN" tests="9" failures="0" errors="0" skipped="0" time="0.0568957">
        <testcase classname="src/tools/web-search.test.ts" name="WebSearchTool &gt; build &gt; should return an invocation for a valid query" time="0.0277748">
        </testcase>
        <testcase classname="src/tools/web-search.test.ts" name="WebSearchTool &gt; build &gt; should throw an error for an empty query" time="0.0024666">
        </testcase>
        <testcase classname="src/tools/web-search.test.ts" name="WebSearchTool &gt; build &gt; should throw an error for a query with only whitespace" time="0.0015056">
        </testcase>
        <testcase classname="src/tools/web-search.test.ts" name="WebSearchTool &gt; getDescription &gt; should return a description of the search" time="0.0014198">
        </testcase>
        <testcase classname="src/tools/web-search.test.ts" name="WebSearchTool &gt; execute &gt; should return search results for a successful query" time="0.0034049">
        </testcase>
        <testcase classname="src/tools/web-search.test.ts" name="WebSearchTool &gt; execute &gt; should handle no search results found" time="0.0019449">
        </testcase>
        <testcase classname="src/tools/web-search.test.ts" name="WebSearchTool &gt; execute &gt; should return a WEB_SEARCH_FAILED error on failure" time="0.0113534">
            <system-err>
Error during web search for query &quot;error query&quot;: API Failure Error: API Failure
    at [90mE:\claude-code\pipedream\modelcontextprotocol\agentrpc\gemini-cli\packages\core\[39msrc\tools\web-search.test.ts:120:25
    at file:///E:/claude-code/pipedream/modelcontextprotocol/agentrpc/gemini-cli/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:155:11
    at file:///E:/claude-code/pipedream/modelcontextprotocol/agentrpc/gemini-cli/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:752:26
    at file:///E:/claude-code/pipedream/modelcontextprotocol/agentrpc/gemini-cli/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:1897:20
    at new Promise (&lt;anonymous&gt;)
    at runWithTimeout (file:///E:/claude-code/pipedream/modelcontextprotocol/agentrpc/gemini-cli/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:1863:10)
    at runTest (file:///E:/claude-code/pipedream/modelcontextprotocol/agentrpc/gemini-cli/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:1574:12)
[90m    at processTicksAndRejections (node:internal/process/task_queues:105:5)[39m
    at runSuite (file:///E:/claude-code/pipedream/modelcontextprotocol/agentrpc/gemini-cli/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:1729:8)
    at runSuite (file:///E:/claude-code/pipedream/modelcontextprotocol/agentrpc/gemini-cli/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:1729:8)

            </system-err>
        </testcase>
        <testcase classname="src/tools/web-search.test.ts" name="WebSearchTool &gt; execute &gt; should correctly format results with sources and citations" time="0.0035826">
        </testcase>
        <testcase classname="src/tools/web-search.test.ts" name="WebSearchTool &gt; execute &gt; should insert markers at correct byte positions for multibyte text" time="0.0020707">
        </testcase>
    </testsuite>
    <testsuite name="src/tools/write-file.test.ts" timestamp="2025-09-23T13:26:52.181Z" hostname="WIN-33AANMPCPKN" tests="30" failures="0" errors="0" skipped="0" time="0.3045371">
        <testcase classname="src/tools/write-file.test.ts" name="WriteFileTool &gt; build &gt; should return an invocation for a valid absolute path within root" time="0.0489522">
        </testcase>
        <testcase classname="src/tools/write-file.test.ts" name="WriteFileTool &gt; build &gt; should throw an error for a relative path" time="0.0093679">
        </testcase>
        <testcase classname="src/tools/write-file.test.ts" name="WriteFileTool &gt; build &gt; should throw an error for a path outside root" time="0.0026667">
        </testcase>
        <testcase classname="src/tools/write-file.test.ts" name="WriteFileTool &gt; build &gt; should throw an error if path is a directory" time="0.0025925">
        </testcase>
        <testcase classname="src/tools/write-file.test.ts" name="WriteFileTool &gt; build &gt; should throw an error if the content is null" time="0.0027369">
        </testcase>
        <testcase classname="src/tools/write-file.test.ts" name="WriteFileTool &gt; build &gt; should throw error if the file_path is empty" time="0.0027618">
        </testcase>
        <testcase classname="src/tools/write-file.test.ts" name="WriteFileTool &gt; getCorrectedFileContent &gt; should call ensureCorrectFileContent for a new file" time="0.0046342">
        </testcase>
        <testcase classname="src/tools/write-file.test.ts" name="WriteFileTool &gt; getCorrectedFileContent &gt; should call ensureCorrectEdit for an existing file" time="0.0087466">
        </testcase>
        <testcase classname="src/tools/write-file.test.ts" name="WriteFileTool &gt; getCorrectedFileContent &gt; should return error if reading an existing file fails (e.g. permissions)" time="0.0337046">
        </testcase>
        <testcase classname="src/tools/write-file.test.ts" name="WriteFileTool &gt; shouldConfirmExecute &gt; should return false if _getCorrectedFileContent returns an error" time="0.0048462">
        </testcase>
        <testcase classname="src/tools/write-file.test.ts" name="WriteFileTool &gt; shouldConfirmExecute &gt; should request confirmation with diff for a new file (with corrected content)" time="0.0054884">
        </testcase>
        <testcase classname="src/tools/write-file.test.ts" name="WriteFileTool &gt; shouldConfirmExecute &gt; should request confirmation with diff for an existing file (with corrected content)" time="0.0040633">
        </testcase>
        <testcase classname="src/tools/write-file.test.ts" name="WriteFileTool &gt; shouldConfirmExecute &gt; with IDE integration &gt; should call openDiff and await it when in IDE mode and connected" time="0.0027486">
        </testcase>
        <testcase classname="src/tools/write-file.test.ts" name="WriteFileTool &gt; shouldConfirmExecute &gt; with IDE integration &gt; should not call openDiff if not in IDE mode" time="0.0034602">
        </testcase>
        <testcase classname="src/tools/write-file.test.ts" name="WriteFileTool &gt; shouldConfirmExecute &gt; with IDE integration &gt; should not call openDiff if IDE is not connected" time="0.0041094">
        </testcase>
        <testcase classname="src/tools/write-file.test.ts" name="WriteFileTool &gt; shouldConfirmExecute &gt; with IDE integration &gt; should update params.content with IDE content when onConfirm is called" time="0.0039618">
        </testcase>
        <testcase classname="src/tools/write-file.test.ts" name="WriteFileTool &gt; shouldConfirmExecute &gt; with IDE integration &gt; should not await ideConfirmation promise" time="0.0821219">
        </testcase>
        <testcase classname="src/tools/write-file.test.ts" name="WriteFileTool &gt; execute &gt; should return error if _getCorrectedFileContent returns an error during execute" time="0.0038961">
        </testcase>
        <testcase classname="src/tools/write-file.test.ts" name="WriteFileTool &gt; execute &gt; should write a new file with corrected content and return diff" time="0.0068816">
        </testcase>
        <testcase classname="src/tools/write-file.test.ts" name="WriteFileTool &gt; execute &gt; should overwrite an existing file with corrected content and return diff" time="0.0086933">
        </testcase>
        <testcase classname="src/tools/write-file.test.ts" name="WriteFileTool &gt; execute &gt; should create directory if it does not exist" time="0.0059641">
        </testcase>
        <testcase classname="src/tools/write-file.test.ts" name="WriteFileTool &gt; execute &gt; should include modification message when proposed content is modified" time="0.0037639">
        </testcase>
        <testcase classname="src/tools/write-file.test.ts" name="WriteFileTool &gt; execute &gt; should not include modification message when proposed content is not modified" time="0.0084766">
        </testcase>
        <testcase classname="src/tools/write-file.test.ts" name="WriteFileTool &gt; execute &gt; should not include modification message when modified_by_user is not provided" time="0.0034251">
        </testcase>
        <testcase classname="src/tools/write-file.test.ts" name="WriteFileTool &gt; workspace boundary validation &gt; should validate paths are within workspace root" time="0.0018156">
        </testcase>
        <testcase classname="src/tools/write-file.test.ts" name="WriteFileTool &gt; workspace boundary validation &gt; should reject paths outside workspace root" time="0.0017595">
        </testcase>
        <testcase classname="src/tools/write-file.test.ts" name="WriteFileTool &gt; specific error types for write failures &gt; should return PERMISSION_DENIED error when write fails with EACCES" time="0.0216276">
        </testcase>
        <testcase classname="src/tools/write-file.test.ts" name="WriteFileTool &gt; specific error types for write failures &gt; should return NO_SPACE_LEFT error when write fails with ENOSPC" time="0.0031901">
        </testcase>
        <testcase classname="src/tools/write-file.test.ts" name="WriteFileTool &gt; specific error types for write failures &gt; should return TARGET_IS_DIRECTORY error when write fails with EISDIR" time="0.0025243">
        </testcase>
        <testcase classname="src/tools/write-file.test.ts" name="WriteFileTool &gt; specific error types for write failures &gt; should return FILE_WRITE_FAILURE for generic write errors" time="0.0036798">
        </testcase>
    </testsuite>
    <testsuite name="src/tools/write-todos.test.ts" timestamp="2025-09-23T13:26:52.184Z" hostname="WIN-33AANMPCPKN" tests="9" failures="0" errors="0" skipped="0" time="0.0389147">
        <testcase classname="src/tools/write-todos.test.ts" name="WriteTodosTool &gt; validation &gt; should not throw for valid parameters" time="0.0353722">
        </testcase>
        <testcase classname="src/tools/write-todos.test.ts" name="WriteTodosTool &gt; validation &gt; should not throw for an empty list" time="0.0002017">
        </testcase>
        <testcase classname="src/tools/write-todos.test.ts" name="WriteTodosTool &gt; validation &gt; should throw an error if todos is not an array" time="0.0011216">
        </testcase>
        <testcase classname="src/tools/write-todos.test.ts" name="WriteTodosTool &gt; validation &gt; should throw an error if a todo item is not an object" time="0.0001798">
        </testcase>
        <testcase classname="src/tools/write-todos.test.ts" name="WriteTodosTool &gt; validation &gt; should throw an error if a todo description is missing or empty" time="0.0001568">
        </testcase>
        <testcase classname="src/tools/write-todos.test.ts" name="WriteTodosTool &gt; validation &gt; should throw an error if a todo status is invalid" time="0.000152">
        </testcase>
        <testcase classname="src/tools/write-todos.test.ts" name="WriteTodosTool &gt; validation &gt; should throw an error if more than one task is in_progress" time="0.0001365">
        </testcase>
        <testcase classname="src/tools/write-todos.test.ts" name="WriteTodosTool &gt; execute &gt; should return a success message for clearing the list" time="0.0002213">
        </testcase>
        <testcase classname="src/tools/write-todos.test.ts" name="WriteTodosTool &gt; execute &gt; should return a formatted todo list on success" time="0.0001188">
        </testcase>
    </testsuite>
    <testsuite name="src/utils/bfsFileSearch.test.ts" timestamp="2025-09-23T13:26:52.185Z" hostname="WIN-33AANMPCPKN" tests="11" failures="0" errors="0" skipped="0" time="0.1318003">
        <testcase classname="src/utils/bfsFileSearch.test.ts" name="bfsFileSearch &gt; should find a file in the root directory" time="0.0067893">
        </testcase>
        <testcase classname="src/utils/bfsFileSearch.test.ts" name="bfsFileSearch &gt; should find a file in a nested directory" time="0.0040826">
        </testcase>
        <testcase classname="src/utils/bfsFileSearch.test.ts" name="bfsFileSearch &gt; should find multiple files with the same name" time="0.0042338">
        </testcase>
        <testcase classname="src/utils/bfsFileSearch.test.ts" name="bfsFileSearch &gt; should return an empty array if no file is found" time="0.0020009">
        </testcase>
        <testcase classname="src/utils/bfsFileSearch.test.ts" name="bfsFileSearch &gt; should ignore directories specified in ignoreDirs" time="0.002851">
        </testcase>
        <testcase classname="src/utils/bfsFileSearch.test.ts" name="bfsFileSearch &gt; should respect the maxDirs limit and not find the file" time="0.0037486">
        </testcase>
        <testcase classname="src/utils/bfsFileSearch.test.ts" name="bfsFileSearch &gt; should respect the maxDirs limit and find the file" time="0.0054428">
        </testcase>
        <testcase classname="src/utils/bfsFileSearch.test.ts" name="bfsFileSearch &gt; with FileDiscoveryService &gt; should ignore gitignored files" time="0.0099586">
        </testcase>
        <testcase classname="src/utils/bfsFileSearch.test.ts" name="bfsFileSearch &gt; with FileDiscoveryService &gt; should ignore geminiignored files" time="0.0075185">
        </testcase>
        <testcase classname="src/utils/bfsFileSearch.test.ts" name="bfsFileSearch &gt; with FileDiscoveryService &gt; should not ignore files if respect flags are false" time="0.0050622">
        </testcase>
        <testcase classname="src/utils/bfsFileSearch.test.ts" name="bfsFileSearch &gt; should find all files in a complex directory structure" time="0.0785139">
        </testcase>
    </testsuite>
    <testsuite name="src/utils/editCorrector.test.ts" timestamp="2025-09-23T13:26:52.187Z" hostname="WIN-33AANMPCPKN" tests="40" failures="0" errors="0" skipped="0" time="0.0254512">
        <testcase classname="src/utils/editCorrector.test.ts" name="editCorrector &gt; countOccurrences &gt; should return 0 for empty string" time="0.0016289">
        </testcase>
        <testcase classname="src/utils/editCorrector.test.ts" name="editCorrector &gt; countOccurrences &gt; should return 0 for empty substring" time="0.0001432">
        </testcase>
        <testcase classname="src/utils/editCorrector.test.ts" name="editCorrector &gt; countOccurrences &gt; should return 0 if substring is not found" time="0.0001024">
        </testcase>
        <testcase classname="src/utils/editCorrector.test.ts" name="editCorrector &gt; countOccurrences &gt; should return 1 if substring is found once" time="0.0000841">
        </testcase>
        <testcase classname="src/utils/editCorrector.test.ts" name="editCorrector &gt; countOccurrences &gt; should return correct count for multiple occurrences" time="0.0001087">
        </testcase>
        <testcase classname="src/utils/editCorrector.test.ts" name="editCorrector &gt; countOccurrences &gt; should count non-overlapping occurrences" time="0.0001042">
        </testcase>
        <testcase classname="src/utils/editCorrector.test.ts" name="editCorrector &gt; countOccurrences &gt; should correctly count occurrences when substring is longer" time="0.0000757">
        </testcase>
        <testcase classname="src/utils/editCorrector.test.ts" name="editCorrector &gt; countOccurrences &gt; should be case-sensitive" time="0.0000986">
        </testcase>
        <testcase classname="src/utils/editCorrector.test.ts" name="editCorrector &gt; unescapeStringForGeminiBug &gt; should unescape common sequences" time="0.0003938">
        </testcase>
        <testcase classname="src/utils/editCorrector.test.ts" name="editCorrector &gt; unescapeStringForGeminiBug &gt; should handle multiple escaped sequences" time="0.0000938">
        </testcase>
        <testcase classname="src/utils/editCorrector.test.ts" name="editCorrector &gt; unescapeStringForGeminiBug &gt; should not alter already correct sequences" time="0.0001043">
        </testcase>
        <testcase classname="src/utils/editCorrector.test.ts" name="editCorrector &gt; unescapeStringForGeminiBug &gt; should handle mixed correct and incorrect sequences" time="0.0000774">
        </testcase>
        <testcase classname="src/utils/editCorrector.test.ts" name="editCorrector &gt; unescapeStringForGeminiBug &gt; should handle backslash followed by actual newline character" time="0.0001022">
        </testcase>
        <testcase classname="src/utils/editCorrector.test.ts" name="editCorrector &gt; unescapeStringForGeminiBug &gt; should handle multiple backslashes before an escapable character (aggressive unescaping)" time="0.0001251">
        </testcase>
        <testcase classname="src/utils/editCorrector.test.ts" name="editCorrector &gt; unescapeStringForGeminiBug &gt; should return empty string for empty input" time="0.000073">
        </testcase>
        <testcase classname="src/utils/editCorrector.test.ts" name="editCorrector &gt; unescapeStringForGeminiBug &gt; should not alter strings with no targeted escape sequences" time="0.0001295">
        </testcase>
        <testcase classname="src/utils/editCorrector.test.ts" name="editCorrector &gt; unescapeStringForGeminiBug &gt; should correctly process strings with some targeted escapes" time="0.000074">
        </testcase>
        <testcase classname="src/utils/editCorrector.test.ts" name="editCorrector &gt; unescapeStringForGeminiBug &gt; should handle complex cases with mixed slashes and characters" time="0.0000752">
        </testcase>
        <testcase classname="src/utils/editCorrector.test.ts" name="editCorrector &gt; unescapeStringForGeminiBug &gt; should handle escaped backslashes" time="0.0001374">
        </testcase>
        <testcase classname="src/utils/editCorrector.test.ts" name="editCorrector &gt; unescapeStringForGeminiBug &gt; should handle escaped backslashes mixed with other escapes (aggressive unescaping)" time="0.000099">
        </testcase>
        <testcase classname="src/utils/editCorrector.test.ts" name="editCorrector &gt; ensureCorrectEdit &gt; Scenario Group 1: originalParams.old_string matches currentContent directly &gt; Test 1.1: old_string (no literal \), new_string (escaped by Gemini) -&gt; new_string unescaped" time="0.0027341">
        </testcase>
        <testcase classname="src/utils/editCorrector.test.ts" name="editCorrector &gt; ensureCorrectEdit &gt; Scenario Group 1: originalParams.old_string matches currentContent directly &gt; Test 1.2: old_string (no literal \), new_string (correctly formatted) -&gt; new_string unchanged" time="0.000998">
        </testcase>
        <testcase classname="src/utils/editCorrector.test.ts" name="editCorrector &gt; ensureCorrectEdit &gt; Scenario Group 1: originalParams.old_string matches currentContent directly &gt; Test 1.3: old_string (with literal \), new_string (escaped by Gemini) -&gt; new_string unchanged (still escaped)" time="0.0009719">
        </testcase>
        <testcase classname="src/utils/editCorrector.test.ts" name="editCorrector &gt; ensureCorrectEdit &gt; Scenario Group 1: originalParams.old_string matches currentContent directly &gt; Test 1.4: old_string (with literal \), new_string (correctly formatted) -&gt; new_string unchanged" time="0.0010546">
        </testcase>
        <testcase classname="src/utils/editCorrector.test.ts" name="editCorrector &gt; ensureCorrectEdit &gt; Scenario Group 2: originalParams.old_string does NOT match, but unescapeStringForGeminiBug(originalParams.old_string) DOES match &gt; Test 2.1: old_string (over-escaped, no intended literal \), new_string (escaped by Gemini) -&gt; new_string unescaped" time="0.0011481">
        </testcase>
        <testcase classname="src/utils/editCorrector.test.ts" name="editCorrector &gt; ensureCorrectEdit &gt; Scenario Group 2: originalParams.old_string does NOT match, but unescapeStringForGeminiBug(originalParams.old_string) DOES match &gt; Test 2.2: old_string (over-escaped, no intended literal \), new_string (correctly formatted) -&gt; new_string unescaped (harmlessly)" time="0.0009194">
        </testcase>
        <testcase classname="src/utils/editCorrector.test.ts" name="editCorrector &gt; ensureCorrectEdit &gt; Scenario Group 2: originalParams.old_string does NOT match, but unescapeStringForGeminiBug(originalParams.old_string) DOES match &gt; Test 2.3: old_string (over-escaped, with intended literal \), new_string (simple) -&gt; new_string corrected" time="0.000883">
        </testcase>
        <testcase classname="src/utils/editCorrector.test.ts" name="editCorrector &gt; ensureCorrectEdit &gt; Scenario Group 3: LLM Correction Path &gt; Test 3.1: old_string (no literal \), new_string (escaped by Gemini), LLM re-escapes new_string -&gt; final new_string is double unescaped" time="0.0009449">
        </testcase>
        <testcase classname="src/utils/editCorrector.test.ts" name="editCorrector &gt; ensureCorrectEdit &gt; Scenario Group 3: LLM Correction Path &gt; Test 3.2: old_string (with literal \), new_string (escaped by Gemini), LLM re-escapes new_string -&gt; final new_string is unescaped once" time="0.0013638">
        </testcase>
        <testcase classname="src/utils/editCorrector.test.ts" name="editCorrector &gt; ensureCorrectEdit &gt; Scenario Group 3: LLM Correction Path &gt; Test 3.3: old_string needs LLM, new_string is fine -&gt; old_string corrected, new_string original" time="0.00106">
        </testcase>
        <testcase classname="src/utils/editCorrector.test.ts" name="editCorrector &gt; ensureCorrectEdit &gt; Scenario Group 3: LLM Correction Path &gt; Test 3.4: LLM correction path, correctNewString returns the originalNewString it was passed (which was unescaped) -&gt; final new_string is unescaped" time="0.0008897">
        </testcase>
        <testcase classname="src/utils/editCorrector.test.ts" name="editCorrector &gt; ensureCorrectEdit &gt; Scenario Group 4: No Match Found / Multiple Matches &gt; Test 4.1: No version of old_string (original, unescaped, LLM-corrected) matches -&gt; returns original params, 0 occurrences" time="0.0017395">
        </testcase>
        <testcase classname="src/utils/editCorrector.test.ts" name="editCorrector &gt; ensureCorrectEdit &gt; Scenario Group 4: No Match Found / Multiple Matches &gt; Test 4.2: unescapedOldStringAttempt results in &gt;1 occurrences -&gt; returns original params, count occurrences" time="0.0014534">
        </testcase>
        <testcase classname="src/utils/editCorrector.test.ts" name="editCorrector &gt; ensureCorrectEdit &gt; Scenario Group 5: Specific unescapeStringForGeminiBug checks (integrated into ensureCorrectEdit) &gt; Test 5.1: old_string needs LLM to become currentContent, new_string also needs correction" time="0.0008915">
        </testcase>
        <testcase classname="src/utils/editCorrector.test.ts" name="editCorrector &gt; ensureCorrectEdit &gt; Scenario Group 6: Concurrent Edits &gt; Test 6.1: should return early if file was modified by another process" time="0.0010703">
        </testcase>
        <testcase classname="src/utils/editCorrector.test.ts" name="editCorrector &gt; ensureCorrectFileContent &gt; should return content unchanged if no escaping issues detected" time="0.000262">
        </testcase>
        <testcase classname="src/utils/editCorrector.test.ts" name="editCorrector &gt; ensureCorrectFileContent &gt; should call correctStringEscaping for potentially escaped content" time="0.000509">
        </testcase>
        <testcase classname="src/utils/editCorrector.test.ts" name="editCorrector &gt; ensureCorrectFileContent &gt; should handle correctStringEscaping returning corrected content via correct property name" time="0.000186">
        </testcase>
        <testcase classname="src/utils/editCorrector.test.ts" name="editCorrector &gt; ensureCorrectFileContent &gt; should return original content if LLM correction fails" time="0.0001564">
        </testcase>
        <testcase classname="src/utils/editCorrector.test.ts" name="editCorrector &gt; ensureCorrectFileContent &gt; should handle various escape sequences that need correction" time="0.000135">
        </testcase>
    </testsuite>
    <testsuite name="src/utils/editor.test.ts" timestamp="2025-09-23T13:26:52.191Z" hostname="WIN-33AANMPCPKN" tests="113" failures="0" errors="0" skipped="0" time="0.0377703">
        <testcase classname="src/utils/editor.test.ts" name="editor utils &gt; checkHasEditorType &gt; vscode &gt; should return true if first command &quot;code&quot; exists on non-windows" time="0.003563">
        </testcase>
        <testcase classname="src/utils/editor.test.ts" name="editor utils &gt; checkHasEditorType &gt; vscode &gt; should return false if none of the commands exist on non-windows" time="0.0002375">
        </testcase>
        <testcase classname="src/utils/editor.test.ts" name="editor utils &gt; checkHasEditorType &gt; vscode &gt; should return true if first command &quot;code.cmd&quot; exists on windows" time="0.0002309">
        </testcase>
        <testcase classname="src/utils/editor.test.ts" name="editor utils &gt; checkHasEditorType &gt; vscode &gt; should return false if none of the commands exist on windows" time="0.0001418">
        </testcase>
        <testcase classname="src/utils/editor.test.ts" name="editor utils &gt; checkHasEditorType &gt; vscodium &gt; should return true if first command &quot;codium&quot; exists on non-windows" time="0.0001469">
        </testcase>
        <testcase classname="src/utils/editor.test.ts" name="editor utils &gt; checkHasEditorType &gt; vscodium &gt; should return false if none of the commands exist on non-windows" time="0.0001061">
        </testcase>
        <testcase classname="src/utils/editor.test.ts" name="editor utils &gt; checkHasEditorType &gt; vscodium &gt; should return true if first command &quot;codium.cmd&quot; exists on windows" time="0.0001538">
        </testcase>
        <testcase classname="src/utils/editor.test.ts" name="editor utils &gt; checkHasEditorType &gt; vscodium &gt; should return false if none of the commands exist on windows" time="0.0001007">
        </testcase>
        <testcase classname="src/utils/editor.test.ts" name="editor utils &gt; checkHasEditorType &gt; windsurf &gt; should return true if first command &quot;windsurf&quot; exists on non-windows" time="0.0001416">
        </testcase>
        <testcase classname="src/utils/editor.test.ts" name="editor utils &gt; checkHasEditorType &gt; windsurf &gt; should return false if none of the commands exist on non-windows" time="0.000114">
        </testcase>
        <testcase classname="src/utils/editor.test.ts" name="editor utils &gt; checkHasEditorType &gt; windsurf &gt; should return true if first command &quot;windsurf&quot; exists on windows" time="0.0002362">
        </testcase>
        <testcase classname="src/utils/editor.test.ts" name="editor utils &gt; checkHasEditorType &gt; windsurf &gt; should return false if none of the commands exist on windows" time="0.0001164">
        </testcase>
        <testcase classname="src/utils/editor.test.ts" name="editor utils &gt; checkHasEditorType &gt; cursor &gt; should return true if first command &quot;cursor&quot; exists on non-windows" time="0.000133">
        </testcase>
        <testcase classname="src/utils/editor.test.ts" name="editor utils &gt; checkHasEditorType &gt; cursor &gt; should return false if none of the commands exist on non-windows" time="0.0001099">
        </testcase>
        <testcase classname="src/utils/editor.test.ts" name="editor utils &gt; checkHasEditorType &gt; cursor &gt; should return true if first command &quot;cursor&quot; exists on windows" time="0.0001334">
        </testcase>
        <testcase classname="src/utils/editor.test.ts" name="editor utils &gt; checkHasEditorType &gt; cursor &gt; should return false if none of the commands exist on windows" time="0.0001017">
        </testcase>
        <testcase classname="src/utils/editor.test.ts" name="editor utils &gt; checkHasEditorType &gt; vim &gt; should return true if first command &quot;vim&quot; exists on non-windows" time="0.000145">
        </testcase>
        <testcase classname="src/utils/editor.test.ts" name="editor utils &gt; checkHasEditorType &gt; vim &gt; should return false if none of the commands exist on non-windows" time="0.0001116">
        </testcase>
        <testcase classname="src/utils/editor.test.ts" name="editor utils &gt; checkHasEditorType &gt; vim &gt; should return true if first command &quot;vim&quot; exists on windows" time="0.0001375">
        </testcase>
        <testcase classname="src/utils/editor.test.ts" name="editor utils &gt; checkHasEditorType &gt; vim &gt; should return false if none of the commands exist on windows" time="0.0001018">
        </testcase>
        <testcase classname="src/utils/editor.test.ts" name="editor utils &gt; checkHasEditorType &gt; neovim &gt; should return true if first command &quot;nvim&quot; exists on non-windows" time="0.0001277">
        </testcase>
        <testcase classname="src/utils/editor.test.ts" name="editor utils &gt; checkHasEditorType &gt; neovim &gt; should return false if none of the commands exist on non-windows" time="0.0013452">
        </testcase>
        <testcase classname="src/utils/editor.test.ts" name="editor utils &gt; checkHasEditorType &gt; neovim &gt; should return true if first command &quot;nvim&quot; exists on windows" time="0.000161">
        </testcase>
        <testcase classname="src/utils/editor.test.ts" name="editor utils &gt; checkHasEditorType &gt; neovim &gt; should return false if none of the commands exist on windows" time="0.0001054">
        </testcase>
        <testcase classname="src/utils/editor.test.ts" name="editor utils &gt; checkHasEditorType &gt; zed &gt; should return true if first command &quot;zed&quot; exists on non-windows" time="0.0001241">
        </testcase>
        <testcase classname="src/utils/editor.test.ts" name="editor utils &gt; checkHasEditorType &gt; zed &gt; should return true if first command doesn&apos;t exist but second command &quot;zeditor&quot; exists on non-windows" time="0.0002154">
        </testcase>
        <testcase classname="src/utils/editor.test.ts" name="editor utils &gt; checkHasEditorType &gt; zed &gt; should return false if none of the commands exist on non-windows" time="0.0000992">
        </testcase>
        <testcase classname="src/utils/editor.test.ts" name="editor utils &gt; checkHasEditorType &gt; zed &gt; should return true if first command &quot;zed&quot; exists on windows" time="0.0001193">
        </testcase>
        <testcase classname="src/utils/editor.test.ts" name="editor utils &gt; checkHasEditorType &gt; zed &gt; should return false if none of the commands exist on windows" time="0.0000955">
        </testcase>
        <testcase classname="src/utils/editor.test.ts" name="editor utils &gt; checkHasEditorType &gt; emacs &gt; should return true if first command &quot;emacs&quot; exists on non-windows" time="0.000118">
        </testcase>
        <testcase classname="src/utils/editor.test.ts" name="editor utils &gt; checkHasEditorType &gt; emacs &gt; should return false if none of the commands exist on non-windows" time="0.0000947">
        </testcase>
        <testcase classname="src/utils/editor.test.ts" name="editor utils &gt; checkHasEditorType &gt; emacs &gt; should return true if first command &quot;emacs.exe&quot; exists on windows" time="0.0001156">
        </testcase>
        <testcase classname="src/utils/editor.test.ts" name="editor utils &gt; checkHasEditorType &gt; emacs &gt; should return false if none of the commands exist on windows" time="0.0000942">
        </testcase>
        <testcase classname="src/utils/editor.test.ts" name="editor utils &gt; getDiffCommand &gt; should use first command &quot;code&quot; when it exists on non-windows" time="0.0002845">
        </testcase>
        <testcase classname="src/utils/editor.test.ts" name="editor utils &gt; getDiffCommand &gt; should fall back to last command &quot;code&quot; when none exist on non-windows" time="0.0001314">
        </testcase>
        <testcase classname="src/utils/editor.test.ts" name="editor utils &gt; getDiffCommand &gt; should use first command &quot;code.cmd&quot; when it exists on windows" time="0.0001179">
        </testcase>
        <testcase classname="src/utils/editor.test.ts" name="editor utils &gt; getDiffCommand &gt; should fall back to last command &quot;code.cmd&quot; when none exist on windows" time="0.0001101">
        </testcase>
        <testcase classname="src/utils/editor.test.ts" name="editor utils &gt; getDiffCommand &gt; should use first command &quot;codium&quot; when it exists on non-windows" time="0.0000872">
        </testcase>
        <testcase classname="src/utils/editor.test.ts" name="editor utils &gt; getDiffCommand &gt; should fall back to last command &quot;codium&quot; when none exist on non-windows" time="0.0000972">
        </testcase>
        <testcase classname="src/utils/editor.test.ts" name="editor utils &gt; getDiffCommand &gt; should use first command &quot;codium.cmd&quot; when it exists on windows" time="0.0000845">
        </testcase>
        <testcase classname="src/utils/editor.test.ts" name="editor utils &gt; getDiffCommand &gt; should fall back to last command &quot;codium.cmd&quot; when none exist on windows" time="0.0000804">
        </testcase>
        <testcase classname="src/utils/editor.test.ts" name="editor utils &gt; getDiffCommand &gt; should use first command &quot;windsurf&quot; when it exists on non-windows" time="0.0001486">
        </testcase>
        <testcase classname="src/utils/editor.test.ts" name="editor utils &gt; getDiffCommand &gt; should fall back to last command &quot;windsurf&quot; when none exist on non-windows" time="0.0000788">
        </testcase>
        <testcase classname="src/utils/editor.test.ts" name="editor utils &gt; getDiffCommand &gt; should use first command &quot;windsurf&quot; when it exists on windows" time="0.0000813">
        </testcase>
        <testcase classname="src/utils/editor.test.ts" name="editor utils &gt; getDiffCommand &gt; should fall back to last command &quot;windsurf&quot; when none exist on windows" time="0.0000778">
        </testcase>
        <testcase classname="src/utils/editor.test.ts" name="editor utils &gt; getDiffCommand &gt; should use first command &quot;cursor&quot; when it exists on non-windows" time="0.000081">
        </testcase>
        <testcase classname="src/utils/editor.test.ts" name="editor utils &gt; getDiffCommand &gt; should fall back to last command &quot;cursor&quot; when none exist on non-windows" time="0.0000784">
        </testcase>
        <testcase classname="src/utils/editor.test.ts" name="editor utils &gt; getDiffCommand &gt; should use first command &quot;cursor&quot; when it exists on windows" time="0.0000809">
        </testcase>
        <testcase classname="src/utils/editor.test.ts" name="editor utils &gt; getDiffCommand &gt; should fall back to last command &quot;cursor&quot; when none exist on windows" time="0.000078">
        </testcase>
        <testcase classname="src/utils/editor.test.ts" name="editor utils &gt; getDiffCommand &gt; should use first command &quot;zed&quot; when it exists on non-windows" time="0.0000952">
        </testcase>
        <testcase classname="src/utils/editor.test.ts" name="editor utils &gt; getDiffCommand &gt; should use second command &quot;zeditor&quot; when first doesn&apos;t exist on non-windows" time="0.0001363">
        </testcase>
        <testcase classname="src/utils/editor.test.ts" name="editor utils &gt; getDiffCommand &gt; should fall back to last command &quot;zeditor&quot; when none exist on non-windows" time="0.0000955">
        </testcase>
        <testcase classname="src/utils/editor.test.ts" name="editor utils &gt; getDiffCommand &gt; should use first command &quot;zed&quot; when it exists on windows" time="0.0000832">
        </testcase>
        <testcase classname="src/utils/editor.test.ts" name="editor utils &gt; getDiffCommand &gt; should fall back to last command &quot;zed&quot; when none exist on windows" time="0.0000822">
        </testcase>
        <testcase classname="src/utils/editor.test.ts" name="editor utils &gt; getDiffCommand &gt; should return the correct command for vim" time="0.0001246">
        </testcase>
        <testcase classname="src/utils/editor.test.ts" name="editor utils &gt; getDiffCommand &gt; should return the correct command for neovim" time="0.0000931">
        </testcase>
        <testcase classname="src/utils/editor.test.ts" name="editor utils &gt; getDiffCommand &gt; should return the correct command for emacs" time="0.000098">
        </testcase>
        <testcase classname="src/utils/editor.test.ts" name="editor utils &gt; getDiffCommand &gt; should return null for an unsupported editor" time="0.0000958">
        </testcase>
        <testcase classname="src/utils/editor.test.ts" name="editor utils &gt; openDiff &gt; should call spawn for vscode" time="0.0019495">
        </testcase>
        <testcase classname="src/utils/editor.test.ts" name="editor utils &gt; openDiff &gt; should reject if spawn for vscode fails" time="0.0014639">
        </testcase>
        <testcase classname="src/utils/editor.test.ts" name="editor utils &gt; openDiff &gt; should reject if vscode exits with non-zero code" time="0.0002611">
        </testcase>
        <testcase classname="src/utils/editor.test.ts" name="editor utils &gt; openDiff &gt; should call spawn for vscodium" time="0.0002704">
        </testcase>
        <testcase classname="src/utils/editor.test.ts" name="editor utils &gt; openDiff &gt; should reject if spawn for vscodium fails" time="0.0001835">
        </testcase>
        <testcase classname="src/utils/editor.test.ts" name="editor utils &gt; openDiff &gt; should reject if vscodium exits with non-zero code" time="0.0001685">
        </testcase>
        <testcase classname="src/utils/editor.test.ts" name="editor utils &gt; openDiff &gt; should call spawn for windsurf" time="0.0002305">
        </testcase>
        <testcase classname="src/utils/editor.test.ts" name="editor utils &gt; openDiff &gt; should reject if spawn for windsurf fails" time="0.0002966">
        </testcase>
        <testcase classname="src/utils/editor.test.ts" name="editor utils &gt; openDiff &gt; should reject if windsurf exits with non-zero code" time="0.0001584">
        </testcase>
        <testcase classname="src/utils/editor.test.ts" name="editor utils &gt; openDiff &gt; should call spawn for cursor" time="0.0002302">
        </testcase>
        <testcase classname="src/utils/editor.test.ts" name="editor utils &gt; openDiff &gt; should reject if spawn for cursor fails" time="0.0001603">
        </testcase>
        <testcase classname="src/utils/editor.test.ts" name="editor utils &gt; openDiff &gt; should reject if cursor exits with non-zero code" time="0.0001564">
        </testcase>
        <testcase classname="src/utils/editor.test.ts" name="editor utils &gt; openDiff &gt; should call spawn for zed" time="0.0002271">
        </testcase>
        <testcase classname="src/utils/editor.test.ts" name="editor utils &gt; openDiff &gt; should reject if spawn for zed fails" time="0.0001708">
        </testcase>
        <testcase classname="src/utils/editor.test.ts" name="editor utils &gt; openDiff &gt; should reject if zed exits with non-zero code" time="0.0002102">
        </testcase>
        <testcase classname="src/utils/editor.test.ts" name="editor utils &gt; openDiff &gt; should call spawnSync for vim" time="0.0005139">
        </testcase>
        <testcase classname="src/utils/editor.test.ts" name="editor utils &gt; openDiff &gt; should call spawnSync for neovim" time="0.0001698">
        </testcase>
        <testcase classname="src/utils/editor.test.ts" name="editor utils &gt; openDiff &gt; should call spawnSync for emacs" time="0.0001825">
        </testcase>
        <testcase classname="src/utils/editor.test.ts" name="editor utils &gt; openDiff &gt; should log an error if diff command is not available" time="0.0003161">
        </testcase>
        <testcase classname="src/utils/editor.test.ts" name="editor utils &gt; openDiff &gt; onEditorClose callback &gt; should call onEditorClose for vim on close" time="0.0002415">
        </testcase>
        <testcase classname="src/utils/editor.test.ts" name="editor utils &gt; openDiff &gt; onEditorClose callback &gt; should call onEditorClose for vim on error" time="0.0096394">
            <system-err>
Error: spawn error
    at [90mE:\claude-code\pipedream\modelcontextprotocol\agentrpc\gemini-cli\packages\core\[39msrc\utils\editor.test.ts:414:29
    at file:///E:/claude-code/pipedream/modelcontextprotocol/agentrpc/gemini-cli/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:155:11
    at file:///E:/claude-code/pipedream/modelcontextprotocol/agentrpc/gemini-cli/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:752:26
    at file:///E:/claude-code/pipedream/modelcontextprotocol/agentrpc/gemini-cli/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:1897:20
    at new Promise (&lt;anonymous&gt;)
    at runWithTimeout (file:///E:/claude-code/pipedream/modelcontextprotocol/agentrpc/gemini-cli/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:1863:10)
    at runTest (file:///E:/claude-code/pipedream/modelcontextprotocol/agentrpc/gemini-cli/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:1574:12)
[90m    at processTicksAndRejections (node:internal/process/task_queues:105:5)[39m
    at runSuite (file:///E:/claude-code/pipedream/modelcontextprotocol/agentrpc/gemini-cli/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:1729:8)
    at runSuite (file:///E:/claude-code/pipedream/modelcontextprotocol/agentrpc/gemini-cli/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:1729:8)

            </system-err>
        </testcase>
        <testcase classname="src/utils/editor.test.ts" name="editor utils &gt; openDiff &gt; onEditorClose callback &gt; should call onEditorClose for neovim on close" time="0.0001896">
        </testcase>
        <testcase classname="src/utils/editor.test.ts" name="editor utils &gt; openDiff &gt; onEditorClose callback &gt; should call onEditorClose for neovim on error" time="0.0006721">
            <system-err>
Error: spawn error
    at [90mE:\claude-code\pipedream\modelcontextprotocol\agentrpc\gemini-cli\packages\core\[39msrc\utils\editor.test.ts:414:29
    at file:///E:/claude-code/pipedream/modelcontextprotocol/agentrpc/gemini-cli/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:155:11
    at file:///E:/claude-code/pipedream/modelcontextprotocol/agentrpc/gemini-cli/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:752:26
    at file:///E:/claude-code/pipedream/modelcontextprotocol/agentrpc/gemini-cli/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:1897:20
    at new Promise (&lt;anonymous&gt;)
    at runWithTimeout (file:///E:/claude-code/pipedream/modelcontextprotocol/agentrpc/gemini-cli/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:1863:10)
    at runTest (file:///E:/claude-code/pipedream/modelcontextprotocol/agentrpc/gemini-cli/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:1574:12)
[90m    at processTicksAndRejections (node:internal/process/task_queues:105:5)[39m
    at runSuite (file:///E:/claude-code/pipedream/modelcontextprotocol/agentrpc/gemini-cli/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:1729:8)
    at runSuite (file:///E:/claude-code/pipedream/modelcontextprotocol/agentrpc/gemini-cli/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:1729:8)

            </system-err>
        </testcase>
        <testcase classname="src/utils/editor.test.ts" name="editor utils &gt; openDiff &gt; onEditorClose callback &gt; should call onEditorClose for emacs on close" time="0.0001588">
        </testcase>
        <testcase classname="src/utils/editor.test.ts" name="editor utils &gt; openDiff &gt; onEditorClose callback &gt; should call onEditorClose for emacs on error" time="0.0005295">
            <system-err>
Error: spawn error
    at [90mE:\claude-code\pipedream\modelcontextprotocol\agentrpc\gemini-cli\packages\core\[39msrc\utils\editor.test.ts:414:29
    at file:///E:/claude-code/pipedream/modelcontextprotocol/agentrpc/gemini-cli/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:155:11
    at file:///E:/claude-code/pipedream/modelcontextprotocol/agentrpc/gemini-cli/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:752:26
    at file:///E:/claude-code/pipedream/modelcontextprotocol/agentrpc/gemini-cli/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:1897:20
    at new Promise (&lt;anonymous&gt;)
    at runWithTimeout (file:///E:/claude-code/pipedream/modelcontextprotocol/agentrpc/gemini-cli/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:1863:10)
    at runTest (file:///E:/claude-code/pipedream/modelcontextprotocol/agentrpc/gemini-cli/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:1574:12)
[90m    at processTicksAndRejections (node:internal/process/task_queues:105:5)[39m
    at runSuite (file:///E:/claude-code/pipedream/modelcontextprotocol/agentrpc/gemini-cli/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:1729:8)
    at runSuite (file:///E:/claude-code/pipedream/modelcontextprotocol/agentrpc/gemini-cli/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:1729:8)

            </system-err>
        </testcase>
        <testcase classname="src/utils/editor.test.ts" name="editor utils &gt; openDiff &gt; onEditorClose callback &gt; should not call onEditorClose for vscode" time="0.0003305">
        </testcase>
        <testcase classname="src/utils/editor.test.ts" name="editor utils &gt; openDiff &gt; onEditorClose callback &gt; should not call onEditorClose for vscodium" time="0.0001743">
        </testcase>
        <testcase classname="src/utils/editor.test.ts" name="editor utils &gt; openDiff &gt; onEditorClose callback &gt; should not call onEditorClose for windsurf" time="0.000174">
        </testcase>
        <testcase classname="src/utils/editor.test.ts" name="editor utils &gt; openDiff &gt; onEditorClose callback &gt; should not call onEditorClose for cursor" time="0.0002286">
        </testcase>
        <testcase classname="src/utils/editor.test.ts" name="editor utils &gt; openDiff &gt; onEditorClose callback &gt; should not call onEditorClose for zed" time="0.0001787">
        </testcase>
        <testcase classname="src/utils/editor.test.ts" name="editor utils &gt; allowEditorTypeInSandbox &gt; should allow vim in sandbox mode" time="0.0002948">
        </testcase>
        <testcase classname="src/utils/editor.test.ts" name="editor utils &gt; allowEditorTypeInSandbox &gt; should allow vim when not in sandbox mode" time="0.0001518">
        </testcase>
        <testcase classname="src/utils/editor.test.ts" name="editor utils &gt; allowEditorTypeInSandbox &gt; should allow emacs in sandbox mode" time="0.000172">
        </testcase>
        <testcase classname="src/utils/editor.test.ts" name="editor utils &gt; allowEditorTypeInSandbox &gt; should allow emacs when not in sandbox mode" time="0.0001622">
        </testcase>
        <testcase classname="src/utils/editor.test.ts" name="editor utils &gt; allowEditorTypeInSandbox &gt; should allow neovim in sandbox mode" time="0.000179">
        </testcase>
        <testcase classname="src/utils/editor.test.ts" name="editor utils &gt; allowEditorTypeInSandbox &gt; should allow neovim when not in sandbox mode" time="0.0001454">
        </testcase>
        <testcase classname="src/utils/editor.test.ts" name="editor utils &gt; allowEditorTypeInSandbox &gt; should not allow vscode in sandbox mode" time="0.0001539">
        </testcase>
        <testcase classname="src/utils/editor.test.ts" name="editor utils &gt; allowEditorTypeInSandbox &gt; should allow vscode when not in sandbox mode" time="0.0001458">
        </testcase>
        <testcase classname="src/utils/editor.test.ts" name="editor utils &gt; allowEditorTypeInSandbox &gt; should not allow vscodium in sandbox mode" time="0.0001505">
        </testcase>
        <testcase classname="src/utils/editor.test.ts" name="editor utils &gt; allowEditorTypeInSandbox &gt; should allow vscodium when not in sandbox mode" time="0.0001674">
        </testcase>
        <testcase classname="src/utils/editor.test.ts" name="editor utils &gt; allowEditorTypeInSandbox &gt; should not allow windsurf in sandbox mode" time="0.0001802">
        </testcase>
        <testcase classname="src/utils/editor.test.ts" name="editor utils &gt; allowEditorTypeInSandbox &gt; should allow windsurf when not in sandbox mode" time="0.0001208">
        </testcase>
        <testcase classname="src/utils/editor.test.ts" name="editor utils &gt; allowEditorTypeInSandbox &gt; should not allow cursor in sandbox mode" time="0.0001427">
        </testcase>
        <testcase classname="src/utils/editor.test.ts" name="editor utils &gt; allowEditorTypeInSandbox &gt; should allow cursor when not in sandbox mode" time="0.0001165">
        </testcase>
        <testcase classname="src/utils/editor.test.ts" name="editor utils &gt; allowEditorTypeInSandbox &gt; should not allow zed in sandbox mode" time="0.0001357">
        </testcase>
        <testcase classname="src/utils/editor.test.ts" name="editor utils &gt; allowEditorTypeInSandbox &gt; should allow zed when not in sandbox mode" time="0.0001135">
        </testcase>
        <testcase classname="src/utils/editor.test.ts" name="editor utils &gt; isEditorAvailable &gt; should return false for undefined editor" time="0.0001521">
        </testcase>
        <testcase classname="src/utils/editor.test.ts" name="editor utils &gt; isEditorAvailable &gt; should return false for empty string editor" time="0.0001174">
        </testcase>
        <testcase classname="src/utils/editor.test.ts" name="editor utils &gt; isEditorAvailable &gt; should return false for invalid editor type" time="0.0001119">
        </testcase>
        <testcase classname="src/utils/editor.test.ts" name="editor utils &gt; isEditorAvailable &gt; should return true for vscode when installed and not in sandbox mode" time="0.0001414">
        </testcase>
        <testcase classname="src/utils/editor.test.ts" name="editor utils &gt; isEditorAvailable &gt; should return false for vscode when not installed and not in sandbox mode" time="0.0001556">
        </testcase>
        <testcase classname="src/utils/editor.test.ts" name="editor utils &gt; isEditorAvailable &gt; should return false for vscode when installed and in sandbox mode" time="0.0001765">
        </testcase>
        <testcase classname="src/utils/editor.test.ts" name="editor utils &gt; isEditorAvailable &gt; should return true for vim when installed and in sandbox mode" time="0.0001977">
        </testcase>
        <testcase classname="src/utils/editor.test.ts" name="editor utils &gt; isEditorAvailable &gt; should return true for emacs when installed and in sandbox mode" time="0.0001893">
        </testcase>
        <testcase classname="src/utils/editor.test.ts" name="editor utils &gt; isEditorAvailable &gt; should return true for neovim when installed and in sandbox mode" time="0.0001669">
        </testcase>
    </testsuite>
    <testsuite name="src/utils/environmentContext.test.ts" timestamp="2025-09-23T13:26:52.204Z" hostname="WIN-33AANMPCPKN" tests="8" failures="0" errors="0" skipped="0" time="0.0400795">
        <testcase classname="src/utils/environmentContext.test.ts" name="getDirectoryContextString &gt; should return context string for a single directory" time="0.0020595">
        </testcase>
        <testcase classname="src/utils/environmentContext.test.ts" name="getDirectoryContextString &gt; should return context string for multiple directories" time="0.0003071">
        </testcase>
        <testcase classname="src/utils/environmentContext.test.ts" name="getEnvironmentContext &gt; should return basic environment context for a single directory" time="0.0236814">
        </testcase>
        <testcase classname="src/utils/environmentContext.test.ts" name="getEnvironmentContext &gt; should return basic environment context for multiple directories" time="0.0007565">
        </testcase>
        <testcase classname="src/utils/environmentContext.test.ts" name="getEnvironmentContext &gt; should include full file context when getFullContext is true" time="0.0009096">
        </testcase>
        <testcase classname="src/utils/environmentContext.test.ts" name="getEnvironmentContext &gt; should handle read_many_files returning no content" time="0.0019979">
            <system-err>
Full context requested, but read_many_files returned no content.

            </system-err>
        </testcase>
        <testcase classname="src/utils/environmentContext.test.ts" name="getEnvironmentContext &gt; should handle read_many_files tool not being found" time="0.0008604">
            <system-err>
Full context requested, but read_many_files tool not found.

            </system-err>
        </testcase>
        <testcase classname="src/utils/environmentContext.test.ts" name="getEnvironmentContext &gt; should handle errors when reading full file context" time="0.0081734">
            <system-err>
Error reading full file context: Error: Read error
    at [90mE:\claude-code\pipedream\modelcontextprotocol\agentrpc\gemini-cli\packages\core\[39msrc\utils\environmentContext.test.ts:196:44
    at file:///E:/claude-code/pipedream/modelcontextprotocol/agentrpc/gemini-cli/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:155:11
    at file:///E:/claude-code/pipedream/modelcontextprotocol/agentrpc/gemini-cli/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:752:26
    at file:///E:/claude-code/pipedream/modelcontextprotocol/agentrpc/gemini-cli/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:1897:20
    at new Promise (&lt;anonymous&gt;)
    at runWithTimeout (file:///E:/claude-code/pipedream/modelcontextprotocol/agentrpc/gemini-cli/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:1863:10)
    at runTest (file:///E:/claude-code/pipedream/modelcontextprotocol/agentrpc/gemini-cli/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:1574:12)
[90m    at processTicksAndRejections (node:internal/process/task_queues:105:5)[39m
    at runSuite (file:///E:/claude-code/pipedream/modelcontextprotocol/agentrpc/gemini-cli/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:1729:8)
    at runSuite (file:///E:/claude-code/pipedream/modelcontextprotocol/agentrpc/gemini-cli/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:1729:8)

            </system-err>
        </testcase>
    </testsuite>
    <testsuite name="src/utils/errorParsing.test.ts" timestamp="2025-09-23T13:26:52.205Z" hostname="WIN-33AANMPCPKN" tests="21" failures="0" errors="0" skipped="0" time="0.0052989">
        <testcase classname="src/utils/errorParsing.test.ts" name="parseAndFormatApiError &gt; should format a valid API error JSON" time="0.0013451">
        </testcase>
        <testcase classname="src/utils/errorParsing.test.ts" name="parseAndFormatApiError &gt; should format a 429 API error with the default message" time="0.0003197">
        </testcase>
        <testcase classname="src/utils/errorParsing.test.ts" name="parseAndFormatApiError &gt; should format a 429 API error with the personal message" time="0.0002249">
        </testcase>
        <testcase classname="src/utils/errorParsing.test.ts" name="parseAndFormatApiError &gt; should format a 429 API error with the vertex message" time="0.0001036">
        </testcase>
        <testcase classname="src/utils/errorParsing.test.ts" name="parseAndFormatApiError &gt; should return the original message if it is not a JSON error" time="0.0000677">
        </testcase>
        <testcase classname="src/utils/errorParsing.test.ts" name="parseAndFormatApiError &gt; should return the original message for malformed JSON" time="0.0000732">
        </testcase>
        <testcase classname="src/utils/errorParsing.test.ts" name="parseAndFormatApiError &gt; should handle JSON that does not match the ApiError structure" time="0.0000723">
        </testcase>
        <testcase classname="src/utils/errorParsing.test.ts" name="parseAndFormatApiError &gt; should format a nested API error" time="0.0001114">
        </testcase>
        <testcase classname="src/utils/errorParsing.test.ts" name="parseAndFormatApiError &gt; should format a StructuredError" time="0.00008">
        </testcase>
        <testcase classname="src/utils/errorParsing.test.ts" name="parseAndFormatApiError &gt; should format a 429 StructuredError with the vertex message" time="0.0000826">
        </testcase>
        <testcase classname="src/utils/errorParsing.test.ts" name="parseAndFormatApiError &gt; should handle an unknown error type" time="0.0000579">
        </testcase>
        <testcase classname="src/utils/errorParsing.test.ts" name="parseAndFormatApiError &gt; should format a 429 API error with Pro quota exceeded message for Google auth (Free tier)" time="0.0001334">
        </testcase>
        <testcase classname="src/utils/errorParsing.test.ts" name="parseAndFormatApiError &gt; should format a regular 429 API error with standard message for Google auth" time="0.0001595">
        </testcase>
        <testcase classname="src/utils/errorParsing.test.ts" name="parseAndFormatApiError &gt; should format a 429 API error with generic quota exceeded message for Google auth" time="0.0002847">
        </testcase>
        <testcase classname="src/utils/errorParsing.test.ts" name="parseAndFormatApiError &gt; should prioritize Pro quota message over generic quota message for Google auth" time="0.0001193">
        </testcase>
        <testcase classname="src/utils/errorParsing.test.ts" name="parseAndFormatApiError &gt; should format a 429 API error with Pro quota exceeded message for Google auth (Standard tier)" time="0.0001508">
        </testcase>
        <testcase classname="src/utils/errorParsing.test.ts" name="parseAndFormatApiError &gt; should format a 429 API error with Pro quota exceeded message for Google auth (Legacy tier)" time="0.000131">
        </testcase>
        <testcase classname="src/utils/errorParsing.test.ts" name="parseAndFormatApiError &gt; should handle different Gemini 2.5 version strings in Pro quota exceeded errors" time="0.0001431">
        </testcase>
        <testcase classname="src/utils/errorParsing.test.ts" name="parseAndFormatApiError &gt; should not match non-Pro models with similar version strings" time="0.0001535">
        </testcase>
        <testcase classname="src/utils/errorParsing.test.ts" name="parseAndFormatApiError &gt; should format a generic quota exceeded message for Google auth (Standard tier)" time="0.0001447">
        </testcase>
        <testcase classname="src/utils/errorParsing.test.ts" name="parseAndFormatApiError &gt; should format a regular 429 API error with standard message for Google auth (Standard tier)" time="0.0001222">
        </testcase>
    </testsuite>
    <testsuite name="src/utils/errorReporting.test.ts" timestamp="2025-09-23T13:26:52.207Z" hostname="WIN-33AANMPCPKN" tests="6" failures="0" errors="0" skipped="0" time="0.0349262">
        <testcase classname="src/utils/errorReporting.test.ts" name="reportError &gt; should generate a report and log the path" time="0.009932">
        </testcase>
        <testcase classname="src/utils/errorReporting.test.ts" name="reportError &gt; should handle errors that are plain objects with a message property" time="0.0049713">
        </testcase>
        <testcase classname="src/utils/errorReporting.test.ts" name="reportError &gt; should handle string errors" time="0.0037677">
        </testcase>
        <testcase classname="src/utils/errorReporting.test.ts" name="reportError &gt; should log fallback message if writing report fails" time="0.0068339">
        </testcase>
        <testcase classname="src/utils/errorReporting.test.ts" name="reportError &gt; should handle stringification failure of report content (e.g. BigInt in context)" time="0.0052798">
        </testcase>
        <testcase classname="src/utils/errorReporting.test.ts" name="reportError &gt; should generate a report without context if context is not provided" time="0.0028688">
        </testcase>
    </testsuite>
    <testsuite name="src/utils/fileUtils.test.ts" timestamp="2025-09-23T13:26:52.208Z" hostname="WIN-33AANMPCPKN" tests="65" failures="0" errors="0" skipped="0" time="0.255973">
        <testcase classname="src/utils/fileUtils.test.ts" name="fileUtils &gt; isWithinRoot &gt; should return true for paths directly within the root" time="0.0237457">
        </testcase>
        <testcase classname="src/utils/fileUtils.test.ts" name="fileUtils &gt; isWithinRoot &gt; should return true for the root path itself" time="0.0015038">
        </testcase>
        <testcase classname="src/utils/fileUtils.test.ts" name="fileUtils &gt; isWithinRoot &gt; should return false for paths outside the root" time="0.0017454">
        </testcase>
        <testcase classname="src/utils/fileUtils.test.ts" name="fileUtils &gt; isWithinRoot &gt; should return false for paths that only partially match the root prefix" time="0.0011536">
        </testcase>
        <testcase classname="src/utils/fileUtils.test.ts" name="fileUtils &gt; isWithinRoot &gt; should handle paths with trailing slashes correctly" time="0.001405">
        </testcase>
        <testcase classname="src/utils/fileUtils.test.ts" name="fileUtils &gt; isWithinRoot &gt; should handle different path separators (POSIX vs Windows)" time="0.0014148">
        </testcase>
        <testcase classname="src/utils/fileUtils.test.ts" name="fileUtils &gt; isWithinRoot &gt; should return false for a root path that is a sub-path of the path to check" time="0.0014556">
        </testcase>
        <testcase classname="src/utils/fileUtils.test.ts" name="fileUtils &gt; fileExists &gt; should return true if the file exists" time="0.003558">
        </testcase>
        <testcase classname="src/utils/fileUtils.test.ts" name="fileUtils &gt; fileExists &gt; should return false if the file does not exist" time="0.0030869">
        </testcase>
        <testcase classname="src/utils/fileUtils.test.ts" name="fileUtils &gt; fileExists &gt; should return true for a directory that exists" time="0.0063357">
        </testcase>
        <testcase classname="src/utils/fileUtils.test.ts" name="fileUtils &gt; isBinaryFile &gt; should return false for an empty file" time="0.0025085">
        </testcase>
        <testcase classname="src/utils/fileUtils.test.ts" name="fileUtils &gt; isBinaryFile &gt; should return false for a typical text file" time="0.0047111">
        </testcase>
        <testcase classname="src/utils/fileUtils.test.ts" name="fileUtils &gt; isBinaryFile &gt; should return true for a file with many null bytes" time="0.0025551">
        </testcase>
        <testcase classname="src/utils/fileUtils.test.ts" name="fileUtils &gt; isBinaryFile &gt; should return true for a file with high percentage of non-printable ASCII" time="0.0023885">
        </testcase>
        <testcase classname="src/utils/fileUtils.test.ts" name="fileUtils &gt; isBinaryFile &gt; should return false if file access fails (e.g., ENOENT)" time="0.0031112">
            <system-err>
Failed to check if file is binary: C:\Users\alroh\AppData\Local\Temp\fileUtils-test-VbuxAO\binaryCheck.tmp ENOENT: no such file or directory, open &apos;C:\Users\alroh\AppData\Local\Temp\fileUtils-test-VbuxAO\binaryCheck.tmp&apos;

            </system-err>
        </testcase>
        <testcase classname="src/utils/fileUtils.test.ts" name="fileUtils &gt; BOM detection and encoding &gt; detectBOM &gt; should detect UTF-8 BOM" time="0.0041735">
        </testcase>
        <testcase classname="src/utils/fileUtils.test.ts" name="fileUtils &gt; BOM detection and encoding &gt; detectBOM &gt; should detect UTF-16 LE BOM" time="0.0019678">
        </testcase>
        <testcase classname="src/utils/fileUtils.test.ts" name="fileUtils &gt; BOM detection and encoding &gt; detectBOM &gt; should detect UTF-16 BE BOM" time="0.0033419">
        </testcase>
        <testcase classname="src/utils/fileUtils.test.ts" name="fileUtils &gt; BOM detection and encoding &gt; detectBOM &gt; should detect UTF-32 LE BOM" time="0.0019685">
        </testcase>
        <testcase classname="src/utils/fileUtils.test.ts" name="fileUtils &gt; BOM detection and encoding &gt; detectBOM &gt; should detect UTF-32 BE BOM" time="0.0025022">
        </testcase>
        <testcase classname="src/utils/fileUtils.test.ts" name="fileUtils &gt; BOM detection and encoding &gt; detectBOM &gt; should return null for no BOM" time="0.00652">
        </testcase>
        <testcase classname="src/utils/fileUtils.test.ts" name="fileUtils &gt; BOM detection and encoding &gt; detectBOM &gt; should return null for empty buffer" time="0.0028791">
        </testcase>
        <testcase classname="src/utils/fileUtils.test.ts" name="fileUtils &gt; BOM detection and encoding &gt; detectBOM &gt; should return null for partial BOM" time="0.0060353">
        </testcase>
        <testcase classname="src/utils/fileUtils.test.ts" name="fileUtils &gt; BOM detection and encoding &gt; readFileWithEncoding &gt; should read UTF-8 BOM file correctly" time="0.0058534">
        </testcase>
        <testcase classname="src/utils/fileUtils.test.ts" name="fileUtils &gt; BOM detection and encoding &gt; readFileWithEncoding &gt; should read UTF-16 LE BOM file correctly" time="0.0153174">
        </testcase>
        <testcase classname="src/utils/fileUtils.test.ts" name="fileUtils &gt; BOM detection and encoding &gt; readFileWithEncoding &gt; should read UTF-16 BE BOM file correctly" time="0.0044441">
        </testcase>
        <testcase classname="src/utils/fileUtils.test.ts" name="fileUtils &gt; BOM detection and encoding &gt; readFileWithEncoding &gt; should read UTF-32 LE BOM file correctly" time="0.0058845">
        </testcase>
        <testcase classname="src/utils/fileUtils.test.ts" name="fileUtils &gt; BOM detection and encoding &gt; readFileWithEncoding &gt; should read UTF-32 BE BOM file correctly" time="0.00518">
        </testcase>
        <testcase classname="src/utils/fileUtils.test.ts" name="fileUtils &gt; BOM detection and encoding &gt; readFileWithEncoding &gt; should read file without BOM as UTF-8" time="0.0051814">
        </testcase>
        <testcase classname="src/utils/fileUtils.test.ts" name="fileUtils &gt; BOM detection and encoding &gt; readFileWithEncoding &gt; should handle empty file" time="0.0050608">
        </testcase>
        <testcase classname="src/utils/fileUtils.test.ts" name="fileUtils &gt; BOM detection and encoding &gt; isBinaryFile with BOM awareness &gt; should not treat UTF-8 BOM file as binary" time="0.0031724">
        </testcase>
        <testcase classname="src/utils/fileUtils.test.ts" name="fileUtils &gt; BOM detection and encoding &gt; isBinaryFile with BOM awareness &gt; should not treat UTF-16 LE BOM file as binary" time="0.0046659">
        </testcase>
        <testcase classname="src/utils/fileUtils.test.ts" name="fileUtils &gt; BOM detection and encoding &gt; isBinaryFile with BOM awareness &gt; should not treat UTF-16 BE BOM file as binary" time="0.0042747">
        </testcase>
        <testcase classname="src/utils/fileUtils.test.ts" name="fileUtils &gt; BOM detection and encoding &gt; isBinaryFile with BOM awareness &gt; should not treat UTF-32 LE BOM file as binary" time="0.0037575">
        </testcase>
        <testcase classname="src/utils/fileUtils.test.ts" name="fileUtils &gt; BOM detection and encoding &gt; isBinaryFile with BOM awareness &gt; should not treat UTF-32 BE BOM file as binary" time="0.0033963">
        </testcase>
        <testcase classname="src/utils/fileUtils.test.ts" name="fileUtils &gt; BOM detection and encoding &gt; isBinaryFile with BOM awareness &gt; should still treat actual binary file as binary" time="0.0042624">
        </testcase>
        <testcase classname="src/utils/fileUtils.test.ts" name="fileUtils &gt; BOM detection and encoding &gt; isBinaryFile with BOM awareness &gt; should treat file with null bytes (no BOM) as binary" time="0.006764">
        </testcase>
        <testcase classname="src/utils/fileUtils.test.ts" name="fileUtils &gt; detectFileType &gt; should detect typescript type by extension (ts, mts, cts, tsx)" time="0.002928">
            <system-err>
Failed to check if file is binary: component.tsx ENOENT: no such file or directory, open &apos;E:\claude-code\pipedream\modelcontextprotocol\agentrpc\gemini-cli\packages\core\component.tsx&apos;

            </system-err>
        </testcase>
        <testcase classname="src/utils/fileUtils.test.ts" name="fileUtils &gt; detectFileType &gt; should detect image type by extension (png)" time="0.0018044">
        </testcase>
        <testcase classname="src/utils/fileUtils.test.ts" name="fileUtils &gt; detectFileType &gt; should detect image type by extension (jpeg)" time="0.0021752">
        </testcase>
        <testcase classname="src/utils/fileUtils.test.ts" name="fileUtils &gt; detectFileType &gt; should detect svg type by extension" time="0.0042629">
        </testcase>
        <testcase classname="src/utils/fileUtils.test.ts" name="fileUtils &gt; detectFileType &gt; should detect pdf type by extension" time="0.0023292">
        </testcase>
        <testcase classname="src/utils/fileUtils.test.ts" name="fileUtils &gt; detectFileType &gt; should detect audio type by extension" time="0.0017328">
        </testcase>
        <testcase classname="src/utils/fileUtils.test.ts" name="fileUtils &gt; detectFileType &gt; should detect video type by extension" time="0.0021271">
        </testcase>
        <testcase classname="src/utils/fileUtils.test.ts" name="fileUtils &gt; detectFileType &gt; should detect known binary extensions as binary (e.g. .zip)" time="0.0028852">
        </testcase>
        <testcase classname="src/utils/fileUtils.test.ts" name="fileUtils &gt; detectFileType &gt; should detect known binary extensions as binary (e.g. .exe)" time="0.0027333">
        </testcase>
        <testcase classname="src/utils/fileUtils.test.ts" name="fileUtils &gt; detectFileType &gt; should use isBinaryFile for unknown extensions and detect as binary" time="0.0049372">
        </testcase>
        <testcase classname="src/utils/fileUtils.test.ts" name="fileUtils &gt; detectFileType &gt; should default to text if mime type is unknown and content is not binary" time="0.0024343">
        </testcase>
        <testcase classname="src/utils/fileUtils.test.ts" name="fileUtils &gt; processSingleFileContent &gt; should read a text file successfully" time="0.004048">
        </testcase>
        <testcase classname="src/utils/fileUtils.test.ts" name="fileUtils &gt; processSingleFileContent &gt; should handle file not found" time="0.0031093">
        </testcase>
        <testcase classname="src/utils/fileUtils.test.ts" name="fileUtils &gt; processSingleFileContent &gt; should handle read errors for text files" time="0.0059279">
        </testcase>
        <testcase classname="src/utils/fileUtils.test.ts" name="fileUtils &gt; processSingleFileContent &gt; should handle read errors for image/pdf files" time="0.0021854">
        </testcase>
        <testcase classname="src/utils/fileUtils.test.ts" name="fileUtils &gt; processSingleFileContent &gt; should process an image file" time="0.0029508">
        </testcase>
        <testcase classname="src/utils/fileUtils.test.ts" name="fileUtils &gt; processSingleFileContent &gt; should process a PDF file" time="0.0058424">
        </testcase>
        <testcase classname="src/utils/fileUtils.test.ts" name="fileUtils &gt; processSingleFileContent &gt; should read an SVG file as text when under 1MB" time="0.0028923">
        </testcase>
        <testcase classname="src/utils/fileUtils.test.ts" name="fileUtils &gt; processSingleFileContent &gt; should skip binary files" time="0.0039292">
        </testcase>
        <testcase classname="src/utils/fileUtils.test.ts" name="fileUtils &gt; processSingleFileContent &gt; should handle path being a directory" time="0.0015631">
        </testcase>
        <testcase classname="src/utils/fileUtils.test.ts" name="fileUtils &gt; processSingleFileContent &gt; should paginate text files correctly (offset and limit)" time="0.0043677">
        </testcase>
        <testcase classname="src/utils/fileUtils.test.ts" name="fileUtils &gt; processSingleFileContent &gt; should identify truncation when reading the end of a file" time="0.0025052">
        </testcase>
        <testcase classname="src/utils/fileUtils.test.ts" name="fileUtils &gt; processSingleFileContent &gt; should handle limit exceeding file length" time="0.0021907">
        </testcase>
        <testcase classname="src/utils/fileUtils.test.ts" name="fileUtils &gt; processSingleFileContent &gt; should truncate long lines in text files" time="0.00263">
        </testcase>
        <testcase classname="src/utils/fileUtils.test.ts" name="fileUtils &gt; processSingleFileContent &gt; should truncate when line count exceeds the limit" time="0.0027461">
        </testcase>
        <testcase classname="src/utils/fileUtils.test.ts" name="fileUtils &gt; processSingleFileContent &gt; should truncate when a line length exceeds the character limit" time="0.0030259">
        </testcase>
        <testcase classname="src/utils/fileUtils.test.ts" name="fileUtils &gt; processSingleFileContent &gt; should truncate both line count and line length when both exceed limits" time="0.0038405">
        </testcase>
        <testcase classname="src/utils/fileUtils.test.ts" name="fileUtils &gt; processSingleFileContent &gt; should return an error if the file size exceeds 20MB" time="0.0021315">
        </testcase>
    </testsuite>
    <testsuite name="src/utils/flashFallback.test.ts" timestamp="2025-09-23T13:26:52.215Z" hostname="WIN-33AANMPCPKN" tests="4" failures="0" errors="0" skipped="0" time="0.167305">
        <testcase classname="src/utils/flashFallback.test.ts" name="Retry Utility Fallback Integration &gt; should execute the injected FallbackHandler contract correctly" time="0.0026086">
        </testcase>
        <testcase classname="src/utils/flashFallback.test.ts" name="Retry Utility Fallback Integration &gt; should trigger onPersistent429 after 2 consecutive 429 errors for OAuth users" time="0.0205657">
            <system-err>
Attempt 1 failed with status 429. Retrying with backoff... Error: Rate limit exceeded (simulated)
    at Module.createSimulated429Error [90m(E:\claude-code\pipedream\modelcontextprotocol\agentrpc\gemini-cli\packages\core\[39msrc\utils\testUtils.ts:59:17[90m)[39m
    at [90mE:\claude-code\pipedream\modelcontextprotocol\agentrpc\gemini-cli\packages\core\[39msrc\utils\flashFallback.test.ts:73:30
    at file:///E:/claude-code/pipedream/modelcontextprotocol/agentrpc/gemini-cli/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:155:11
    at file:///E:/claude-code/pipedream/modelcontextprotocol/agentrpc/gemini-cli/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:752:26
    at file:///E:/claude-code/pipedream/modelcontextprotocol/agentrpc/gemini-cli/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:1897:20
    at new Promise (&lt;anonymous&gt;)
    at runWithTimeout (file:///E:/claude-code/pipedream/modelcontextprotocol/agentrpc/gemini-cli/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:1863:10)
    at runTest (file:///E:/claude-code/pipedream/modelcontextprotocol/agentrpc/gemini-cli/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:1574:12)
[90m    at processTicksAndRejections (node:internal/process/task_queues:105:5)[39m
    at runSuite (file:///E:/claude-code/pipedream/modelcontextprotocol/agentrpc/gemini-cli/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:1729:8) {
  status: [33m429[39m
}

            </system-err>
        </testcase>
        <testcase classname="src/utils/flashFallback.test.ts" name="Retry Utility Fallback Integration &gt; should not trigger onPersistent429 for API key users" time="0.1424876">
            <system-err>
Attempt 1 failed with status 429. Retrying with backoff... Error: Rate limit exceeded (simulated)
    at Module.createSimulated429Error [90m(E:\claude-code\pipedream\modelcontextprotocol\agentrpc\gemini-cli\packages\core\[39msrc\utils\testUtils.ts:59:17[90m)[39m
    at [90mE:\claude-code\pipedream\modelcontextprotocol\agentrpc\gemini-cli\packages\core\[39msrc\utils\flashFallback.test.ts:112:51
    at file:///E:/claude-code/pipedream/modelcontextprotocol/agentrpc/gemini-cli/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:155:11
    at file:///E:/claude-code/pipedream/modelcontextprotocol/agentrpc/gemini-cli/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:752:26
    at file:///E:/claude-code/pipedream/modelcontextprotocol/agentrpc/gemini-cli/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:1897:20
    at new Promise (&lt;anonymous&gt;)
    at runWithTimeout (file:///E:/claude-code/pipedream/modelcontextprotocol/agentrpc/gemini-cli/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:1863:10)
    at runTest (file:///E:/claude-code/pipedream/modelcontextprotocol/agentrpc/gemini-cli/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:1574:12)
    at runSuite (file:///E:/claude-code/pipedream/modelcontextprotocol/agentrpc/gemini-cli/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:1729:8)
    at runSuite (file:///E:/claude-code/pipedream/modelcontextprotocol/agentrpc/gemini-cli/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:1729:8) {
  status: [33m429[39m
}

Attempt 2 failed with status 429. Retrying with backoff... Error: Rate limit exceeded (simulated)
    at Module.createSimulated429Error [90m(E:\claude-code\pipedream\modelcontextprotocol\agentrpc\gemini-cli\packages\core\[39msrc\utils\testUtils.ts:59:17[90m)[39m
    at [90mE:\claude-code\pipedream\modelcontextprotocol\agentrpc\gemini-cli\packages\core\[39msrc\utils\flashFallback.test.ts:112:51
    at file:///E:/claude-code/pipedream/modelcontextprotocol/agentrpc/gemini-cli/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:155:11
    at file:///E:/claude-code/pipedream/modelcontextprotocol/agentrpc/gemini-cli/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:752:26
    at file:///E:/claude-code/pipedream/modelcontextprotocol/agentrpc/gemini-cli/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:1897:20
    at new Promise (&lt;anonymous&gt;)
    at runWithTimeout (file:///E:/claude-code/pipedream/modelcontextprotocol/agentrpc/gemini-cli/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:1863:10)
    at runTest (file:///E:/claude-code/pipedream/modelcontextprotocol/agentrpc/gemini-cli/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:1574:12)
    at runSuite (file:///E:/claude-code/pipedream/modelcontextprotocol/agentrpc/gemini-cli/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:1729:8)
    at runSuite (file:///E:/claude-code/pipedream/modelcontextprotocol/agentrpc/gemini-cli/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:1729:8) {
  status: [33m429[39m
}

Attempt 3 failed with status 429. Retrying with backoff... Error: Rate limit exceeded (simulated)
    at Module.createSimulated429Error [90m(E:\claude-code\pipedream\modelcontextprotocol\agentrpc\gemini-cli\packages\core\[39msrc\utils\testUtils.ts:59:17[90m)[39m
    at [90mE:\claude-code\pipedream\modelcontextprotocol\agentrpc\gemini-cli\packages\core\[39msrc\utils\flashFallback.test.ts:112:51
    at file:///E:/claude-code/pipedream/modelcontextprotocol/agentrpc/gemini-cli/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:155:11
    at file:///E:/claude-code/pipedream/modelcontextprotocol/agentrpc/gemini-cli/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:752:26
    at file:///E:/claude-code/pipedream/modelcontextprotocol/agentrpc/gemini-cli/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:1897:20
    at new Promise (&lt;anonymous&gt;)
    at runWithTimeout (file:///E:/claude-code/pipedream/modelcontextprotocol/agentrpc/gemini-cli/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:1863:10)
    at runTest (file:///E:/claude-code/pipedream/modelcontextprotocol/agentrpc/gemini-cli/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:1574:12)
    at runSuite (file:///E:/claude-code/pipedream/modelcontextprotocol/agentrpc/gemini-cli/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:1729:8)
    at runSuite (file:///E:/claude-code/pipedream/modelcontextprotocol/agentrpc/gemini-cli/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:1729:8) {
  status: [33m429[39m
}

Attempt 4 failed with status 429. Retrying with backoff... Error: Rate limit exceeded (simulated)
    at Module.createSimulated429Error [90m(E:\claude-code\pipedream\modelcontextprotocol\agentrpc\gemini-cli\packages\core\[39msrc\utils\testUtils.ts:59:17[90m)[39m
    at [90mE:\claude-code\pipedream\modelcontextprotocol\agentrpc\gemini-cli\packages\core\[39msrc\utils\flashFallback.test.ts:112:51
    at file:///E:/claude-code/pipedream/modelcontextprotocol/agentrpc/gemini-cli/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:155:11
    at file:///E:/claude-code/pipedream/modelcontextprotocol/agentrpc/gemini-cli/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:752:26
    at file:///E:/claude-code/pipedream/modelcontextprotocol/agentrpc/gemini-cli/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:1897:20
    at new Promise (&lt;anonymous&gt;)
    at runWithTimeout (file:///E:/claude-code/pipedream/modelcontextprotocol/agentrpc/gemini-cli/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:1863:10)
    at runTest (file:///E:/claude-code/pipedream/modelcontextprotocol/agentrpc/gemini-cli/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:1574:12)
    at runSuite (file:///E:/claude-code/pipedream/modelcontextprotocol/agentrpc/gemini-cli/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:1729:8)
    at runSuite (file:///E:/claude-code/pipedream/modelcontextprotocol/agentrpc/gemini-cli/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:1729:8) {
  status: [33m429[39m
}

            </system-err>
        </testcase>
        <testcase classname="src/utils/flashFallback.test.ts" name="Retry Utility Fallback Integration &gt; should properly disable simulation state after fallback (Test Utility)" time="0.0003017">
        </testcase>
    </testsuite>
    <testsuite name="src/utils/geminiIgnoreParser.test.ts" timestamp="2025-09-23T13:26:52.217Z" hostname="WIN-33AANMPCPKN" tests="2" failures="0" errors="0" skipped="0" time="0.0212381">
        <testcase classname="src/utils/geminiIgnoreParser.test.ts" name="GeminiIgnoreParser &gt; when .geminiignore exists &gt; should ignore files specified in .geminiignore" time="0.0177956">
        </testcase>
        <testcase classname="src/utils/geminiIgnoreParser.test.ts" name="GeminiIgnoreParser &gt; when .geminiignore does not exist &gt; should not load any patterns and not ignore any files" time="0.0013214">
        </testcase>
    </testsuite>
    <testsuite name="src/utils/generateContentResponseUtilities.test.ts" timestamp="2025-09-23T13:26:52.217Z" hostname="WIN-33AANMPCPKN" tests="29" failures="0" errors="0" skipped="0" time="0.0089987">
        <testcase classname="src/utils/generateContentResponseUtilities.test.ts" name="generateContentResponseUtilities &gt; getResponseTextFromParts &gt; should return undefined for no parts" time="0.0017829">
        </testcase>
        <testcase classname="src/utils/generateContentResponseUtilities.test.ts" name="generateContentResponseUtilities &gt; getResponseTextFromParts &gt; should extract text from a single text part" time="0.0003325">
        </testcase>
        <testcase classname="src/utils/generateContentResponseUtilities.test.ts" name="generateContentResponseUtilities &gt; getResponseTextFromParts &gt; should concatenate text from multiple text parts" time="0.0001415">
        </testcase>
        <testcase classname="src/utils/generateContentResponseUtilities.test.ts" name="generateContentResponseUtilities &gt; getResponseTextFromParts &gt; should ignore function call parts" time="0.0001288">
        </testcase>
        <testcase classname="src/utils/generateContentResponseUtilities.test.ts" name="generateContentResponseUtilities &gt; getResponseTextFromParts &gt; should return undefined if only function call parts exist" time="0.0000981">
        </testcase>
        <testcase classname="src/utils/generateContentResponseUtilities.test.ts" name="generateContentResponseUtilities &gt; getFunctionCalls &gt; should return undefined for no candidates" time="0.0001859">
        </testcase>
        <testcase classname="src/utils/generateContentResponseUtilities.test.ts" name="generateContentResponseUtilities &gt; getFunctionCalls &gt; should return undefined for empty candidates array" time="0.0000917">
        </testcase>
        <testcase classname="src/utils/generateContentResponseUtilities.test.ts" name="generateContentResponseUtilities &gt; getFunctionCalls &gt; should return undefined for no parts" time="0.0002187">
        </testcase>
        <testcase classname="src/utils/generateContentResponseUtilities.test.ts" name="generateContentResponseUtilities &gt; getFunctionCalls &gt; should extract a single function call" time="0.0010012">
        </testcase>
        <testcase classname="src/utils/generateContentResponseUtilities.test.ts" name="generateContentResponseUtilities &gt; getFunctionCalls &gt; should extract multiple function calls" time="0.0004125">
        </testcase>
        <testcase classname="src/utils/generateContentResponseUtilities.test.ts" name="generateContentResponseUtilities &gt; getFunctionCalls &gt; should ignore text parts" time="0.0001425">
        </testcase>
        <testcase classname="src/utils/generateContentResponseUtilities.test.ts" name="generateContentResponseUtilities &gt; getFunctionCalls &gt; should return undefined if only text parts exist" time="0.0001012">
        </testcase>
        <testcase classname="src/utils/generateContentResponseUtilities.test.ts" name="generateContentResponseUtilities &gt; getFunctionCallsFromParts &gt; should return undefined for no parts" time="0.0001304">
        </testcase>
        <testcase classname="src/utils/generateContentResponseUtilities.test.ts" name="generateContentResponseUtilities &gt; getFunctionCallsFromParts &gt; should extract a single function call" time="0.0001344">
        </testcase>
        <testcase classname="src/utils/generateContentResponseUtilities.test.ts" name="generateContentResponseUtilities &gt; getFunctionCallsFromParts &gt; should extract multiple function calls" time="0.0001394">
        </testcase>
        <testcase classname="src/utils/generateContentResponseUtilities.test.ts" name="generateContentResponseUtilities &gt; getFunctionCallsFromParts &gt; should ignore text parts" time="0.0001221">
        </testcase>
        <testcase classname="src/utils/generateContentResponseUtilities.test.ts" name="generateContentResponseUtilities &gt; getFunctionCallsFromParts &gt; should return undefined if only text parts exist" time="0.0000897">
        </testcase>
        <testcase classname="src/utils/generateContentResponseUtilities.test.ts" name="generateContentResponseUtilities &gt; getFunctionCallsAsJson &gt; should return JSON string of function calls" time="0.0001706">
        </testcase>
        <testcase classname="src/utils/generateContentResponseUtilities.test.ts" name="generateContentResponseUtilities &gt; getFunctionCallsAsJson &gt; should return undefined if no function calls" time="0.0001125">
        </testcase>
        <testcase classname="src/utils/generateContentResponseUtilities.test.ts" name="generateContentResponseUtilities &gt; getFunctionCallsFromPartsAsJson &gt; should return JSON string of function calls from parts" time="0.0001368">
        </testcase>
        <testcase classname="src/utils/generateContentResponseUtilities.test.ts" name="generateContentResponseUtilities &gt; getFunctionCallsFromPartsAsJson &gt; should return undefined if no function calls in parts" time="0.0000877">
        </testcase>
        <testcase classname="src/utils/generateContentResponseUtilities.test.ts" name="generateContentResponseUtilities &gt; getStructuredResponse &gt; should return only text if only text exists" time="0.0001964">
        </testcase>
        <testcase classname="src/utils/generateContentResponseUtilities.test.ts" name="generateContentResponseUtilities &gt; getStructuredResponse &gt; should return only function call JSON if only function calls exist" time="0.0001127">
        </testcase>
        <testcase classname="src/utils/generateContentResponseUtilities.test.ts" name="generateContentResponseUtilities &gt; getStructuredResponse &gt; should return text and function call JSON if both exist" time="0.0001261">
        </testcase>
        <testcase classname="src/utils/generateContentResponseUtilities.test.ts" name="generateContentResponseUtilities &gt; getStructuredResponse &gt; should return undefined if neither text nor function calls exist" time="0.0000896">
        </testcase>
        <testcase classname="src/utils/generateContentResponseUtilities.test.ts" name="generateContentResponseUtilities &gt; getStructuredResponseFromParts &gt; should return only text if only text exists in parts" time="0.0001255">
        </testcase>
        <testcase classname="src/utils/generateContentResponseUtilities.test.ts" name="generateContentResponseUtilities &gt; getStructuredResponseFromParts &gt; should return only function call JSON if only function calls exist in parts" time="0.0001085">
        </testcase>
        <testcase classname="src/utils/generateContentResponseUtilities.test.ts" name="generateContentResponseUtilities &gt; getStructuredResponseFromParts &gt; should return text and function call JSON if both exist in parts" time="0.000123">
        </testcase>
        <testcase classname="src/utils/generateContentResponseUtilities.test.ts" name="generateContentResponseUtilities &gt; getStructuredResponseFromParts &gt; should return undefined if neither text nor function calls exist in parts" time="0.0002288">
        </testcase>
    </testsuite>
    <testsuite name="src/utils/getFolderStructure.test.ts" timestamp="2025-09-23T13:26:52.220Z" hostname="WIN-33AANMPCPKN" tests="15" failures="0" errors="0" skipped="0" time="0.125072">
        <testcase classname="src/utils/getFolderStructure.test.ts" name="getFolderStructure &gt; should return basic folder structure" time="0.0134089">
        </testcase>
        <testcase classname="src/utils/getFolderStructure.test.ts" name="getFolderStructure &gt; should handle an empty folder" time="0.0009225">
        </testcase>
        <testcase classname="src/utils/getFolderStructure.test.ts" name="getFolderStructure &gt; should ignore folders specified in ignoredFolders (default)" time="0.0088262">
        </testcase>
        <testcase classname="src/utils/getFolderStructure.test.ts" name="getFolderStructure &gt; should ignore folders specified in custom ignoredFolders" time="0.0078169">
        </testcase>
        <testcase classname="src/utils/getFolderStructure.test.ts" name="getFolderStructure &gt; should filter files by fileIncludePattern" time="0.0244937">
        </testcase>
        <testcase classname="src/utils/getFolderStructure.test.ts" name="getFolderStructure &gt; should handle maxItems truncation for files within a folder" time="0.0098023">
        </testcase>
        <testcase classname="src/utils/getFolderStructure.test.ts" name="getFolderStructure &gt; should handle maxItems truncation for subfolders" time="0.0068505">
        </testcase>
        <testcase classname="src/utils/getFolderStructure.test.ts" name="getFolderStructure &gt; should handle maxItems that only allows the root folder itself" time="0.0065304">
        </testcase>
        <testcase classname="src/utils/getFolderStructure.test.ts" name="getFolderStructure &gt; should handle non-existent directory" time="0.0024796">
            <system-err>
Warning: Could not read directory C:\Users\alroh\AppData\Local\Temp\folder-structure-test-FbKHU6\non-existent: ENOENT: no such file or directory, scandir &apos;C:\Users\alroh\AppData\Local\Temp\folder-structure-test-FbKHU6\non-existent&apos;

            </system-err>
        </testcase>
        <testcase classname="src/utils/getFolderStructure.test.ts" name="getFolderStructure &gt; should handle deep folder structure within limits" time="0.0035687">
        </testcase>
        <testcase classname="src/utils/getFolderStructure.test.ts" name="getFolderStructure &gt; should truncate deep folder structure if maxItems is small" time="0.0025276">
        </testcase>
        <testcase classname="src/utils/getFolderStructure.test.ts" name="getFolderStructure &gt; with gitignore &gt; should ignore files and folders specified in .gitignore" time="0.0121987">
        </testcase>
        <testcase classname="src/utils/getFolderStructure.test.ts" name="getFolderStructure &gt; with gitignore &gt; should not ignore files if respectGitIgnore is false" time="0.006217">
        </testcase>
        <testcase classname="src/utils/getFolderStructure.test.ts" name="getFolderStructure &gt; with geminiignore &gt; should ignore geminiignore files by default" time="0.0119374">
        </testcase>
        <testcase classname="src/utils/getFolderStructure.test.ts" name="getFolderStructure &gt; with geminiignore &gt; should not ignore files if respectGeminiIgnore is false" time="0.0056122">
        </testcase>
    </testsuite>
    <testsuite name="src/utils/gitIgnoreParser.test.ts" timestamp="2025-09-23T13:26:52.221Z" hostname="WIN-33AANMPCPKN" tests="20" failures="0" errors="0" skipped="0" time="0.1878852">
        <testcase classname="src/utils/gitIgnoreParser.test.ts" name="GitIgnoreParser &gt; Basic ignore behaviors &gt; should not ignore files when no .gitignore exists" time="0.0084567">
        </testcase>
        <testcase classname="src/utils/gitIgnoreParser.test.ts" name="GitIgnoreParser &gt; Basic ignore behaviors &gt; should ignore files based on a root .gitignore" time="0.0061057">
        </testcase>
        <testcase classname="src/utils/gitIgnoreParser.test.ts" name="GitIgnoreParser &gt; Basic ignore behaviors &gt; should handle git exclude file" time="0.0061628">
        </testcase>
        <testcase classname="src/utils/gitIgnoreParser.test.ts" name="GitIgnoreParser &gt; isIgnored path handling &gt; should always ignore .git directory" time="0.0058778">
        </testcase>
        <testcase classname="src/utils/gitIgnoreParser.test.ts" name="GitIgnoreParser &gt; isIgnored path handling &gt; should ignore files matching patterns" time="0.0103091">
        </testcase>
        <testcase classname="src/utils/gitIgnoreParser.test.ts" name="GitIgnoreParser &gt; isIgnored path handling &gt; should ignore files with path-specific patterns" time="0.0045117">
        </testcase>
        <testcase classname="src/utils/gitIgnoreParser.test.ts" name="GitIgnoreParser &gt; isIgnored path handling &gt; should handle negation patterns" time="0.0026202">
        </testcase>
        <testcase classname="src/utils/gitIgnoreParser.test.ts" name="GitIgnoreParser &gt; isIgnored path handling &gt; should not ignore files that do not match patterns" time="0.0057125">
        </testcase>
        <testcase classname="src/utils/gitIgnoreParser.test.ts" name="GitIgnoreParser &gt; isIgnored path handling &gt; should handle absolute paths correctly" time="0.0142233">
        </testcase>
        <testcase classname="src/utils/gitIgnoreParser.test.ts" name="GitIgnoreParser &gt; isIgnored path handling &gt; should handle paths outside project root by not ignoring them" time="0.00242">
        </testcase>
        <testcase classname="src/utils/gitIgnoreParser.test.ts" name="GitIgnoreParser &gt; isIgnored path handling &gt; should handle relative paths correctly" time="0.0034328">
        </testcase>
        <testcase classname="src/utils/gitIgnoreParser.test.ts" name="GitIgnoreParser &gt; isIgnored path handling &gt; should normalize path separators on Windows" time="0.0037727">
        </testcase>
        <testcase classname="src/utils/gitIgnoreParser.test.ts" name="GitIgnoreParser &gt; isIgnored path handling &gt; should handle root path &quot;/&quot; without throwing error" time="0.0033915">
        </testcase>
        <testcase classname="src/utils/gitIgnoreParser.test.ts" name="GitIgnoreParser &gt; isIgnored path handling &gt; should handle absolute-like paths without throwing error" time="0.0024571">
        </testcase>
        <testcase classname="src/utils/gitIgnoreParser.test.ts" name="GitIgnoreParser &gt; isIgnored path handling &gt; should handle paths that start with forward slash" time="0.0042221">
        </testcase>
        <testcase classname="src/utils/gitIgnoreParser.test.ts" name="GitIgnoreParser &gt; isIgnored path handling &gt; should handle backslash-prefixed files without crashing" time="0.0020979">
        </testcase>
        <testcase classname="src/utils/gitIgnoreParser.test.ts" name="GitIgnoreParser &gt; isIgnored path handling &gt; should handle files with absolute-like names" time="0.0018263">
        </testcase>
        <testcase classname="src/utils/gitIgnoreParser.test.ts" name="GitIgnoreParser &gt; nested .gitignore files &gt; should handle nested .gitignore files correctly" time="0.0088291">
        </testcase>
        <testcase classname="src/utils/gitIgnoreParser.test.ts" name="GitIgnoreParser &gt; precedence rules &gt; should prioritize nested .gitignore over root .gitignore" time="0.0074586">
        </testcase>
        <testcase classname="src/utils/gitIgnoreParser.test.ts" name="GitIgnoreParser &gt; precedence rules &gt; should prioritize .gitignore over .git/info/exclude" time="0.0820797">
        </testcase>
    </testsuite>
    <testsuite name="src/utils/ignorePatterns.test.ts" timestamp="2025-09-23T13:26:52.223Z" hostname="WIN-33AANMPCPKN" tests="28" failures="0" errors="0" skipped="0" time="0.0105548">
        <testcase classname="src/utils/ignorePatterns.test.ts" name="FileExclusions &gt; getCoreIgnorePatterns &gt; should return basic ignore patterns" time="0.0022883">
        </testcase>
        <testcase classname="src/utils/ignorePatterns.test.ts" name="FileExclusions &gt; getDefaultExcludePatterns &gt; should return comprehensive patterns by default" time="0.0007469">
        </testcase>
        <testcase classname="src/utils/ignorePatterns.test.ts" name="FileExclusions &gt; getDefaultExcludePatterns &gt; should respect includeDefaults option" time="0.0002465">
        </testcase>
        <testcase classname="src/utils/ignorePatterns.test.ts" name="FileExclusions &gt; getDefaultExcludePatterns &gt; should include custom patterns" time="0.0001307">
        </testcase>
        <testcase classname="src/utils/ignorePatterns.test.ts" name="FileExclusions &gt; getDefaultExcludePatterns &gt; should include runtime patterns" time="0.0001199">
        </testcase>
        <testcase classname="src/utils/ignorePatterns.test.ts" name="FileExclusions &gt; getDefaultExcludePatterns &gt; should respect includeDynamicPatterns option" time="0.0001253">
        </testcase>
        <testcase classname="src/utils/ignorePatterns.test.ts" name="FileExclusions &gt; getReadManyFilesExcludes &gt; should provide legacy compatibility" time="0.0001911">
        </testcase>
        <testcase classname="src/utils/ignorePatterns.test.ts" name="FileExclusions &gt; getGlobExcludes &gt; should return core patterns for glob operations" time="0.0002609">
        </testcase>
        <testcase classname="src/utils/ignorePatterns.test.ts" name="FileExclusions &gt; getGlobExcludes &gt; should include additional excludes" time="0.0001425">
        </testcase>
        <testcase classname="src/utils/ignorePatterns.test.ts" name="FileExclusions &gt; with Config &gt; should use config custom excludes when available" time="0.0003537">
        </testcase>
        <testcase classname="src/utils/ignorePatterns.test.ts" name="FileExclusions &gt; with Config &gt; should handle config without getCustomExcludes method" time="0.0001622">
        </testcase>
        <testcase classname="src/utils/ignorePatterns.test.ts" name="FileExclusions &gt; with Config &gt; should include config custom excludes in glob patterns" time="0.0001834">
        </testcase>
        <testcase classname="src/utils/ignorePatterns.test.ts" name="FileExclusions &gt; buildExcludePatterns &gt; should be an alias for getDefaultExcludePatterns" time="0.0007058">
        </testcase>
        <testcase classname="src/utils/ignorePatterns.test.ts" name="BINARY_EXTENSIONS &gt; should include common binary file extensions" time="0.0002177">
        </testcase>
        <testcase classname="src/utils/ignorePatterns.test.ts" name="BINARY_EXTENSIONS &gt; should include additional binary extensions" time="0.0001397">
        </testcase>
        <testcase classname="src/utils/ignorePatterns.test.ts" name="BINARY_EXTENSIONS &gt; should include media file extensions" time="0.0001477">
        </testcase>
        <testcase classname="src/utils/ignorePatterns.test.ts" name="BINARY_EXTENSIONS &gt; should be sorted" time="0.000141">
        </testcase>
        <testcase classname="src/utils/ignorePatterns.test.ts" name="BINARY_EXTENSIONS &gt; should not contain invalid extensions from brace patterns" time="0.0001192">
        </testcase>
        <testcase classname="src/utils/ignorePatterns.test.ts" name="extractExtensionsFromPatterns &gt; should extract simple extensions" time="0.0001273">
        </testcase>
        <testcase classname="src/utils/ignorePatterns.test.ts" name="extractExtensionsFromPatterns &gt; should handle brace expansion patterns" time="0.0002914">
        </testcase>
        <testcase classname="src/utils/ignorePatterns.test.ts" name="extractExtensionsFromPatterns &gt; should combine simple and brace expansion patterns" time="0.0001858">
        </testcase>
        <testcase classname="src/utils/ignorePatterns.test.ts" name="extractExtensionsFromPatterns &gt; should handle empty brace expansion" time="0.0001223">
        </testcase>
        <testcase classname="src/utils/ignorePatterns.test.ts" name="extractExtensionsFromPatterns &gt; should ignore invalid patterns" time="0.0000942">
        </testcase>
        <testcase classname="src/utils/ignorePatterns.test.ts" name="extractExtensionsFromPatterns &gt; should remove duplicates and sort results" time="0.0000939">
        </testcase>
        <testcase classname="src/utils/ignorePatterns.test.ts" name="extractExtensionsFromPatterns &gt; should handle complex brace patterns with multiple extensions" time="0.0000842">
        </testcase>
        <testcase classname="src/utils/ignorePatterns.test.ts" name="extractExtensionsFromPatterns &gt; should handle compound extensions correctly using path.extname" time="0.000089">
        </testcase>
        <testcase classname="src/utils/ignorePatterns.test.ts" name="extractExtensionsFromPatterns &gt; should handle dotfiles correctly" time="0.000077">
        </testcase>
        <testcase classname="src/utils/ignorePatterns.test.ts" name="extractExtensionsFromPatterns &gt; should handle edge cases with path.extname" time="0.0000712">
        </testcase>
    </testsuite>
    <testsuite name="src/utils/installationManager.test.ts" timestamp="2025-09-23T13:26:52.225Z" hostname="WIN-33AANMPCPKN" tests="4" failures="0" errors="0" skipped="0" time="0.0102504">
        <testcase classname="src/utils/installationManager.test.ts" name="InstallationManager &gt; getInstallationId &gt; should create and write a new installation ID if one does not exist" time="0.004945">
        </testcase>
        <testcase classname="src/utils/installationManager.test.ts" name="InstallationManager &gt; getInstallationId &gt; should read an existing installation ID from a file" time="0.0013893">
        </testcase>
        <testcase classname="src/utils/installationManager.test.ts" name="InstallationManager &gt; getInstallationId &gt; should return the same ID on subsequent calls" time="0.0015905">
        </testcase>
        <testcase classname="src/utils/installationManager.test.ts" name="InstallationManager &gt; getInstallationId &gt; should handle read errors and return a fallback ID" time="0.0011442">
        </testcase>
    </testsuite>
    <testsuite name="src/utils/llm-edit-fixer.test.ts" timestamp="2025-09-23T13:26:52.226Z" hostname="WIN-33AANMPCPKN" tests="5" failures="0" errors="0" skipped="0" time="0.007993">
        <testcase classname="src/utils/llm-edit-fixer.test.ts" name="FixLLMEditWithInstruction &gt; should use the promptId from the AsyncLocalStorage context when available" time="0.0048665">
        </testcase>
        <testcase classname="src/utils/llm-edit-fixer.test.ts" name="FixLLMEditWithInstruction &gt; should generate and use a fallback promptId when context is not available" time="0.0007608">
        </testcase>
        <testcase classname="src/utils/llm-edit-fixer.test.ts" name="FixLLMEditWithInstruction &gt; should construct the user prompt correctly" time="0.0004035">
        </testcase>
        <testcase classname="src/utils/llm-edit-fixer.test.ts" name="FixLLMEditWithInstruction &gt; should return a cached result on subsequent identical calls" time="0.0005052">
        </testcase>
        <testcase classname="src/utils/llm-edit-fixer.test.ts" name="FixLLMEditWithInstruction &gt; should not use cache for calls with different parameters" time="0.0002203">
        </testcase>
    </testsuite>
    <testsuite name="src/utils/memoryDiscovery.test.ts" timestamp="2025-09-23T13:26:52.227Z" hostname="WIN-33AANMPCPKN" tests="16" failures="0" errors="0" skipped="0" time="0.1995938">
        <testcase classname="src/utils/memoryDiscovery.test.ts" name="loadServerHierarchicalMemory &gt; when untrusted &gt; does not load context files from untrusted workspaces" time="0.0123812">
        </testcase>
        <testcase classname="src/utils/memoryDiscovery.test.ts" name="loadServerHierarchicalMemory &gt; when untrusted &gt; loads context from outside the untrusted workspace" time="0.0243422">
        </testcase>
        <testcase classname="src/utils/memoryDiscovery.test.ts" name="loadServerHierarchicalMemory &gt; should return empty memory and count if no context files are found" time="0.0060755">
        </testcase>
        <testcase classname="src/utils/memoryDiscovery.test.ts" name="loadServerHierarchicalMemory &gt; should load only the global context file if present and others are not (default filename)" time="0.0236266">
        </testcase>
        <testcase classname="src/utils/memoryDiscovery.test.ts" name="loadServerHierarchicalMemory &gt; should load only the global custom context file if present and filename is changed" time="0.0084056">
        </testcase>
        <testcase classname="src/utils/memoryDiscovery.test.ts" name="loadServerHierarchicalMemory &gt; should load context files by upward traversal with custom filename" time="0.0095065">
        </testcase>
        <testcase classname="src/utils/memoryDiscovery.test.ts" name="loadServerHierarchicalMemory &gt; should load context files by downward traversal with custom filename" time="0.0080519">
        </testcase>
        <testcase classname="src/utils/memoryDiscovery.test.ts" name="loadServerHierarchicalMemory &gt; should load ORIGINAL_GEMINI_MD_FILENAME files by upward traversal from CWD to project root" time="0.0097169">
        </testcase>
        <testcase classname="src/utils/memoryDiscovery.test.ts" name="loadServerHierarchicalMemory &gt; should load ORIGINAL_GEMINI_MD_FILENAME files by downward traversal from CWD" time="0.0120478">
        </testcase>
        <testcase classname="src/utils/memoryDiscovery.test.ts" name="loadServerHierarchicalMemory &gt; should load and correctly order global, upward, and downward ORIGINAL_GEMINI_MD_FILENAME files" time="0.0106794">
        </testcase>
        <testcase classname="src/utils/memoryDiscovery.test.ts" name="loadServerHierarchicalMemory &gt; should ignore specified directories during downward scan" time="0.0116486">
        </testcase>
        <testcase classname="src/utils/memoryDiscovery.test.ts" name="loadServerHierarchicalMemory &gt; should respect the maxDirs parameter during downward scan" time="0.0113681">
        </testcase>
        <testcase classname="src/utils/memoryDiscovery.test.ts" name="loadServerHierarchicalMemory &gt; should load extension context file paths" time="0.0109365">
        </testcase>
        <testcase classname="src/utils/memoryDiscovery.test.ts" name="loadServerHierarchicalMemory &gt; should load memory from included directories" time="0.0082724">
        </testcase>
        <testcase classname="src/utils/memoryDiscovery.test.ts" name="loadServerHierarchicalMemory &gt; should handle multiple directories and files in parallel correctly" time="0.0145918">
        </testcase>
        <testcase classname="src/utils/memoryDiscovery.test.ts" name="loadServerHierarchicalMemory &gt; should preserve order and prevent duplicates when processing multiple directories" time="0.0160122">
        </testcase>
    </testsuite>
    <testsuite name="src/utils/memoryImportProcessor.test.ts" timestamp="2025-09-23T13:26:52.228Z" hostname="WIN-33AANMPCPKN" tests="23" failures="0" errors="0" skipped="0" time="0.0362992">
        <testcase classname="src/utils/memoryImportProcessor.test.ts" name="memoryImportProcessor &gt; processImports &gt; should process basic md file imports" time="0.0174463">
        </testcase>
        <testcase classname="src/utils/memoryImportProcessor.test.ts" name="memoryImportProcessor &gt; processImports &gt; should import non-md files just like md files" time="0.0010553">
        </testcase>
        <testcase classname="src/utils/memoryImportProcessor.test.ts" name="memoryImportProcessor &gt; processImports &gt; should handle circular imports" time="0.0005922">
        </testcase>
        <testcase classname="src/utils/memoryImportProcessor.test.ts" name="memoryImportProcessor &gt; processImports &gt; should handle file not found errors" time="0.0006173">
        </testcase>
        <testcase classname="src/utils/memoryImportProcessor.test.ts" name="memoryImportProcessor &gt; processImports &gt; should respect max depth limit" time="0.0004835">
        </testcase>
        <testcase classname="src/utils/memoryImportProcessor.test.ts" name="memoryImportProcessor &gt; processImports &gt; should handle nested imports recursively" time="0.0005724">
        </testcase>
        <testcase classname="src/utils/memoryImportProcessor.test.ts" name="memoryImportProcessor &gt; processImports &gt; should handle absolute paths in imports" time="0.0004241">
        </testcase>
        <testcase classname="src/utils/memoryImportProcessor.test.ts" name="memoryImportProcessor &gt; processImports &gt; should handle multiple imports in same content" time="0.0006835">
        </testcase>
        <testcase classname="src/utils/memoryImportProcessor.test.ts" name="memoryImportProcessor &gt; processImports &gt; should ignore imports inside code blocks" time="0.0007224">
        </testcase>
        <testcase classname="src/utils/memoryImportProcessor.test.ts" name="memoryImportProcessor &gt; processImports &gt; should ignore imports inside inline code" time="0.0006657">
        </testcase>
        <testcase classname="src/utils/memoryImportProcessor.test.ts" name="memoryImportProcessor &gt; processImports &gt; should handle nested tokens and non-unique content correctly" time="0.0003952">
        </testcase>
        <testcase classname="src/utils/memoryImportProcessor.test.ts" name="memoryImportProcessor &gt; processImports &gt; should allow imports from parent and subdirectories within project root" time="0.0003024">
        </testcase>
        <testcase classname="src/utils/memoryImportProcessor.test.ts" name="memoryImportProcessor &gt; processImports &gt; should reject imports outside project root" time="0.0002084">
        </testcase>
        <testcase classname="src/utils/memoryImportProcessor.test.ts" name="memoryImportProcessor &gt; processImports &gt; should build import tree structure" time="0.0015666">
        </testcase>
        <testcase classname="src/utils/memoryImportProcessor.test.ts" name="memoryImportProcessor &gt; processImports &gt; should produce flat output in Claude-style with unique files in order" time="0.0012273">
        </testcase>
        <testcase classname="src/utils/memoryImportProcessor.test.ts" name="memoryImportProcessor &gt; processImports &gt; should not duplicate files in flat output if imported multiple times" time="0.0004183">
        </testcase>
        <testcase classname="src/utils/memoryImportProcessor.test.ts" name="memoryImportProcessor &gt; processImports &gt; should handle nested imports in flat output" time="0.0004389">
        </testcase>
        <testcase classname="src/utils/memoryImportProcessor.test.ts" name="memoryImportProcessor &gt; validateImportPath &gt; should reject URLs" time="0.0002628">
        </testcase>
        <testcase classname="src/utils/memoryImportProcessor.test.ts" name="memoryImportProcessor &gt; validateImportPath &gt; should allow paths within allowed directories" time="0.0027913">
        </testcase>
        <testcase classname="src/utils/memoryImportProcessor.test.ts" name="memoryImportProcessor &gt; validateImportPath &gt; should reject paths outside allowed directories" time="0.0004536">
        </testcase>
        <testcase classname="src/utils/memoryImportProcessor.test.ts" name="memoryImportProcessor &gt; validateImportPath &gt; should handle multiple allowed directories" time="0.0005743">
        </testcase>
        <testcase classname="src/utils/memoryImportProcessor.test.ts" name="memoryImportProcessor &gt; validateImportPath &gt; should handle relative paths correctly" time="0.0006067">
        </testcase>
        <testcase classname="src/utils/memoryImportProcessor.test.ts" name="memoryImportProcessor &gt; validateImportPath &gt; should handle absolute paths correctly" time="0.0005782">
        </testcase>
    </testsuite>
    <testsuite name="src/utils/nextSpeakerChecker.test.ts" timestamp="2025-09-23T13:26:52.230Z" hostname="WIN-33AANMPCPKN" tests="10" failures="0" errors="0" skipped="0" time="0.0116438">
        <testcase classname="src/utils/nextSpeakerChecker.test.ts" name="checkNextSpeaker &gt; should return null if history is empty" time="0.0042296">
        </testcase>
        <testcase classname="src/utils/nextSpeakerChecker.test.ts" name="checkNextSpeaker &gt; should return null if the last speaker was the user" time="0.0006986">
        </testcase>
        <testcase classname="src/utils/nextSpeakerChecker.test.ts" name="checkNextSpeaker &gt; should return { next_speaker: &apos;model&apos; } when model intends to continue" time="0.001179">
        </testcase>
        <testcase classname="src/utils/nextSpeakerChecker.test.ts" name="checkNextSpeaker &gt; should return { next_speaker: &apos;user&apos; } when model asks a question" time="0.0005807">
        </testcase>
        <testcase classname="src/utils/nextSpeakerChecker.test.ts" name="checkNextSpeaker &gt; should return { next_speaker: &apos;user&apos; } when model makes a statement" time="0.0006991">
        </testcase>
        <testcase classname="src/utils/nextSpeakerChecker.test.ts" name="checkNextSpeaker &gt; should return null if baseLlmClient.generateJson throws an error" time="0.0006193">
        </testcase>
        <testcase classname="src/utils/nextSpeakerChecker.test.ts" name="checkNextSpeaker &gt; should return null if baseLlmClient.generateJson returns invalid JSON (missing next_speaker)" time="0.0005473">
        </testcase>
        <testcase classname="src/utils/nextSpeakerChecker.test.ts" name="checkNextSpeaker &gt; should return null if baseLlmClient.generateJson returns a non-string next_speaker" time="0.0005095">
        </testcase>
        <testcase classname="src/utils/nextSpeakerChecker.test.ts" name="checkNextSpeaker &gt; should return null if baseLlmClient.generateJson returns an invalid next_speaker string value" time="0.0006168">
        </testcase>
        <testcase classname="src/utils/nextSpeakerChecker.test.ts" name="checkNextSpeaker &gt; should call generateJson with the correct parameters" time="0.0007281">
        </testcase>
    </testsuite>
    <testsuite name="src/utils/partUtils.test.ts" timestamp="2025-09-23T13:26:52.231Z" hostname="WIN-33AANMPCPKN" tests="37" failures="0" errors="0" skipped="0" time="0.0069938">
        <testcase classname="src/utils/partUtils.test.ts" name="partUtils &gt; partToString (default behavior) &gt; should return empty string for undefined or null" time="0.0013313">
        </testcase>
        <testcase classname="src/utils/partUtils.test.ts" name="partUtils &gt; partToString (default behavior) &gt; should return string input unchanged" time="0.0001024">
        </testcase>
        <testcase classname="src/utils/partUtils.test.ts" name="partUtils &gt; partToString (default behavior) &gt; should concatenate strings from an array" time="0.0000834">
        </testcase>
        <testcase classname="src/utils/partUtils.test.ts" name="partUtils &gt; partToString (default behavior) &gt; should return text property when provided a text part" time="0.0000653">
        </testcase>
        <testcase classname="src/utils/partUtils.test.ts" name="partUtils &gt; partToString (default behavior) &gt; should return empty string for non-text parts" time="0.0000967">
        </testcase>
        <testcase classname="src/utils/partUtils.test.ts" name="partUtils &gt; partToString (verbose) &gt; should return empty string for undefined or null" time="0.0000914">
        </testcase>
        <testcase classname="src/utils/partUtils.test.ts" name="partUtils &gt; partToString (verbose) &gt; should return string input unchanged" time="0.0000601">
        </testcase>
        <testcase classname="src/utils/partUtils.test.ts" name="partUtils &gt; partToString (verbose) &gt; should join parts if the value is an array" time="0.0000686">
        </testcase>
        <testcase classname="src/utils/partUtils.test.ts" name="partUtils &gt; partToString (verbose) &gt; should return the text property if the part is an object with text" time="0.0000611">
        </testcase>
        <testcase classname="src/utils/partUtils.test.ts" name="partUtils &gt; partToString (verbose) &gt; should return descriptive string for videoMetadata part" time="0.0000626">
        </testcase>
        <testcase classname="src/utils/partUtils.test.ts" name="partUtils &gt; partToString (verbose) &gt; should return descriptive string for thought part" time="0.0000623">
        </testcase>
        <testcase classname="src/utils/partUtils.test.ts" name="partUtils &gt; partToString (verbose) &gt; should return descriptive string for codeExecutionResult part" time="0.0000627">
        </testcase>
        <testcase classname="src/utils/partUtils.test.ts" name="partUtils &gt; partToString (verbose) &gt; should return descriptive string for executableCode part" time="0.0000627">
        </testcase>
        <testcase classname="src/utils/partUtils.test.ts" name="partUtils &gt; partToString (verbose) &gt; should return descriptive string for fileData part" time="0.0000632">
        </testcase>
        <testcase classname="src/utils/partUtils.test.ts" name="partUtils &gt; partToString (verbose) &gt; should return descriptive string for functionCall part" time="0.0000622">
        </testcase>
        <testcase classname="src/utils/partUtils.test.ts" name="partUtils &gt; partToString (verbose) &gt; should return descriptive string for functionResponse part" time="0.0000618">
        </testcase>
        <testcase classname="src/utils/partUtils.test.ts" name="partUtils &gt; partToString (verbose) &gt; should return descriptive string for inlineData part" time="0.0000632">
        </testcase>
        <testcase classname="src/utils/partUtils.test.ts" name="partUtils &gt; partToString (verbose) &gt; should return an empty string for an unknown part type" time="0.0000613">
        </testcase>
        <testcase classname="src/utils/partUtils.test.ts" name="partUtils &gt; partToString (verbose) &gt; should handle complex nested arrays with various part types" time="0.0000885">
        </testcase>
        <testcase classname="src/utils/partUtils.test.ts" name="partUtils &gt; getResponseText &gt; should return null when no candidates exist" time="0.0004086">
        </testcase>
        <testcase classname="src/utils/partUtils.test.ts" name="partUtils &gt; getResponseText &gt; should return concatenated text from first candidate" time="0.0001666">
        </testcase>
        <testcase classname="src/utils/partUtils.test.ts" name="partUtils &gt; getResponseText &gt; should ignore parts without text" time="0.000088">
        </testcase>
        <testcase classname="src/utils/partUtils.test.ts" name="partUtils &gt; getResponseText &gt; should return null when candidate has no parts" time="0.0000799">
        </testcase>
        <testcase classname="src/utils/partUtils.test.ts" name="partUtils &gt; getResponseText &gt; should return null if the first candidate has no content property" time="0.0000761">
        </testcase>
        <testcase classname="src/utils/partUtils.test.ts" name="partUtils &gt; flatMapTextParts &gt; should return an empty array for empty input" time="0.0006806">
        </testcase>
        <testcase classname="src/utils/partUtils.test.ts" name="partUtils &gt; flatMapTextParts &gt; should transform a simple string input" time="0.0002086">
        </testcase>
        <testcase classname="src/utils/partUtils.test.ts" name="partUtils &gt; flatMapTextParts &gt; should transform a single text part object" time="0.000108">
        </testcase>
        <testcase classname="src/utils/partUtils.test.ts" name="partUtils &gt; flatMapTextParts &gt; should transform an array of text parts and flatten the result" time="0.0001303">
        </testcase>
        <testcase classname="src/utils/partUtils.test.ts" name="partUtils &gt; flatMapTextParts &gt; should pass through non-text parts unmodified" time="0.0000862">
        </testcase>
        <testcase classname="src/utils/partUtils.test.ts" name="partUtils &gt; flatMapTextParts &gt; should handle a mix of text and non-text parts in an array" time="0.0001195">
        </testcase>
        <testcase classname="src/utils/partUtils.test.ts" name="partUtils &gt; flatMapTextParts &gt; should handle a transform that returns an empty array" time="0.0001047">
        </testcase>
        <testcase classname="src/utils/partUtils.test.ts" name="partUtils &gt; appendToLastTextPart &gt; should append to an empty prompt" time="0.0001333">
        </testcase>
        <testcase classname="src/utils/partUtils.test.ts" name="partUtils &gt; appendToLastTextPart &gt; should append to a prompt with a string as the last part" time="0.0000821">
        </testcase>
        <testcase classname="src/utils/partUtils.test.ts" name="partUtils &gt; appendToLastTextPart &gt; should append to a prompt with a text part object as the last part" time="0.0000878">
        </testcase>
        <testcase classname="src/utils/partUtils.test.ts" name="partUtils &gt; appendToLastTextPart &gt; should append a new text part if the last part is not a text part" time="0.000093">
        </testcase>
        <testcase classname="src/utils/partUtils.test.ts" name="partUtils &gt; appendToLastTextPart &gt; should not append anything if the text to append is empty" time="0.0000697">
        </testcase>
        <testcase classname="src/utils/partUtils.test.ts" name="partUtils &gt; appendToLastTextPart &gt; should use a custom separator" time="0.0000775">
        </testcase>
    </testsuite>
    <testsuite name="src/utils/pathReader.test.ts" timestamp="2025-09-23T13:26:52.236Z" hostname="WIN-33AANMPCPKN" tests="16" failures="0" errors="0" skipped="1" time="0.1087252">
        <testcase classname="src/utils/pathReader.test.ts" name="readPathFromWorkspace &gt; should read a text file from the CWD" time="0.0110446">
        </testcase>
        <testcase classname="src/utils/pathReader.test.ts" name="readPathFromWorkspace &gt; should read a file from a secondary workspace directory" time="0.0017631">
        </testcase>
        <testcase classname="src/utils/pathReader.test.ts" name="readPathFromWorkspace &gt; should prioritize CWD when file exists in both CWD and secondary dir" time="0.0016178">
        </testcase>
        <testcase classname="src/utils/pathReader.test.ts" name="readPathFromWorkspace &gt; should read an image file and return it as inlineData (Part object)" time="0.0009946">
        </testcase>
        <testcase classname="src/utils/pathReader.test.ts" name="readPathFromWorkspace &gt; should read a generic binary file and return an info string" time="0.0007588">
        </testcase>
        <testcase classname="src/utils/pathReader.test.ts" name="readPathFromWorkspace &gt; should read a file from an absolute path if within workspace" time="0.0012953">
        </testcase>
        <testcase classname="src/utils/pathReader.test.ts" name="readPathFromWorkspace &gt; Directory Expansion &gt; should expand a directory and read the content of its files" time="0.0107076">
        </testcase>
        <testcase classname="src/utils/pathReader.test.ts" name="readPathFromWorkspace &gt; Directory Expansion &gt; should recursively expand a directory and read all nested files" time="0.0060233">
        </testcase>
        <testcase classname="src/utils/pathReader.test.ts" name="readPathFromWorkspace &gt; Directory Expansion &gt; should handle mixed content and include files from subdirectories" time="0.0032371">
        </testcase>
        <testcase classname="src/utils/pathReader.test.ts" name="readPathFromWorkspace &gt; Directory Expansion &gt; should handle an empty directory" time="0.0011396">
        </testcase>
        <testcase classname="src/utils/pathReader.test.ts" name="readPathFromWorkspace &gt; File Ignoring &gt; should return an empty array for an ignored file" time="0.0018403">
        </testcase>
        <testcase classname="src/utils/pathReader.test.ts" name="readPathFromWorkspace &gt; File Ignoring &gt; should not read ignored files when expanding a directory" time="0.0018449">
        </testcase>
        <testcase classname="src/utils/pathReader.test.ts" name="readPathFromWorkspace &gt; should throw an error for an absolute path outside the workspace" time="0.002006">
        </testcase>
        <testcase classname="src/utils/pathReader.test.ts" name="readPathFromWorkspace &gt; should throw an error if a relative path is not found anywhere" time="0.0010456">
        </testcase>
        <testcase classname="src/utils/pathReader.test.ts" name="readPathFromWorkspace &gt; should return an error string if reading a file with no permissions" time="0">
            <skipped/>
        </testcase>
        <testcase classname="src/utils/pathReader.test.ts" name="readPathFromWorkspace &gt; should return an error string for files exceeding the size limit" time="0.0615666">
        </testcase>
    </testsuite>
    <testsuite name="src/utils/paths.test.ts" timestamp="2025-09-23T13:26:52.237Z" hostname="WIN-33AANMPCPKN" tests="55" failures="0" errors="0" skipped="0" time="0.0095292">
        <testcase classname="src/utils/paths.test.ts" name="escapePath &gt; should escape spaces" time="0.0013534">
        </testcase>
        <testcase classname="src/utils/paths.test.ts" name="escapePath &gt; should escape tabs" time="0.0001162">
        </testcase>
        <testcase classname="src/utils/paths.test.ts" name="escapePath &gt; should escape parentheses" time="0.0000976">
        </testcase>
        <testcase classname="src/utils/paths.test.ts" name="escapePath &gt; should escape square brackets" time="0.0000671">
        </testcase>
        <testcase classname="src/utils/paths.test.ts" name="escapePath &gt; should escape curly braces" time="0.0000622">
        </testcase>
        <testcase classname="src/utils/paths.test.ts" name="escapePath &gt; should escape semicolons" time="0.0002245">
        </testcase>
        <testcase classname="src/utils/paths.test.ts" name="escapePath &gt; should escape ampersands" time="0.0000818">
        </testcase>
        <testcase classname="src/utils/paths.test.ts" name="escapePath &gt; should escape pipes" time="0.0000704">
        </testcase>
        <testcase classname="src/utils/paths.test.ts" name="escapePath &gt; should escape asterisks" time="0.0001107">
        </testcase>
        <testcase classname="src/utils/paths.test.ts" name="escapePath &gt; should escape question marks" time="0.0000619">
        </testcase>
        <testcase classname="src/utils/paths.test.ts" name="escapePath &gt; should escape dollar signs" time="0.0000592">
        </testcase>
        <testcase classname="src/utils/paths.test.ts" name="escapePath &gt; should escape backticks" time="0.000063">
        </testcase>
        <testcase classname="src/utils/paths.test.ts" name="escapePath &gt; should escape single quotes" time="0.0000651">
        </testcase>
        <testcase classname="src/utils/paths.test.ts" name="escapePath &gt; should escape double quotes" time="0.00006">
        </testcase>
        <testcase classname="src/utils/paths.test.ts" name="escapePath &gt; should escape hash symbols" time="0.0000753">
        </testcase>
        <testcase classname="src/utils/paths.test.ts" name="escapePath &gt; should escape exclamation marks" time="0.0000642">
        </testcase>
        <testcase classname="src/utils/paths.test.ts" name="escapePath &gt; should escape tildes" time="0.000061">
        </testcase>
        <testcase classname="src/utils/paths.test.ts" name="escapePath &gt; should escape less than and greater than signs" time="0.0000706">
        </testcase>
        <testcase classname="src/utils/paths.test.ts" name="escapePath &gt; should handle multiple special characters" time="0.0000644">
        </testcase>
        <testcase classname="src/utils/paths.test.ts" name="escapePath &gt; should not double-escape already escaped characters" time="0.0000874">
        </testcase>
        <testcase classname="src/utils/paths.test.ts" name="escapePath &gt; should handle escaped backslashes correctly" time="0.0003322">
        </testcase>
        <testcase classname="src/utils/paths.test.ts" name="escapePath &gt; should handle complex escaped backslash scenarios" time="0.0000943">
        </testcase>
        <testcase classname="src/utils/paths.test.ts" name="escapePath &gt; should handle paths without special characters" time="0.0001053">
        </testcase>
        <testcase classname="src/utils/paths.test.ts" name="escapePath &gt; should handle complex real-world examples" time="0.0001085">
        </testcase>
        <testcase classname="src/utils/paths.test.ts" name="escapePath &gt; should handle empty strings" time="0.000058">
        </testcase>
        <testcase classname="src/utils/paths.test.ts" name="escapePath &gt; should handle paths with only special characters" time="0.0000645">
        </testcase>
        <testcase classname="src/utils/paths.test.ts" name="unescapePath &gt; should unescape spaces" time="0.0001937">
        </testcase>
        <testcase classname="src/utils/paths.test.ts" name="unescapePath &gt; should unescape tabs" time="0.0000672">
        </testcase>
        <testcase classname="src/utils/paths.test.ts" name="unescapePath &gt; should unescape parentheses" time="0.0001546">
        </testcase>
        <testcase classname="src/utils/paths.test.ts" name="unescapePath &gt; should unescape square brackets" time="0.0000714">
        </testcase>
        <testcase classname="src/utils/paths.test.ts" name="unescapePath &gt; should unescape curly braces" time="0.0000829">
        </testcase>
        <testcase classname="src/utils/paths.test.ts" name="unescapePath &gt; should unescape multiple special characters" time="0.0000571">
        </testcase>
        <testcase classname="src/utils/paths.test.ts" name="unescapePath &gt; should handle paths without escaped characters" time="0.0000821">
        </testcase>
        <testcase classname="src/utils/paths.test.ts" name="unescapePath &gt; should handle all special characters" time="0.0000606">
        </testcase>
        <testcase classname="src/utils/paths.test.ts" name="unescapePath &gt; should be the inverse of escapePath" time="0.0002339">
        </testcase>
        <testcase classname="src/utils/paths.test.ts" name="unescapePath &gt; should handle empty strings" time="0.0000666">
        </testcase>
        <testcase classname="src/utils/paths.test.ts" name="unescapePath &gt; should not affect backslashes not followed by special characters" time="0.0000752">
        </testcase>
        <testcase classname="src/utils/paths.test.ts" name="unescapePath &gt; should handle escaped backslashes in unescaping" time="0.0001039">
        </testcase>
        <testcase classname="src/utils/paths.test.ts" name="isSubpath &gt; should return true for a direct subpath" time="0.0003173">
        </testcase>
        <testcase classname="src/utils/paths.test.ts" name="isSubpath &gt; should return true for the same path" time="0.0000636">
        </testcase>
        <testcase classname="src/utils/paths.test.ts" name="isSubpath &gt; should return false for a parent path" time="0.0000627">
        </testcase>
        <testcase classname="src/utils/paths.test.ts" name="isSubpath &gt; should return false for a completely different path" time="0.0012847">
        </testcase>
        <testcase classname="src/utils/paths.test.ts" name="isSubpath &gt; should handle relative paths" time="0.000203">
        </testcase>
        <testcase classname="src/utils/paths.test.ts" name="isSubpath &gt; should handle paths with .." time="0.0001">
        </testcase>
        <testcase classname="src/utils/paths.test.ts" name="isSubpath &gt; should handle root paths" time="0.0000889">
        </testcase>
        <testcase classname="src/utils/paths.test.ts" name="isSubpath &gt; should handle trailing slashes" time="0.0001068">
        </testcase>
        <testcase classname="src/utils/paths.test.ts" name="isSubpath on Windows &gt; should return true for a direct subpath on Windows" time="0.0000773">
        </testcase>
        <testcase classname="src/utils/paths.test.ts" name="isSubpath on Windows &gt; should return true for the same path on Windows" time="0.0000588">
        </testcase>
        <testcase classname="src/utils/paths.test.ts" name="isSubpath on Windows &gt; should return false for a parent path on Windows" time="0.0000616">
        </testcase>
        <testcase classname="src/utils/paths.test.ts" name="isSubpath on Windows &gt; should return false for a different drive on Windows" time="0.0000609">
        </testcase>
        <testcase classname="src/utils/paths.test.ts" name="isSubpath on Windows &gt; should be case-insensitive for drive letters on Windows" time="0.0000582">
        </testcase>
        <testcase classname="src/utils/paths.test.ts" name="isSubpath on Windows &gt; should be case-insensitive for path components on Windows" time="0.0000569">
        </testcase>
        <testcase classname="src/utils/paths.test.ts" name="isSubpath on Windows &gt; should handle mixed slashes on Windows" time="0.0000586">
        </testcase>
        <testcase classname="src/utils/paths.test.ts" name="isSubpath on Windows &gt; should handle trailing slashes on Windows" time="0.0000555">
        </testcase>
        <testcase classname="src/utils/paths.test.ts" name="isSubpath on Windows &gt; should handle relative paths correctly on Windows" time="0.0001023">
        </testcase>
    </testsuite>
    <testsuite name="src/utils/retry.test.ts" timestamp="2025-09-23T13:26:52.243Z" hostname="WIN-33AANMPCPKN" tests="13" failures="0" errors="0" skipped="0" time="0.0471955">
        <testcase classname="src/utils/retry.test.ts" name="retryWithBackoff &gt; should return the result on the first attempt if successful" time="0.0053152">
        </testcase>
        <testcase classname="src/utils/retry.test.ts" name="retryWithBackoff &gt; should retry and succeed if failures are within maxAttempts" time="0.0142578">
            <system-err>
Attempt 1 failed with status 500. Retrying with backoff... Error: Simulated error attempt 1
    at [90mE:\claude-code\pipedream\modelcontextprotocol\agentrpc\gemini-cli\packages\core\[39msrc\utils\retry.test.ts:23:32
    at mockCall (file:///E:/claude-code/pipedream/modelcontextprotocol/agentrpc/gemini-cli/node_modules/[4m@vitest[24m/spy/dist/index.js:96:15)
    at spy (file:///E:/claude-code/pipedream/modelcontextprotocol/agentrpc/gemini-cli/node_modules/[4mtinyspy[24m/dist/index.js:47:80)
    at retryWithBackoff [90m(E:\claude-code\pipedream\modelcontextprotocol\agentrpc\gemini-cli\packages\core\[39msrc\utils\retry.ts:96:20[90m)[39m
    at [90mE:\claude-code\pipedream\modelcontextprotocol\agentrpc\gemini-cli\packages\core\[39msrc\utils\retry.test.ts:62:21
    at file:///E:/claude-code/pipedream/modelcontextprotocol/agentrpc/gemini-cli/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:155:11
    at file:///E:/claude-code/pipedream/modelcontextprotocol/agentrpc/gemini-cli/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:752:26
    at file:///E:/claude-code/pipedream/modelcontextprotocol/agentrpc/gemini-cli/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:1897:20
    at new Promise (&lt;anonymous&gt;)
    at runWithTimeout (file:///E:/claude-code/pipedream/modelcontextprotocol/agentrpc/gemini-cli/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:1863:10) {
  status: [33m500[39m
}

Attempt 2 failed with status 500. Retrying with backoff... Error: Simulated error attempt 2
    at [90mE:\claude-code\pipedream\modelcontextprotocol\agentrpc\gemini-cli\packages\core\[39msrc\utils\retry.test.ts:23:32
    at mockCall (file:///E:/claude-code/pipedream/modelcontextprotocol/agentrpc/gemini-cli/node_modules/[4m@vitest[24m/spy/dist/index.js:96:15)
    at spy (file:///E:/claude-code/pipedream/modelcontextprotocol/agentrpc/gemini-cli/node_modules/[4mtinyspy[24m/dist/index.js:47:80)
    at retryWithBackoff [90m(E:\claude-code\pipedream\modelcontextprotocol\agentrpc\gemini-cli\packages\core\[39msrc\utils\retry.ts:96:20[90m)[39m {
  status: [33m500[39m
}

            </system-err>
        </testcase>
        <testcase classname="src/utils/retry.test.ts" name="retryWithBackoff &gt; should throw an error if all attempts fail" time="0.0028311">
            <system-err>
Attempt 1 failed with status 500. Retrying with backoff... Error: Simulated error attempt 1
    at [90mE:\claude-code\pipedream\modelcontextprotocol\agentrpc\gemini-cli\packages\core\[39msrc\utils\retry.test.ts:23:32
    at mockCall (file:///E:/claude-code/pipedream/modelcontextprotocol/agentrpc/gemini-cli/node_modules/[4m@vitest[24m/spy/dist/index.js:96:15)
    at spy (file:///E:/claude-code/pipedream/modelcontextprotocol/agentrpc/gemini-cli/node_modules/[4mtinyspy[24m/dist/index.js:47:80)
    at retryWithBackoff [90m(E:\claude-code\pipedream\modelcontextprotocol\agentrpc\gemini-cli\packages\core\[39msrc\utils\retry.ts:96:20[90m)[39m
    at [90mE:\claude-code\pipedream\modelcontextprotocol\agentrpc\gemini-cli\packages\core\[39msrc\utils\retry.test.ts:78:21
    at file:///E:/claude-code/pipedream/modelcontextprotocol/agentrpc/gemini-cli/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:155:11
    at file:///E:/claude-code/pipedream/modelcontextprotocol/agentrpc/gemini-cli/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:752:26
    at file:///E:/claude-code/pipedream/modelcontextprotocol/agentrpc/gemini-cli/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:1897:20
    at new Promise (&lt;anonymous&gt;)
    at runWithTimeout (file:///E:/claude-code/pipedream/modelcontextprotocol/agentrpc/gemini-cli/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:1863:10) {
  status: [33m500[39m
}

Attempt 2 failed with status 500. Retrying with backoff... Error: Simulated error attempt 2
    at [90mE:\claude-code\pipedream\modelcontextprotocol\agentrpc\gemini-cli\packages\core\[39msrc\utils\retry.test.ts:23:32
    at mockCall (file:///E:/claude-code/pipedream/modelcontextprotocol/agentrpc/gemini-cli/node_modules/[4m@vitest[24m/spy/dist/index.js:96:15)
    at spy (file:///E:/claude-code/pipedream/modelcontextprotocol/agentrpc/gemini-cli/node_modules/[4mtinyspy[24m/dist/index.js:47:80)
    at retryWithBackoff [90m(E:\claude-code\pipedream\modelcontextprotocol\agentrpc\gemini-cli\packages\core\[39msrc\utils\retry.ts:96:20[90m)[39m {
  status: [33m500[39m
}

            </system-err>
        </testcase>
        <testcase classname="src/utils/retry.test.ts" name="retryWithBackoff &gt; should not retry if shouldRetry returns false" time="0.0006308">
        </testcase>
        <testcase classname="src/utils/retry.test.ts" name="retryWithBackoff &gt; should use default shouldRetry if not provided, retrying on 429" time="0.0007055">
        </testcase>
        <testcase classname="src/utils/retry.test.ts" name="retryWithBackoff &gt; should use default shouldRetry if not provided, not retrying on 400" time="0.0005439">
        </testcase>
        <testcase classname="src/utils/retry.test.ts" name="retryWithBackoff &gt; should respect maxDelayMs" time="0.0033541">
            <system-err>
Attempt 1 failed with status 500. Retrying with backoff... Error: Simulated error attempt 1
    at [90mE:\claude-code\pipedream\modelcontextprotocol\agentrpc\gemini-cli\packages\core\[39msrc\utils\retry.test.ts:23:32
    at mockCall (file:///E:/claude-code/pipedream/modelcontextprotocol/agentrpc/gemini-cli/node_modules/[4m@vitest[24m/spy/dist/index.js:96:15)
    at spy (file:///E:/claude-code/pipedream/modelcontextprotocol/agentrpc/gemini-cli/node_modules/[4mtinyspy[24m/dist/index.js:47:80)
    at retryWithBackoff [90m(E:\claude-code\pipedream\modelcontextprotocol\agentrpc\gemini-cli\packages\core\[39msrc\utils\retry.ts:96:20[90m)[39m
    at [90mE:\claude-code\pipedream\modelcontextprotocol\agentrpc\gemini-cli\packages\core\[39msrc\utils\retry.test.ts:161:21
    at file:///E:/claude-code/pipedream/modelcontextprotocol/agentrpc/gemini-cli/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:155:11
    at file:///E:/claude-code/pipedream/modelcontextprotocol/agentrpc/gemini-cli/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:752:26
    at file:///E:/claude-code/pipedream/modelcontextprotocol/agentrpc/gemini-cli/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:1897:20
    at new Promise (&lt;anonymous&gt;)
    at runWithTimeout (file:///E:/claude-code/pipedream/modelcontextprotocol/agentrpc/gemini-cli/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:1863:10) {
  status: [33m500[39m
}

Attempt 2 failed with status 500. Retrying with backoff... Error: Simulated error attempt 2
    at [90mE:\claude-code\pipedream\modelcontextprotocol\agentrpc\gemini-cli\packages\core\[39msrc\utils\retry.test.ts:23:32
    at mockCall (file:///E:/claude-code/pipedream/modelcontextprotocol/agentrpc/gemini-cli/node_modules/[4m@vitest[24m/spy/dist/index.js:96:15)
    at spy (file:///E:/claude-code/pipedream/modelcontextprotocol/agentrpc/gemini-cli/node_modules/[4mtinyspy[24m/dist/index.js:47:80)
    at retryWithBackoff [90m(E:\claude-code\pipedream\modelcontextprotocol\agentrpc\gemini-cli\packages\core\[39msrc\utils\retry.ts:96:20[90m)[39m {
  status: [33m500[39m
}

Attempt 3 failed with status 500. Retrying with backoff... Error: Simulated error attempt 3
    at [90mE:\claude-code\pipedream\modelcontextprotocol\agentrpc\gemini-cli\packages\core\[39msrc\utils\retry.test.ts:23:32
    at mockCall (file:///E:/claude-code/pipedream/modelcontextprotocol/agentrpc/gemini-cli/node_modules/[4m@vitest[24m/spy/dist/index.js:96:15)
    at spy (file:///E:/claude-code/pipedream/modelcontextprotocol/agentrpc/gemini-cli/node_modules/[4mtinyspy[24m/dist/index.js:47:80)
    at retryWithBackoff [90m(E:\claude-code\pipedream\modelcontextprotocol\agentrpc\gemini-cli\packages\core\[39msrc\utils\retry.ts:96:20[90m)[39m {
  status: [33m500[39m
}

            </system-err>
        </testcase>
        <testcase classname="src/utils/retry.test.ts" name="retryWithBackoff &gt; should handle jitter correctly, ensuring varied delays" time="0.0032122">
            <system-err>
Attempt 1 failed with status 500. Retrying with backoff... Error: Simulated error attempt 1
    at [90mE:\claude-code\pipedream\modelcontextprotocol\agentrpc\gemini-cli\packages\core\[39msrc\utils\retry.test.ts:23:32
    at mockCall (file:///E:/claude-code/pipedream/modelcontextprotocol/agentrpc/gemini-cli/node_modules/[4m@vitest[24m/spy/dist/index.js:96:15)
    at spy (file:///E:/claude-code/pipedream/modelcontextprotocol/agentrpc/gemini-cli/node_modules/[4mtinyspy[24m/dist/index.js:47:80)
    at retryWithBackoff [90m(E:\claude-code\pipedream\modelcontextprotocol\agentrpc\gemini-cli\packages\core\[39msrc\utils\retry.ts:96:20[90m)[39m
    at runRetry [90m(E:\claude-code\pipedream\modelcontextprotocol\agentrpc\gemini-cli\packages\core\[39msrc\utils\retry.test.ts:190:7[90m)[39m
    at [90mE:\claude-code\pipedream\modelcontextprotocol\agentrpc\gemini-cli\packages\core\[39msrc\utils\retry.test.ts:197:22
    at file:///E:/claude-code/pipedream/modelcontextprotocol/agentrpc/gemini-cli/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:155:11
    at file:///E:/claude-code/pipedream/modelcontextprotocol/agentrpc/gemini-cli/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:752:26
    at file:///E:/claude-code/pipedream/modelcontextprotocol/agentrpc/gemini-cli/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:1897:20
    at new Promise (&lt;anonymous&gt;) {
  status: [33m500[39m
}

Attempt 1 failed with status 500. Retrying with backoff... Error: Simulated error attempt 1
    at [90mE:\claude-code\pipedream\modelcontextprotocol\agentrpc\gemini-cli\packages\core\[39msrc\utils\retry.test.ts:23:32
    at mockCall (file:///E:/claude-code/pipedream/modelcontextprotocol/agentrpc/gemini-cli/node_modules/[4m@vitest[24m/spy/dist/index.js:96:15)
    at spy (file:///E:/claude-code/pipedream/modelcontextprotocol/agentrpc/gemini-cli/node_modules/[4mtinyspy[24m/dist/index.js:47:80)
    at retryWithBackoff [90m(E:\claude-code\pipedream\modelcontextprotocol\agentrpc\gemini-cli\packages\core\[39msrc\utils\retry.ts:96:20[90m)[39m
    at runRetry [90m(E:\claude-code\pipedream\modelcontextprotocol\agentrpc\gemini-cli\packages\core\[39msrc\utils\retry.test.ts:190:7[90m)[39m
    at [90mE:\claude-code\pipedream\modelcontextprotocol\agentrpc\gemini-cli\packages\core\[39msrc\utils\retry.test.ts:212:22
    at file:///E:/claude-code/pipedream/modelcontextprotocol/agentrpc/gemini-cli/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:752:20 {
  status: [33m500[39m
}

            </system-err>
        </testcase>
        <testcase classname="src/utils/retry.test.ts" name="retryWithBackoff &gt; Flash model fallback for OAuth users &gt; should trigger fallback for OAuth personal users after persistent 429 errors" time="0.0020696">
        </testcase>
        <testcase classname="src/utils/retry.test.ts" name="retryWithBackoff &gt; Flash model fallback for OAuth users &gt; should NOT trigger fallback for API key users" time="0.0039361">
        </testcase>
        <testcase classname="src/utils/retry.test.ts" name="retryWithBackoff &gt; Flash model fallback for OAuth users &gt; should reset attempt counter and continue after successful fallback" time="0.0007605">
        </testcase>
        <testcase classname="src/utils/retry.test.ts" name="retryWithBackoff &gt; Flash model fallback for OAuth users &gt; should continue with original error if fallback is rejected" time="0.0021152">
        </testcase>
        <testcase classname="src/utils/retry.test.ts" name="retryWithBackoff &gt; Flash model fallback for OAuth users &gt; should handle mixed error types (only count consecutive 429s)" time="0.0057328">
            <system-err>
Attempt 1 failed with status 500. Retrying with backoff... Error: Server error
    at [90mE:\claude-code\pipedream\modelcontextprotocol\agentrpc\gemini-cli\packages\core\[39msrc\utils\retry.test.ts:377:36
    at mockCall (file:///E:/claude-code/pipedream/modelcontextprotocol/agentrpc/gemini-cli/node_modules/[4m@vitest[24m/spy/dist/index.js:96:15)
    at spy (file:///E:/claude-code/pipedream/modelcontextprotocol/agentrpc/gemini-cli/node_modules/[4mtinyspy[24m/dist/index.js:47:80)
    at retryWithBackoff [90m(E:\claude-code\pipedream\modelcontextprotocol\agentrpc\gemini-cli\packages\core\[39msrc\utils\retry.ts:96:20[90m)[39m
    at [90mE:\claude-code\pipedream\modelcontextprotocol\agentrpc\gemini-cli\packages\core\[39msrc\utils\retry.test.ts:388:23
    at file:///E:/claude-code/pipedream/modelcontextprotocol/agentrpc/gemini-cli/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:155:11
    at file:///E:/claude-code/pipedream/modelcontextprotocol/agentrpc/gemini-cli/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:752:26
    at file:///E:/claude-code/pipedream/modelcontextprotocol/agentrpc/gemini-cli/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:1897:20
    at new Promise (&lt;anonymous&gt;)
    at runWithTimeout (file:///E:/claude-code/pipedream/modelcontextprotocol/agentrpc/gemini-cli/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:1863:10) {
  status: [33m500[39m
}

            </system-err>
        </testcase>
    </testsuite>
    <testsuite name="src/utils/safeJsonStringify.test.ts" timestamp="2025-09-23T13:26:52.245Z" hostname="WIN-33AANMPCPKN" tests="8" failures="0" errors="0" skipped="0" time="0.0035131">
        <testcase classname="src/utils/safeJsonStringify.test.ts" name="safeJsonStringify &gt; should stringify normal objects without issues" time="0.0012398">
        </testcase>
        <testcase classname="src/utils/safeJsonStringify.test.ts" name="safeJsonStringify &gt; should handle circular references by replacing them with [Circular]" time="0.0001145">
        </testcase>
        <testcase classname="src/utils/safeJsonStringify.test.ts" name="safeJsonStringify &gt; should handle complex circular structures like HttpsProxyAgent" time="0.0002488">
        </testcase>
        <testcase classname="src/utils/safeJsonStringify.test.ts" name="safeJsonStringify &gt; should respect the space parameter for formatting" time="0.0000756">
        </testcase>
        <testcase classname="src/utils/safeJsonStringify.test.ts" name="safeJsonStringify &gt; should handle circular references with formatting" time="0.0000687">
        </testcase>
        <testcase classname="src/utils/safeJsonStringify.test.ts" name="safeJsonStringify &gt; should handle arrays with circular references" time="0.0000689">
        </testcase>
        <testcase classname="src/utils/safeJsonStringify.test.ts" name="safeJsonStringify &gt; should handle null and undefined values" time="0.0001972">
        </testcase>
        <testcase classname="src/utils/safeJsonStringify.test.ts" name="safeJsonStringify &gt; should handle primitive values" time="0.0001035">
        </testcase>
    </testsuite>
    <testsuite name="src/utils/secure-browser-launcher.test.ts" timestamp="2025-09-23T13:26:52.246Z" hostname="WIN-33AANMPCPKN" tests="14" failures="0" errors="0" skipped="0" time="0.0232606">
        <testcase classname="src/utils/secure-browser-launcher.test.ts" name="secure-browser-launcher &gt; URL validation &gt; should allow valid HTTP URLs" time="0.0057522">
        </testcase>
        <testcase classname="src/utils/secure-browser-launcher.test.ts" name="secure-browser-launcher &gt; URL validation &gt; should allow valid HTTPS URLs" time="0.0010598">
        </testcase>
        <testcase classname="src/utils/secure-browser-launcher.test.ts" name="secure-browser-launcher &gt; URL validation &gt; should reject non-HTTP(S) protocols" time="0.0020208">
        </testcase>
        <testcase classname="src/utils/secure-browser-launcher.test.ts" name="secure-browser-launcher &gt; URL validation &gt; should reject invalid URLs" time="0.0003975">
        </testcase>
        <testcase classname="src/utils/secure-browser-launcher.test.ts" name="secure-browser-launcher &gt; URL validation &gt; should reject URLs with control characters" time="0.000698">
        </testcase>
        <testcase classname="src/utils/secure-browser-launcher.test.ts" name="secure-browser-launcher &gt; Command injection prevention &gt; should prevent PowerShell command injection on Windows" time="0.0008305">
        </testcase>
        <testcase classname="src/utils/secure-browser-launcher.test.ts" name="secure-browser-launcher &gt; Command injection prevention &gt; should handle URLs with special shell characters safely" time="0.0033032">
        </testcase>
        <testcase classname="src/utils/secure-browser-launcher.test.ts" name="secure-browser-launcher &gt; Command injection prevention &gt; should properly escape single quotes in URLs on Windows" time="0.0023839">
        </testcase>
        <testcase classname="src/utils/secure-browser-launcher.test.ts" name="secure-browser-launcher &gt; Platform-specific behavior &gt; should use correct command on macOS" time="0.000766">
        </testcase>
        <testcase classname="src/utils/secure-browser-launcher.test.ts" name="secure-browser-launcher &gt; Platform-specific behavior &gt; should use PowerShell on Windows" time="0.00133">
        </testcase>
        <testcase classname="src/utils/secure-browser-launcher.test.ts" name="secure-browser-launcher &gt; Platform-specific behavior &gt; should use xdg-open on Linux" time="0.0006563">
        </testcase>
        <testcase classname="src/utils/secure-browser-launcher.test.ts" name="secure-browser-launcher &gt; Platform-specific behavior &gt; should throw on unsupported platforms" time="0.0004491">
        </testcase>
        <testcase classname="src/utils/secure-browser-launcher.test.ts" name="secure-browser-launcher &gt; Error handling &gt; should handle browser launch failures gracefully" time="0.0007604">
        </testcase>
        <testcase classname="src/utils/secure-browser-launcher.test.ts" name="secure-browser-launcher &gt; Error handling &gt; should try fallback browsers on Linux" time="0.0008824">
        </testcase>
    </testsuite>
    <testsuite name="src/utils/shell-utils.test.ts" timestamp="2025-09-23T13:26:52.248Z" hostname="WIN-33AANMPCPKN" tests="49" failures="0" errors="0" skipped="0" time="0.0119742">
        <testcase classname="src/utils/shell-utils.test.ts" name="isCommandAllowed &gt; should allow a command if no restrictions are provided" time="0.00214">
        </testcase>
        <testcase classname="src/utils/shell-utils.test.ts" name="isCommandAllowed &gt; should allow a command if it is in the global allowlist" time="0.0002039">
        </testcase>
        <testcase classname="src/utils/shell-utils.test.ts" name="isCommandAllowed &gt; should block a command if it is not in a strict global allowlist" time="0.0001771">
        </testcase>
        <testcase classname="src/utils/shell-utils.test.ts" name="isCommandAllowed &gt; should block a command if it is in the blocked list" time="0.0001314">
        </testcase>
        <testcase classname="src/utils/shell-utils.test.ts" name="isCommandAllowed &gt; should prioritize the blocklist over the allowlist" time="0.0001231">
        </testcase>
        <testcase classname="src/utils/shell-utils.test.ts" name="isCommandAllowed &gt; should allow any command when a wildcard is in coreTools" time="0.0001064">
        </testcase>
        <testcase classname="src/utils/shell-utils.test.ts" name="isCommandAllowed &gt; should block any command when a wildcard is in excludeTools" time="0.0001212">
        </testcase>
        <testcase classname="src/utils/shell-utils.test.ts" name="isCommandAllowed &gt; should block a command on the blocklist even with a wildcard allow" time="0.0001319">
        </testcase>
        <testcase classname="src/utils/shell-utils.test.ts" name="isCommandAllowed &gt; should allow a chained command if all parts are on the global allowlist" time="0.0001107">
        </testcase>
        <testcase classname="src/utils/shell-utils.test.ts" name="isCommandAllowed &gt; should block a chained command if any part is blocked" time="0.0001316">
        </testcase>
        <testcase classname="src/utils/shell-utils.test.ts" name="isCommandAllowed &gt; command substitution &gt; should block command substitution using `$(...)`" time="0.0001961">
        </testcase>
        <testcase classname="src/utils/shell-utils.test.ts" name="isCommandAllowed &gt; command substitution &gt; should block command substitution using `&lt;(...)`" time="0.0001007">
        </testcase>
        <testcase classname="src/utils/shell-utils.test.ts" name="isCommandAllowed &gt; command substitution &gt; should block command substitution using backticks" time="0.0000993">
        </testcase>
        <testcase classname="src/utils/shell-utils.test.ts" name="isCommandAllowed &gt; command substitution &gt; should allow substitution-like patterns inside single quotes" time="0.0002082">
        </testcase>
        <testcase classname="src/utils/shell-utils.test.ts" name="checkCommandPermissions &gt; in &quot;Default Allow&quot; mode (no sessionAllowlist) &gt; should return a detailed success object for an allowed command" time="0.0007705">
        </testcase>
        <testcase classname="src/utils/shell-utils.test.ts" name="checkCommandPermissions &gt; in &quot;Default Allow&quot; mode (no sessionAllowlist) &gt; should return a detailed failure object for a blocked command" time="0.0002487">
        </testcase>
        <testcase classname="src/utils/shell-utils.test.ts" name="checkCommandPermissions &gt; in &quot;Default Allow&quot; mode (no sessionAllowlist) &gt; should return a detailed failure object for a command not on a strict allowlist" time="0.0001512">
        </testcase>
        <testcase classname="src/utils/shell-utils.test.ts" name="checkCommandPermissions &gt; in &quot;Default Deny&quot; mode (with sessionAllowlist) &gt; should allow a command on the sessionAllowlist" time="0.0001305">
        </testcase>
        <testcase classname="src/utils/shell-utils.test.ts" name="checkCommandPermissions &gt; in &quot;Default Deny&quot; mode (with sessionAllowlist) &gt; should block a command not on the sessionAllowlist or global allowlist" time="0.0001606">
        </testcase>
        <testcase classname="src/utils/shell-utils.test.ts" name="checkCommandPermissions &gt; in &quot;Default Deny&quot; mode (with sessionAllowlist) &gt; should allow a command on the global allowlist even if not on the session allowlist" time="0.0001069">
        </testcase>
        <testcase classname="src/utils/shell-utils.test.ts" name="checkCommandPermissions &gt; in &quot;Default Deny&quot; mode (with sessionAllowlist) &gt; should allow a chained command if parts are on different allowlists" time="0.0001128">
        </testcase>
        <testcase classname="src/utils/shell-utils.test.ts" name="checkCommandPermissions &gt; in &quot;Default Deny&quot; mode (with sessionAllowlist) &gt; should block a command on the sessionAllowlist if it is also globally blocked" time="0.000118">
        </testcase>
        <testcase classname="src/utils/shell-utils.test.ts" name="checkCommandPermissions &gt; in &quot;Default Deny&quot; mode (with sessionAllowlist) &gt; should block a chained command if one part is not on any allowlist" time="0.0001489">
        </testcase>
        <testcase classname="src/utils/shell-utils.test.ts" name="getCommandRoots &gt; should return a single command" time="0.0002389">
        </testcase>
        <testcase classname="src/utils/shell-utils.test.ts" name="getCommandRoots &gt; should handle paths and return the binary name" time="0.0001714">
        </testcase>
        <testcase classname="src/utils/shell-utils.test.ts" name="getCommandRoots &gt; should return an empty array for an empty string" time="0.0000828">
        </testcase>
        <testcase classname="src/utils/shell-utils.test.ts" name="getCommandRoots &gt; should handle a mix of operators" time="0.0001006">
        </testcase>
        <testcase classname="src/utils/shell-utils.test.ts" name="getCommandRoots &gt; should correctly parse a chained command with quotes" time="0.0000986">
        </testcase>
        <testcase classname="src/utils/shell-utils.test.ts" name="stripShellWrapper &gt; should strip sh -c with quotes" time="0.0001648">
        </testcase>
        <testcase classname="src/utils/shell-utils.test.ts" name="stripShellWrapper &gt; should strip bash -c with extra whitespace" time="0.0001203">
        </testcase>
        <testcase classname="src/utils/shell-utils.test.ts" name="stripShellWrapper &gt; should strip zsh -c without quotes" time="0.0000751">
        </testcase>
        <testcase classname="src/utils/shell-utils.test.ts" name="stripShellWrapper &gt; should strip cmd.exe /c" time="0.0000714">
        </testcase>
        <testcase classname="src/utils/shell-utils.test.ts" name="stripShellWrapper &gt; should not strip anything if no wrapper is present" time="0.0000682">
        </testcase>
        <testcase classname="src/utils/shell-utils.test.ts" name="escapeShellArg &gt; POSIX (bash) &gt; should use shell-quote for escaping" time="0.0010688">
        </testcase>
        <testcase classname="src/utils/shell-utils.test.ts" name="escapeShellArg &gt; POSIX (bash) &gt; should handle empty strings" time="0.0002216">
        </testcase>
        <testcase classname="src/utils/shell-utils.test.ts" name="escapeShellArg &gt; Windows &gt; when shell is cmd.exe &gt; should wrap simple arguments in double quotes" time="0.0000923">
        </testcase>
        <testcase classname="src/utils/shell-utils.test.ts" name="escapeShellArg &gt; Windows &gt; when shell is cmd.exe &gt; should escape internal double quotes by doubling them" time="0.000098">
        </testcase>
        <testcase classname="src/utils/shell-utils.test.ts" name="escapeShellArg &gt; Windows &gt; when shell is cmd.exe &gt; should handle empty strings" time="0.0000734">
        </testcase>
        <testcase classname="src/utils/shell-utils.test.ts" name="escapeShellArg &gt; Windows &gt; when shell is PowerShell &gt; should wrap simple arguments in single quotes" time="0.0002378">
        </testcase>
        <testcase classname="src/utils/shell-utils.test.ts" name="escapeShellArg &gt; Windows &gt; when shell is PowerShell &gt; should escape internal single quotes by doubling them" time="0.0000864">
        </testcase>
        <testcase classname="src/utils/shell-utils.test.ts" name="escapeShellArg &gt; Windows &gt; when shell is PowerShell &gt; should handle double quotes without escaping them" time="0.0000782">
        </testcase>
        <testcase classname="src/utils/shell-utils.test.ts" name="escapeShellArg &gt; Windows &gt; when shell is PowerShell &gt; should handle empty strings" time="0.0000745">
        </testcase>
        <testcase classname="src/utils/shell-utils.test.ts" name="getShellConfiguration &gt; should return bash configuration on Linux" time="0.0002348">
        </testcase>
        <testcase classname="src/utils/shell-utils.test.ts" name="getShellConfiguration &gt; should return bash configuration on macOS (darwin)" time="0.0001345">
        </testcase>
        <testcase classname="src/utils/shell-utils.test.ts" name="getShellConfiguration &gt; on Windows &gt; should return cmd.exe configuration by default" time="0.000164">
        </testcase>
        <testcase classname="src/utils/shell-utils.test.ts" name="getShellConfiguration &gt; on Windows &gt; should respect ComSpec for cmd.exe" time="0.0001472">
        </testcase>
        <testcase classname="src/utils/shell-utils.test.ts" name="getShellConfiguration &gt; on Windows &gt; should return PowerShell configuration if ComSpec points to powershell.exe" time="0.0001409">
        </testcase>
        <testcase classname="src/utils/shell-utils.test.ts" name="getShellConfiguration &gt; on Windows &gt; should return PowerShell configuration if ComSpec points to pwsh.exe" time="0.0001366">
        </testcase>
        <testcase classname="src/utils/shell-utils.test.ts" name="getShellConfiguration &gt; on Windows &gt; should be case-insensitive when checking ComSpec" time="0.000132">
        </testcase>
    </testsuite>
    <testsuite name="src/utils/summarizer.test.ts" timestamp="2025-09-23T13:26:52.252Z" hostname="WIN-33AANMPCPKN" tests="8" failures="0" errors="0" skipped="0" time="0.0335725">
        <testcase classname="src/utils/summarizer.test.ts" name="summarizers &gt; summarizeToolOutput &gt; should return original text if it is shorter than maxLength" time="0.0067197">
        </testcase>
        <testcase classname="src/utils/summarizer.test.ts" name="summarizers &gt; summarizeToolOutput &gt; should return original text if it is empty" time="0.0031593">
        </testcase>
        <testcase classname="src/utils/summarizer.test.ts" name="summarizers &gt; summarizeToolOutput &gt; should call generateContent if text is longer than maxLength" time="0.0034458">
        </testcase>
        <testcase classname="src/utils/summarizer.test.ts" name="summarizers &gt; summarizeToolOutput &gt; should return original text if generateContent throws an error" time="0.0051153">
        </testcase>
        <testcase classname="src/utils/summarizer.test.ts" name="summarizers &gt; summarizeToolOutput &gt; should construct the correct prompt for summarization" time="0.0032814">
        </testcase>
        <testcase classname="src/utils/summarizer.test.ts" name="summarizers &gt; llmSummarizer &gt; should summarize tool output using summarizeToolOutput" time="0.0033589">
        </testcase>
        <testcase classname="src/utils/summarizer.test.ts" name="summarizers &gt; llmSummarizer &gt; should handle different llmContent types" time="0.003524">
        </testcase>
        <testcase classname="src/utils/summarizer.test.ts" name="summarizers &gt; defaultSummarizer &gt; should stringify the llmContent" time="0.0033318">
        </testcase>
    </testsuite>
    <testsuite name="src/utils/systemEncoding.test.ts" timestamp="2025-09-23T13:26:52.254Z" hostname="WIN-33AANMPCPKN" tests="38" failures="0" errors="0" skipped="0" time="0.0223117">
        <testcase classname="src/utils/systemEncoding.test.ts" name="Shell Command Processor - Encoding Functions &gt; windowsCodePageToEncoding &gt; should map common Windows code pages correctly" time="0.0019316">
        </testcase>
        <testcase classname="src/utils/systemEncoding.test.ts" name="Shell Command Processor - Encoding Functions &gt; windowsCodePageToEncoding &gt; should return null for unmapped code pages and warn" time="0.0015517">
        </testcase>
        <testcase classname="src/utils/systemEncoding.test.ts" name="Shell Command Processor - Encoding Functions &gt; windowsCodePageToEncoding &gt; should handle all Windows-specific code pages" time="0.0003572">
        </testcase>
        <testcase classname="src/utils/systemEncoding.test.ts" name="Shell Command Processor - Encoding Functions &gt; detectEncodingFromBuffer &gt; should detect encoding using chardet successfully" time="0.0020614">
        </testcase>
        <testcase classname="src/utils/systemEncoding.test.ts" name="Shell Command Processor - Encoding Functions &gt; detectEncodingFromBuffer &gt; should handle chardet returning mixed case encoding" time="0.0003314">
        </testcase>
        <testcase classname="src/utils/systemEncoding.test.ts" name="Shell Command Processor - Encoding Functions &gt; detectEncodingFromBuffer &gt; should return null when chardet fails" time="0.0018093">
        </testcase>
        <testcase classname="src/utils/systemEncoding.test.ts" name="Shell Command Processor - Encoding Functions &gt; detectEncodingFromBuffer &gt; should return null when chardet returns null" time="0.0002246">
        </testcase>
        <testcase classname="src/utils/systemEncoding.test.ts" name="Shell Command Processor - Encoding Functions &gt; detectEncodingFromBuffer &gt; should return null when chardet returns non-string" time="0.0002845">
        </testcase>
        <testcase classname="src/utils/systemEncoding.test.ts" name="Shell Command Processor - Encoding Functions &gt; getSystemEncoding - Windows &gt; should parse Windows chcp output correctly" time="0.0007837">
        </testcase>
        <testcase classname="src/utils/systemEncoding.test.ts" name="Shell Command Processor - Encoding Functions &gt; getSystemEncoding - Windows &gt; should handle different chcp output formats" time="0.0002364">
        </testcase>
        <testcase classname="src/utils/systemEncoding.test.ts" name="Shell Command Processor - Encoding Functions &gt; getSystemEncoding - Windows &gt; should handle chcp output with extra whitespace" time="0.0001734">
        </testcase>
        <testcase classname="src/utils/systemEncoding.test.ts" name="Shell Command Processor - Encoding Functions &gt; getSystemEncoding - Windows &gt; should return null when chcp command fails" time="0.0005889">
        </testcase>
        <testcase classname="src/utils/systemEncoding.test.ts" name="Shell Command Processor - Encoding Functions &gt; getSystemEncoding - Windows &gt; should return null when chcp output cannot be parsed" time="0.0002714">
        </testcase>
        <testcase classname="src/utils/systemEncoding.test.ts" name="Shell Command Processor - Encoding Functions &gt; getSystemEncoding - Windows &gt; should return null when code page is not a number" time="0.0004796">
        </testcase>
        <testcase classname="src/utils/systemEncoding.test.ts" name="Shell Command Processor - Encoding Functions &gt; getSystemEncoding - Windows &gt; should return null when code page maps to null" time="0.0007473">
        </testcase>
        <testcase classname="src/utils/systemEncoding.test.ts" name="Shell Command Processor - Encoding Functions &gt; getSystemEncoding - Unix-like &gt; should parse locale from LC_ALL environment variable" time="0.0004055">
        </testcase>
        <testcase classname="src/utils/systemEncoding.test.ts" name="Shell Command Processor - Encoding Functions &gt; getSystemEncoding - Unix-like &gt; should parse locale from LC_CTYPE when LC_ALL is not set" time="0.0003054">
        </testcase>
        <testcase classname="src/utils/systemEncoding.test.ts" name="Shell Command Processor - Encoding Functions &gt; getSystemEncoding - Unix-like &gt; should parse locale from LANG when LC_ALL and LC_CTYPE are not set" time="0.000238">
        </testcase>
        <testcase classname="src/utils/systemEncoding.test.ts" name="Shell Command Processor - Encoding Functions &gt; getSystemEncoding - Unix-like &gt; should handle locale charmap command when environment variables are empty" time="0.0003454">
        </testcase>
        <testcase classname="src/utils/systemEncoding.test.ts" name="Shell Command Processor - Encoding Functions &gt; getSystemEncoding - Unix-like &gt; should handle locale charmap with mixed case" time="0.0002088">
        </testcase>
        <testcase classname="src/utils/systemEncoding.test.ts" name="Shell Command Processor - Encoding Functions &gt; getSystemEncoding - Unix-like &gt; should return null when locale charmap fails" time="0.00028">
        </testcase>
        <testcase classname="src/utils/systemEncoding.test.ts" name="Shell Command Processor - Encoding Functions &gt; getSystemEncoding - Unix-like &gt; should handle locale without encoding (no dot)" time="0.0002137">
        </testcase>
        <testcase classname="src/utils/systemEncoding.test.ts" name="Shell Command Processor - Encoding Functions &gt; getSystemEncoding - Unix-like &gt; should handle empty locale environment variables" time="0.0003501">
        </testcase>
        <testcase classname="src/utils/systemEncoding.test.ts" name="Shell Command Processor - Encoding Functions &gt; getSystemEncoding - Unix-like &gt; should return locale as-is when locale format has no dot" time="0.0013864">
        </testcase>
        <testcase classname="src/utils/systemEncoding.test.ts" name="Shell Command Processor - Encoding Functions &gt; getSystemEncoding - Unix-like &gt; should prioritize LC_ALL over other environment variables" time="0.0002766">
        </testcase>
        <testcase classname="src/utils/systemEncoding.test.ts" name="Shell Command Processor - Encoding Functions &gt; getSystemEncoding - Unix-like &gt; should prioritize LC_CTYPE over LANG" time="0.0002373">
        </testcase>
        <testcase classname="src/utils/systemEncoding.test.ts" name="Shell Command Processor - Encoding Functions &gt; getEncodingForBuffer &gt; should use cached system encoding on subsequent calls" time="0.0002945">
        </testcase>
        <testcase classname="src/utils/systemEncoding.test.ts" name="Shell Command Processor - Encoding Functions &gt; getEncodingForBuffer &gt; should fall back to buffer detection when system encoding fails" time="0.0003638">
        </testcase>
        <testcase classname="src/utils/systemEncoding.test.ts" name="Shell Command Processor - Encoding Functions &gt; getEncodingForBuffer &gt; should fall back to utf-8 when both system and buffer detection fail" time="0.000238">
        </testcase>
        <testcase classname="src/utils/systemEncoding.test.ts" name="Shell Command Processor - Encoding Functions &gt; getEncodingForBuffer &gt; should not cache buffer detection results" time="0.0005409">
        </testcase>
        <testcase classname="src/utils/systemEncoding.test.ts" name="Shell Command Processor - Encoding Functions &gt; getEncodingForBuffer &gt; should handle Windows system encoding" time="0.0001912">
        </testcase>
        <testcase classname="src/utils/systemEncoding.test.ts" name="Shell Command Processor - Encoding Functions &gt; getEncodingForBuffer &gt; should cache null system encoding result" time="0.0002908">
        </testcase>
        <testcase classname="src/utils/systemEncoding.test.ts" name="Shell Command Processor - Encoding Functions &gt; Cross-platform behavior &gt; should work correctly on macOS" time="0.0002016">
        </testcase>
        <testcase classname="src/utils/systemEncoding.test.ts" name="Shell Command Processor - Encoding Functions &gt; Cross-platform behavior &gt; should work correctly on other Unix-like systems" time="0.0001936">
        </testcase>
        <testcase classname="src/utils/systemEncoding.test.ts" name="Shell Command Processor - Encoding Functions &gt; Cross-platform behavior &gt; should handle unknown platforms as Unix-like" time="0.0002075">
        </testcase>
        <testcase classname="src/utils/systemEncoding.test.ts" name="Shell Command Processor - Encoding Functions &gt; Edge cases and error handling &gt; should handle empty buffer gracefully" time="0.0006315">
        </testcase>
        <testcase classname="src/utils/systemEncoding.test.ts" name="Shell Command Processor - Encoding Functions &gt; Edge cases and error handling &gt; should handle very large buffers" time="0.001057">
        </testcase>
        <testcase classname="src/utils/systemEncoding.test.ts" name="Shell Command Processor - Encoding Functions &gt; Edge cases and error handling &gt; should handle Unicode content" time="0.0003273">
        </testcase>
    </testsuite>
    <testsuite name="src/utils/terminalSerializer.test.ts" timestamp="2025-09-23T13:26:52.258Z" hostname="WIN-33AANMPCPKN" tests="16" failures="0" errors="0" skipped="0" time="0.1836778">
        <testcase classname="src/utils/terminalSerializer.test.ts" name="terminalSerializer &gt; serializeTerminalToObject &gt; should handle an empty terminal" time="0.0144028">
        </testcase>
        <testcase classname="src/utils/terminalSerializer.test.ts" name="terminalSerializer &gt; serializeTerminalToObject &gt; should serialize a single line of text" time="0.014124">
        </testcase>
        <testcase classname="src/utils/terminalSerializer.test.ts" name="terminalSerializer &gt; serializeTerminalToObject &gt; should serialize multiple lines of text" time="0.0105602">
        </testcase>
        <testcase classname="src/utils/terminalSerializer.test.ts" name="terminalSerializer &gt; serializeTerminalToObject &gt; should handle bold text" time="0.0224301">
        </testcase>
        <testcase classname="src/utils/terminalSerializer.test.ts" name="terminalSerializer &gt; serializeTerminalToObject &gt; should handle italic text" time="0.0118848">
        </testcase>
        <testcase classname="src/utils/terminalSerializer.test.ts" name="terminalSerializer &gt; serializeTerminalToObject &gt; should handle underlined text" time="0.0179957">
        </testcase>
        <testcase classname="src/utils/terminalSerializer.test.ts" name="terminalSerializer &gt; serializeTerminalToObject &gt; should handle dim text" time="0.0323062">
        </testcase>
        <testcase classname="src/utils/terminalSerializer.test.ts" name="terminalSerializer &gt; serializeTerminalToObject &gt; should handle inverse text" time="0.012041">
        </testcase>
        <testcase classname="src/utils/terminalSerializer.test.ts" name="terminalSerializer &gt; serializeTerminalToObject &gt; should handle foreground colors" time="0.0153062">
        </testcase>
        <testcase classname="src/utils/terminalSerializer.test.ts" name="terminalSerializer &gt; serializeTerminalToObject &gt; should handle background colors" time="0.0052402">
        </testcase>
        <testcase classname="src/utils/terminalSerializer.test.ts" name="terminalSerializer &gt; serializeTerminalToObject &gt; should handle RGB colors" time="0.0112072">
        </testcase>
        <testcase classname="src/utils/terminalSerializer.test.ts" name="terminalSerializer &gt; serializeTerminalToObject &gt; should handle a combination of styles" time="0.0138079">
        </testcase>
        <testcase classname="src/utils/terminalSerializer.test.ts" name="terminalSerializer &gt; convertColorToHex &gt; should convert RGB color to hex" time="0.0001295">
        </testcase>
        <testcase classname="src/utils/terminalSerializer.test.ts" name="terminalSerializer &gt; convertColorToHex &gt; should convert palette color to hex" time="0.0000751">
        </testcase>
        <testcase classname="src/utils/terminalSerializer.test.ts" name="terminalSerializer &gt; convertColorToHex &gt; should return default color for ColorMode.DEFAULT" time="0.0000631">
        </testcase>
        <testcase classname="src/utils/terminalSerializer.test.ts" name="terminalSerializer &gt; convertColorToHex &gt; should return default color for invalid palette index" time="0.0000625">
        </testcase>
    </testsuite>
    <testsuite name="src/utils/textUtils.test.ts" timestamp="2025-09-23T13:26:52.260Z" hostname="WIN-33AANMPCPKN" tests="12" failures="0" errors="0" skipped="0" time="0.0037182">
        <testcase classname="src/utils/textUtils.test.ts" name="safeLiteralReplace &gt; returns original string when oldString empty or not found" time="0.0013394">
        </testcase>
        <testcase classname="src/utils/textUtils.test.ts" name="safeLiteralReplace &gt; fast path when newString has no $" time="0.0001106">
        </testcase>
        <testcase classname="src/utils/textUtils.test.ts" name="safeLiteralReplace &gt; treats $ literally" time="0.0000747">
        </testcase>
        <testcase classname="src/utils/textUtils.test.ts" name="safeLiteralReplace &gt; does not interpret replacement patterns like $&amp;, $&apos;, $` and $1" time="0.000109">
        </testcase>
        <testcase classname="src/utils/textUtils.test.ts" name="safeLiteralReplace &gt; preserves end-of-line $ in regex-like text" time="0.0000697">
        </testcase>
        <testcase classname="src/utils/textUtils.test.ts" name="safeLiteralReplace &gt; handles multiple $ characters" time="0.0000592">
        </testcase>
        <testcase classname="src/utils/textUtils.test.ts" name="safeLiteralReplace &gt; preserves pre-escaped $$ literally" time="0.0000563">
        </testcase>
        <testcase classname="src/utils/textUtils.test.ts" name="safeLiteralReplace &gt; handles complex malicious patterns from PR #7871" time="0.0000608">
        </testcase>
        <testcase classname="src/utils/textUtils.test.ts" name="safeLiteralReplace &gt; handles multiple replacements correctly" time="0.0000599">
        </testcase>
        <testcase classname="src/utils/textUtils.test.ts" name="safeLiteralReplace &gt; preserves $ at different positions" time="0.0000966">
        </testcase>
        <testcase classname="src/utils/textUtils.test.ts" name="safeLiteralReplace &gt; handles edge case with $$$$" time="0.0000556">
        </testcase>
        <testcase classname="src/utils/textUtils.test.ts" name="safeLiteralReplace &gt; handles newString with only dollar signs" time="0.0000531">
        </testcase>
    </testsuite>
    <testsuite name="src/utils/tool-utils.test.ts" timestamp="2025-09-23T13:26:52.261Z" hostname="WIN-33AANMPCPKN" tests="7" failures="0" errors="0" skipped="0" time="0.0029073">
        <testcase classname="src/utils/tool-utils.test.ts" name="doesToolInvocationMatch &gt; should not match a partial command prefix" time="0.0013073">
        </testcase>
        <testcase classname="src/utils/tool-utils.test.ts" name="doesToolInvocationMatch &gt; should match an exact command" time="0.000118">
        </testcase>
        <testcase classname="src/utils/tool-utils.test.ts" name="doesToolInvocationMatch &gt; should match a command that is a prefix" time="0.0000858">
        </testcase>
        <testcase classname="src/utils/tool-utils.test.ts" name="doesToolInvocationMatch &gt; for non-shell tools &gt; should match by tool name" time="0.0000839">
        </testcase>
        <testcase classname="src/utils/tool-utils.test.ts" name="doesToolInvocationMatch &gt; for non-shell tools &gt; should match by tool class name" time="0.0000722">
        </testcase>
        <testcase classname="src/utils/tool-utils.test.ts" name="doesToolInvocationMatch &gt; for non-shell tools &gt; should not match if neither name is in the patterns" time="0.0000638">
        </testcase>
        <testcase classname="src/utils/tool-utils.test.ts" name="doesToolInvocationMatch &gt; for non-shell tools &gt; should match by tool name when passed as a string" time="0.0000617">
        </testcase>
    </testsuite>
    <testsuite name="src/utils/userAccountManager.test.ts" timestamp="2025-09-23T13:26:52.262Z" hostname="WIN-33AANMPCPKN" tests="23" failures="0" errors="0" skipped="0" time="0.054716">
        <testcase classname="src/utils/userAccountManager.test.ts" name="UserAccountManager &gt; cacheGoogleAccount &gt; should create directory and write initial account file" time="0.0117791">
        </testcase>
        <testcase classname="src/utils/userAccountManager.test.ts" name="UserAccountManager &gt; cacheGoogleAccount &gt; should update active account and move previous to old" time="0.003132">
        </testcase>
        <testcase classname="src/utils/userAccountManager.test.ts" name="UserAccountManager &gt; cacheGoogleAccount &gt; should not add a duplicate to the old list" time="0.002796">
        </testcase>
        <testcase classname="src/utils/userAccountManager.test.ts" name="UserAccountManager &gt; cacheGoogleAccount &gt; should handle corrupted JSON by starting fresh" time="0.0037595">
        </testcase>
        <testcase classname="src/utils/userAccountManager.test.ts" name="UserAccountManager &gt; cacheGoogleAccount &gt; should handle valid JSON with incorrect schema by starting fresh" time="0.0048564">
        </testcase>
        <testcase classname="src/utils/userAccountManager.test.ts" name="UserAccountManager &gt; getCachedGoogleAccount &gt; should return the active account if file exists and is valid" time="0.0018111">
        </testcase>
        <testcase classname="src/utils/userAccountManager.test.ts" name="UserAccountManager &gt; getCachedGoogleAccount &gt; should return null if file does not exist" time="0.0006079">
        </testcase>
        <testcase classname="src/utils/userAccountManager.test.ts" name="UserAccountManager &gt; getCachedGoogleAccount &gt; should return null if file is empty" time="0.0012079">
        </testcase>
        <testcase classname="src/utils/userAccountManager.test.ts" name="UserAccountManager &gt; getCachedGoogleAccount &gt; should return null and log if file is corrupted" time="0.0013903">
        </testcase>
        <testcase classname="src/utils/userAccountManager.test.ts" name="UserAccountManager &gt; getCachedGoogleAccount &gt; should return null if active key is missing" time="0.0013806">
        </testcase>
        <testcase classname="src/utils/userAccountManager.test.ts" name="UserAccountManager &gt; clearCachedGoogleAccount &gt; should set active to null and move it to old" time="0.0023174">
        </testcase>
        <testcase classname="src/utils/userAccountManager.test.ts" name="UserAccountManager &gt; clearCachedGoogleAccount &gt; should handle empty file gracefully" time="0.0022408">
        </testcase>
        <testcase classname="src/utils/userAccountManager.test.ts" name="UserAccountManager &gt; clearCachedGoogleAccount &gt; should handle corrupted JSON by creating a fresh file" time="0.0023165">
        </testcase>
        <testcase classname="src/utils/userAccountManager.test.ts" name="UserAccountManager &gt; clearCachedGoogleAccount &gt; should be idempotent if active account is already null" time="0.0023619">
        </testcase>
        <testcase classname="src/utils/userAccountManager.test.ts" name="UserAccountManager &gt; clearCachedGoogleAccount &gt; should not add a duplicate to the old list" time="0.0019837">
        </testcase>
        <testcase classname="src/utils/userAccountManager.test.ts" name="UserAccountManager &gt; getLifetimeGoogleAccounts &gt; should return 0 if the file does not exist" time="0.0004984">
        </testcase>
        <testcase classname="src/utils/userAccountManager.test.ts" name="UserAccountManager &gt; getLifetimeGoogleAccounts &gt; should return 0 if the file is empty" time="0.0011078">
        </testcase>
        <testcase classname="src/utils/userAccountManager.test.ts" name="UserAccountManager &gt; getLifetimeGoogleAccounts &gt; should return 0 if the file is corrupted" time="0.0014215">
        </testcase>
        <testcase classname="src/utils/userAccountManager.test.ts" name="UserAccountManager &gt; getLifetimeGoogleAccounts &gt; should return 1 if there is only an active account" time="0.0011711">
        </testcase>
        <testcase classname="src/utils/userAccountManager.test.ts" name="UserAccountManager &gt; getLifetimeGoogleAccounts &gt; should correctly count old accounts when active is null" time="0.0010581">
        </testcase>
        <testcase classname="src/utils/userAccountManager.test.ts" name="UserAccountManager &gt; getLifetimeGoogleAccounts &gt; should correctly count both active and old accounts" time="0.0011001">
        </testcase>
        <testcase classname="src/utils/userAccountManager.test.ts" name="UserAccountManager &gt; getLifetimeGoogleAccounts &gt; should handle valid JSON with incorrect schema by returning 0" time="0.0012497">
        </testcase>
        <testcase classname="src/utils/userAccountManager.test.ts" name="UserAccountManager &gt; getLifetimeGoogleAccounts &gt; should not double count if active account is also in old list" time="0.0016085">
        </testcase>
    </testsuite>
    <testsuite name="src/utils/workspaceContext.test.ts" timestamp="2025-09-23T13:26:52.265Z" hostname="WIN-33AANMPCPKN" tests="34" failures="0" errors="0" skipped="0" time="0.1402478">
        <testcase classname="src/utils/workspaceContext.test.ts" name="WorkspaceContext with real filesystem &gt; initialization &gt; should initialize with a single directory (cwd)" time="0.0068772">
        </testcase>
        <testcase classname="src/utils/workspaceContext.test.ts" name="WorkspaceContext with real filesystem &gt; initialization &gt; should validate and resolve directories to absolute paths" time="0.0021625">
        </testcase>
        <testcase classname="src/utils/workspaceContext.test.ts" name="WorkspaceContext with real filesystem &gt; initialization &gt; should handle empty initialization" time="0.0025889">
        </testcase>
        <testcase classname="src/utils/workspaceContext.test.ts" name="WorkspaceContext with real filesystem &gt; adding directories &gt; should add valid directories" time="0.0016273">
        </testcase>
        <testcase classname="src/utils/workspaceContext.test.ts" name="WorkspaceContext with real filesystem &gt; adding directories &gt; should resolve relative paths to absolute" time="0.0021196">
        </testcase>
        <testcase classname="src/utils/workspaceContext.test.ts" name="WorkspaceContext with real filesystem &gt; adding directories &gt; should prevent duplicate directories" time="0.002292">
        </testcase>
        <testcase classname="src/utils/workspaceContext.test.ts" name="WorkspaceContext with real filesystem &gt; adding directories &gt; should handle symbolic links correctly" time="0.0039145">
        </testcase>
        <testcase classname="src/utils/workspaceContext.test.ts" name="WorkspaceContext with real filesystem &gt; path validation &gt; should accept paths within workspace directories" time="0.0053922">
        </testcase>
        <testcase classname="src/utils/workspaceContext.test.ts" name="WorkspaceContext with real filesystem &gt; path validation &gt; should accept non-existent paths within workspace directories" time="0.0036724">
        </testcase>
        <testcase classname="src/utils/workspaceContext.test.ts" name="WorkspaceContext with real filesystem &gt; path validation &gt; should reject paths outside workspace" time="0.0020752">
        </testcase>
        <testcase classname="src/utils/workspaceContext.test.ts" name="WorkspaceContext with real filesystem &gt; path validation &gt; should reject non-existent paths outside workspace" time="0.0027501">
        </testcase>
        <testcase classname="src/utils/workspaceContext.test.ts" name="WorkspaceContext with real filesystem &gt; path validation &gt; should handle nested directories correctly" time="0.0022733">
        </testcase>
        <testcase classname="src/utils/workspaceContext.test.ts" name="WorkspaceContext with real filesystem &gt; path validation &gt; should handle edge cases (root, parent references)" time="0.0048253">
        </testcase>
        <testcase classname="src/utils/workspaceContext.test.ts" name="WorkspaceContext with real filesystem &gt; path validation &gt; should handle non-existent paths correctly" time="0.0018781">
        </testcase>
        <testcase classname="src/utils/workspaceContext.test.ts" name="WorkspaceContext with real filesystem &gt; path validation &gt; with symbolic link &gt; in the workspace &gt; should accept dir paths" time="0.0047553">
        </testcase>
        <testcase classname="src/utils/workspaceContext.test.ts" name="WorkspaceContext with real filesystem &gt; path validation &gt; with symbolic link &gt; in the workspace &gt; should accept non-existent paths" time="0.0027308">
        </testcase>
        <testcase classname="src/utils/workspaceContext.test.ts" name="WorkspaceContext with real filesystem &gt; path validation &gt; with symbolic link &gt; in the workspace &gt; should accept non-existent deep paths" time="0.0023197">
        </testcase>
        <testcase classname="src/utils/workspaceContext.test.ts" name="WorkspaceContext with real filesystem &gt; path validation &gt; with symbolic link &gt; outside the workspace &gt; should reject dir paths" time="0.0088495">
        </testcase>
        <testcase classname="src/utils/workspaceContext.test.ts" name="WorkspaceContext with real filesystem &gt; path validation &gt; with symbolic link &gt; outside the workspace &gt; should reject non-existent paths" time="0.0043528">
        </testcase>
        <testcase classname="src/utils/workspaceContext.test.ts" name="WorkspaceContext with real filesystem &gt; path validation &gt; with symbolic link &gt; outside the workspace &gt; should reject non-existent deep paths" time="0.0026189">
        </testcase>
        <testcase classname="src/utils/workspaceContext.test.ts" name="WorkspaceContext with real filesystem &gt; path validation &gt; with symbolic link &gt; outside the workspace &gt; should reject partially non-existent deep paths" time="0.0047557">
        </testcase>
        <testcase classname="src/utils/workspaceContext.test.ts" name="WorkspaceContext with real filesystem &gt; path validation &gt; with symbolic link &gt; should reject symbolic file links outside the workspace" time="0.0042531">
        </testcase>
        <testcase classname="src/utils/workspaceContext.test.ts" name="WorkspaceContext with real filesystem &gt; path validation &gt; with symbolic link &gt; should reject non-existent symbolic file links outside the workspace" time="0.0026903">
        </testcase>
        <testcase classname="src/utils/workspaceContext.test.ts" name="WorkspaceContext with real filesystem &gt; path validation &gt; with symbolic link &gt; should handle circular symlinks gracefully" time="0.0087112">
        </testcase>
        <testcase classname="src/utils/workspaceContext.test.ts" name="WorkspaceContext with real filesystem &gt; onDirectoriesChanged &gt; should call listener when adding a directory" time="0.00311">
        </testcase>
        <testcase classname="src/utils/workspaceContext.test.ts" name="WorkspaceContext with real filesystem &gt; onDirectoriesChanged &gt; should not call listener when adding a duplicate directory" time="0.0029456">
        </testcase>
        <testcase classname="src/utils/workspaceContext.test.ts" name="WorkspaceContext with real filesystem &gt; onDirectoriesChanged &gt; should call listener when setting different directories" time="0.0072525">
        </testcase>
        <testcase classname="src/utils/workspaceContext.test.ts" name="WorkspaceContext with real filesystem &gt; onDirectoriesChanged &gt; should not call listener when setting same directories" time="0.0029781">
        </testcase>
        <testcase classname="src/utils/workspaceContext.test.ts" name="WorkspaceContext with real filesystem &gt; onDirectoriesChanged &gt; should support multiple listeners" time="0.0056787">
        </testcase>
        <testcase classname="src/utils/workspaceContext.test.ts" name="WorkspaceContext with real filesystem &gt; onDirectoriesChanged &gt; should allow unsubscribing a listener" time="0.0032214">
        </testcase>
        <testcase classname="src/utils/workspaceContext.test.ts" name="WorkspaceContext with real filesystem &gt; onDirectoriesChanged &gt; should not fail if a listener throws an error" time="0.0137022">
            <system-err>
Error in WorkspaceContext listener: Error: test error
    at errorListener [90m(E:\claude-code\pipedream\modelcontextprotocol\agentrpc\gemini-cli\packages\core\[39msrc\utils\workspaceContext.test.ts:350:15[90m)[39m
    at WorkspaceContext.notifyDirectoriesChanged [90m(E:\claude-code\pipedream\modelcontextprotocol\agentrpc\gemini-cli\packages\core\[39msrc\utils\workspaceContext.ts:53:9[90m)[39m
    at WorkspaceContext.addDirectory [90m(E:\claude-code\pipedream\modelcontextprotocol\agentrpc\gemini-cli\packages\core\[39msrc\utils\workspaceContext.ts:73:12[90m)[39m
    at [90mE:\claude-code\pipedream\modelcontextprotocol\agentrpc\gemini-cli\packages\core\[39msrc\utils\workspaceContext.test.ts:357:26
    at Proxy.assertThrows (file:///E:/claude-code/pipedream/modelcontextprotocol/agentrpc/gemini-cli/node_modules/[4mchai[24m/index.js:2767:5)
    at Proxy.methodWrapper (file:///E:/claude-code/pipedream/modelcontextprotocol/agentrpc/gemini-cli/node_modules/[4mchai[24m/index.js:1686:25)
    at Proxy.&lt;anonymous&gt; (file:///E:/claude-code/pipedream/modelcontextprotocol/agentrpc/gemini-cli/node_modules/[4m@vitest[24m/expect/dist/index.js:1088:12)
    at Proxy.overwritingMethodWrapper (file:///E:/claude-code/pipedream/modelcontextprotocol/agentrpc/gemini-cli/node_modules/[4mchai[24m/index.js:1735:33)
    at Proxy.&lt;anonymous&gt; (file:///E:/claude-code/pipedream/modelcontextprotocol/agentrpc/gemini-cli/node_modules/[4m@vitest[24m/expect/dist/index.js:1420:16)
    at Proxy.&lt;anonymous&gt; (file:///E:/claude-code/pipedream/modelcontextprotocol/agentrpc/gemini-cli/node_modules/[4m@vitest[24m/expect/dist/index.js:1029:14)

            </system-err>
        </testcase>
        <testcase classname="src/utils/workspaceContext.test.ts" name="WorkspaceContext with real filesystem &gt; getDirectories &gt; should return a copy of directories array" time="0.0029112">
        </testcase>
        <testcase classname="src/utils/workspaceContext.test.ts" name="WorkspaceContext with optional directories &gt; should skip a missing optional directory and log a warning" time="0.0032881">
        </testcase>
        <testcase classname="src/utils/workspaceContext.test.ts" name="WorkspaceContext with optional directories &gt; should include an existing optional directory" time="0.0023313">
        </testcase>
    </testsuite>
    <testsuite name="src/mcp/token-storage/base-token-storage.test.ts" timestamp="2025-09-23T13:26:52.268Z" hostname="WIN-33AANMPCPKN" tests="12" failures="0" errors="0" skipped="0" time="0.0054231">
        <testcase classname="src/mcp/token-storage/base-token-storage.test.ts" name="BaseTokenStorage &gt; validateCredentials &gt; should validate valid credentials" time="0.0022797">
        </testcase>
        <testcase classname="src/mcp/token-storage/base-token-storage.test.ts" name="BaseTokenStorage &gt; validateCredentials &gt; should throw for missing server name" time="0.0002637">
        </testcase>
        <testcase classname="src/mcp/token-storage/base-token-storage.test.ts" name="BaseTokenStorage &gt; validateCredentials &gt; should throw for missing token" time="0.0001512">
        </testcase>
        <testcase classname="src/mcp/token-storage/base-token-storage.test.ts" name="BaseTokenStorage &gt; validateCredentials &gt; should throw for missing access token" time="0.0001358">
        </testcase>
        <testcase classname="src/mcp/token-storage/base-token-storage.test.ts" name="BaseTokenStorage &gt; validateCredentials &gt; should throw for missing token type" time="0.0001232">
        </testcase>
        <testcase classname="src/mcp/token-storage/base-token-storage.test.ts" name="BaseTokenStorage &gt; isTokenExpired &gt; should return false for tokens without expiry" time="0.0002068">
        </testcase>
        <testcase classname="src/mcp/token-storage/base-token-storage.test.ts" name="BaseTokenStorage &gt; isTokenExpired &gt; should return false for valid tokens" time="0.0001155">
        </testcase>
        <testcase classname="src/mcp/token-storage/base-token-storage.test.ts" name="BaseTokenStorage &gt; isTokenExpired &gt; should return true for expired tokens" time="0.000085">
        </testcase>
        <testcase classname="src/mcp/token-storage/base-token-storage.test.ts" name="BaseTokenStorage &gt; isTokenExpired &gt; should apply 5-minute buffer for expiry check" time="0.0000841">
        </testcase>
        <testcase classname="src/mcp/token-storage/base-token-storage.test.ts" name="BaseTokenStorage &gt; sanitizeServerName &gt; should keep valid characters" time="0.0001467">
        </testcase>
        <testcase classname="src/mcp/token-storage/base-token-storage.test.ts" name="BaseTokenStorage &gt; sanitizeServerName &gt; should replace invalid characters with underscore" time="0.0001256">
        </testcase>
        <testcase classname="src/mcp/token-storage/base-token-storage.test.ts" name="BaseTokenStorage &gt; sanitizeServerName &gt; should handle special characters" time="0.0000931">
        </testcase>
    </testsuite>
    <testsuite name="src/mcp/token-storage/file-token-storage.test.ts" timestamp="2025-09-23T13:26:52.270Z" hostname="WIN-33AANMPCPKN" tests="16" failures="0" errors="0" skipped="0" time="2.0175528">
        <testcase classname="src/mcp/token-storage/file-token-storage.test.ts" name="FileTokenStorage &gt; getCredentials &gt; should throw error when file does not exist" time="0.0559698">
        </testcase>
        <testcase classname="src/mcp/token-storage/file-token-storage.test.ts" name="FileTokenStorage &gt; getCredentials &gt; should return null for expired tokens" time="0.0675699">
        </testcase>
        <testcase classname="src/mcp/token-storage/file-token-storage.test.ts" name="FileTokenStorage &gt; getCredentials &gt; should return credentials for valid tokens" time="0.2435559">
        </testcase>
        <testcase classname="src/mcp/token-storage/file-token-storage.test.ts" name="FileTokenStorage &gt; getCredentials &gt; should throw error for corrupted files" time="0.0862993">
        </testcase>
        <testcase classname="src/mcp/token-storage/file-token-storage.test.ts" name="FileTokenStorage &gt; setCredentials &gt; should save credentials with encryption" time="0.1609688">
        </testcase>
        <testcase classname="src/mcp/token-storage/file-token-storage.test.ts" name="FileTokenStorage &gt; setCredentials &gt; should update existing credentials" time="0.1077537">
        </testcase>
        <testcase classname="src/mcp/token-storage/file-token-storage.test.ts" name="FileTokenStorage &gt; deleteCredentials &gt; should throw when credentials do not exist" time="0.1526393">
        </testcase>
        <testcase classname="src/mcp/token-storage/file-token-storage.test.ts" name="FileTokenStorage &gt; deleteCredentials &gt; should delete file when last credential is removed" time="0.1002089">
        </testcase>
        <testcase classname="src/mcp/token-storage/file-token-storage.test.ts" name="FileTokenStorage &gt; deleteCredentials &gt; should update file when other credentials remain" time="0.1545437">
        </testcase>
        <testcase classname="src/mcp/token-storage/file-token-storage.test.ts" name="FileTokenStorage &gt; listServers &gt; should throw error when file does not exist" time="0.0977258">
        </testcase>
        <testcase classname="src/mcp/token-storage/file-token-storage.test.ts" name="FileTokenStorage &gt; listServers &gt; should return list of server names" time="0.2479439">
        </testcase>
        <testcase classname="src/mcp/token-storage/file-token-storage.test.ts" name="FileTokenStorage &gt; clearAll &gt; should delete the token file" time="0.1049975">
        </testcase>
        <testcase classname="src/mcp/token-storage/file-token-storage.test.ts" name="FileTokenStorage &gt; clearAll &gt; should not throw when file does not exist" time="0.1158416">
        </testcase>
        <testcase classname="src/mcp/token-storage/file-token-storage.test.ts" name="FileTokenStorage &gt; encryption &gt; should encrypt and decrypt data correctly" time="0.0942529">
        </testcase>
        <testcase classname="src/mcp/token-storage/file-token-storage.test.ts" name="FileTokenStorage &gt; encryption &gt; should produce different encrypted output each time" time="0.1479833">
        </testcase>
        <testcase classname="src/mcp/token-storage/file-token-storage.test.ts" name="FileTokenStorage &gt; encryption &gt; should throw on invalid encrypted data format" time="0.0776692">
        </testcase>
    </testsuite>
    <testsuite name="src/mcp/token-storage/hybrid-token-storage.test.ts" timestamp="2025-09-23T13:26:52.271Z" hostname="WIN-33AANMPCPKN" tests="11" failures="0" errors="0" skipped="0" time="0.0207611">
        <testcase classname="src/mcp/token-storage/hybrid-token-storage.test.ts" name="HybridTokenStorage &gt; storage selection &gt; should use keychain when available" time="0.0048892">
        </testcase>
        <testcase classname="src/mcp/token-storage/hybrid-token-storage.test.ts" name="HybridTokenStorage &gt; storage selection &gt; should use file storage when GEMINI_FORCE_FILE_STORAGE is set" time="0.0012637">
        </testcase>
        <testcase classname="src/mcp/token-storage/hybrid-token-storage.test.ts" name="HybridTokenStorage &gt; storage selection &gt; should fall back to file storage when keychain is unavailable" time="0.0013567">
        </testcase>
        <testcase classname="src/mcp/token-storage/hybrid-token-storage.test.ts" name="HybridTokenStorage &gt; storage selection &gt; should fall back to file storage when keychain throws error" time="0.0011891">
        </testcase>
        <testcase classname="src/mcp/token-storage/hybrid-token-storage.test.ts" name="HybridTokenStorage &gt; storage selection &gt; should cache storage selection" time="0.0010034">
        </testcase>
        <testcase classname="src/mcp/token-storage/hybrid-token-storage.test.ts" name="HybridTokenStorage &gt; getCredentials &gt; should delegate to selected storage" time="0.0013209">
        </testcase>
        <testcase classname="src/mcp/token-storage/hybrid-token-storage.test.ts" name="HybridTokenStorage &gt; setCredentials &gt; should delegate to selected storage" time="0.0028257">
        </testcase>
        <testcase classname="src/mcp/token-storage/hybrid-token-storage.test.ts" name="HybridTokenStorage &gt; deleteCredentials &gt; should delegate to selected storage" time="0.0012331">
        </testcase>
        <testcase classname="src/mcp/token-storage/hybrid-token-storage.test.ts" name="HybridTokenStorage &gt; listServers &gt; should delegate to selected storage" time="0.0013347">
        </testcase>
        <testcase classname="src/mcp/token-storage/hybrid-token-storage.test.ts" name="HybridTokenStorage &gt; getAllCredentials &gt; should delegate to selected storage" time="0.0013632">
        </testcase>
        <testcase classname="src/mcp/token-storage/hybrid-token-storage.test.ts" name="HybridTokenStorage &gt; clearAll &gt; should delegate to selected storage" time="0.0011148">
        </testcase>
    </testsuite>
    <testsuite name="src/mcp/token-storage/keychain-token-storage.test.ts" timestamp="2025-09-23T13:26:52.272Z" hostname="WIN-33AANMPCPKN" tests="24" failures="0" errors="0" skipped="0" time="0.0935474">
        <testcase classname="src/mcp/token-storage/keychain-token-storage.test.ts" name="KeychainTokenStorage &gt; checkKeychainAvailability &gt; should return true if keytar is available and functional" time="0.0287709">
        </testcase>
        <testcase classname="src/mcp/token-storage/keychain-token-storage.test.ts" name="KeychainTokenStorage &gt; checkKeychainAvailability &gt; should return false if keytar fails to set password" time="0.0023746">
        </testcase>
        <testcase classname="src/mcp/token-storage/keychain-token-storage.test.ts" name="KeychainTokenStorage &gt; checkKeychainAvailability &gt; should return false if retrieved password does not match" time="0.0016585">
        </testcase>
        <testcase classname="src/mcp/token-storage/keychain-token-storage.test.ts" name="KeychainTokenStorage &gt; checkKeychainAvailability &gt; should cache the availability result" time="0.0017745">
        </testcase>
        <testcase classname="src/mcp/token-storage/keychain-token-storage.test.ts" name="KeychainTokenStorage &gt; with keychain unavailable &gt; getCredentials should throw" time="0.0049341">
        </testcase>
        <testcase classname="src/mcp/token-storage/keychain-token-storage.test.ts" name="KeychainTokenStorage &gt; with keychain unavailable &gt; setCredentials should throw" time="0.0022664">
        </testcase>
        <testcase classname="src/mcp/token-storage/keychain-token-storage.test.ts" name="KeychainTokenStorage &gt; with keychain unavailable &gt; deleteCredentials should throw" time="0.0021189">
        </testcase>
        <testcase classname="src/mcp/token-storage/keychain-token-storage.test.ts" name="KeychainTokenStorage &gt; with keychain unavailable &gt; listServers should throw" time="0.0018807">
        </testcase>
        <testcase classname="src/mcp/token-storage/keychain-token-storage.test.ts" name="KeychainTokenStorage &gt; with keychain unavailable &gt; getAllCredentials should throw" time="0.00192">
        </testcase>
        <testcase classname="src/mcp/token-storage/keychain-token-storage.test.ts" name="KeychainTokenStorage &gt; with keychain available &gt; getCredentials &gt; should return null if no credentials are found" time="0.001973">
        </testcase>
        <testcase classname="src/mcp/token-storage/keychain-token-storage.test.ts" name="KeychainTokenStorage &gt; with keychain available &gt; getCredentials &gt; should return credentials if found and not expired" time="0.0019548">
        </testcase>
        <testcase classname="src/mcp/token-storage/keychain-token-storage.test.ts" name="KeychainTokenStorage &gt; with keychain available &gt; getCredentials &gt; should return null if credentials have expired" time="0.0020856">
        </testcase>
        <testcase classname="src/mcp/token-storage/keychain-token-storage.test.ts" name="KeychainTokenStorage &gt; with keychain available &gt; getCredentials &gt; should throw if stored data is corrupted JSON" time="0.0016561">
        </testcase>
        <testcase classname="src/mcp/token-storage/keychain-token-storage.test.ts" name="KeychainTokenStorage &gt; with keychain available &gt; setCredentials &gt; should save credentials to keychain" time="0.0032739">
        </testcase>
        <testcase classname="src/mcp/token-storage/keychain-token-storage.test.ts" name="KeychainTokenStorage &gt; with keychain available &gt; setCredentials &gt; should throw if saving to keychain fails" time="0.0018638">
        </testcase>
        <testcase classname="src/mcp/token-storage/keychain-token-storage.test.ts" name="KeychainTokenStorage &gt; with keychain available &gt; deleteCredentials &gt; should delete credentials from keychain" time="0.0015226">
        </testcase>
        <testcase classname="src/mcp/token-storage/keychain-token-storage.test.ts" name="KeychainTokenStorage &gt; with keychain available &gt; deleteCredentials &gt; should throw if no credentials were found to delete" time="0.0016813">
        </testcase>
        <testcase classname="src/mcp/token-storage/keychain-token-storage.test.ts" name="KeychainTokenStorage &gt; with keychain available &gt; deleteCredentials &gt; should throw if deleting from keychain fails" time="0.001622">
        </testcase>
        <testcase classname="src/mcp/token-storage/keychain-token-storage.test.ts" name="KeychainTokenStorage &gt; with keychain available &gt; listServers &gt; should return a list of server names" time="0.0018563">
        </testcase>
        <testcase classname="src/mcp/token-storage/keychain-token-storage.test.ts" name="KeychainTokenStorage &gt; with keychain available &gt; listServers &gt; should not include internal test keys in the server list" time="0.0018732">
        </testcase>
        <testcase classname="src/mcp/token-storage/keychain-token-storage.test.ts" name="KeychainTokenStorage &gt; with keychain available &gt; listServers &gt; should return an empty array on error" time="0.0131381">
            <system-err>
Failed to list servers from keychain: Error: find error
    at [90mE:\claude-code\pipedream\modelcontextprotocol\agentrpc\gemini-cli\packages\core\[39msrc\mcp\token-storage\keychain-token-storage.test.ts:268:54
    at file:///E:/claude-code/pipedream/modelcontextprotocol/agentrpc/gemini-cli/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:155:11
    at file:///E:/claude-code/pipedream/modelcontextprotocol/agentrpc/gemini-cli/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:752:26
    at file:///E:/claude-code/pipedream/modelcontextprotocol/agentrpc/gemini-cli/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:1897:20
    at new Promise (&lt;anonymous&gt;)
    at runWithTimeout (file:///E:/claude-code/pipedream/modelcontextprotocol/agentrpc/gemini-cli/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:1863:10)
    at runTest (file:///E:/claude-code/pipedream/modelcontextprotocol/agentrpc/gemini-cli/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:1574:12)
[90m    at processTicksAndRejections (node:internal/process/task_queues:105:5)[39m
    at runSuite (file:///E:/claude-code/pipedream/modelcontextprotocol/agentrpc/gemini-cli/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:1729:8)
    at runSuite (file:///E:/claude-code/pipedream/modelcontextprotocol/agentrpc/gemini-cli/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:1729:8)

            </system-err>
        </testcase>
        <testcase classname="src/mcp/token-storage/keychain-token-storage.test.ts" name="KeychainTokenStorage &gt; with keychain available &gt; getAllCredentials &gt; should return a map of all valid credentials" time="0.004598">
            <system-err>
Failed to parse credentials for bad-server: SyntaxError: Unexpected token &apos;o&apos;, &quot;not-json&quot; is not valid JSON
    at JSON.parse (&lt;anonymous&gt;)
    at KeychainTokenStorage.getAllCredentials [90m(E:\claude-code\pipedream\modelcontextprotocol\agentrpc\gemini-cli\packages\core\[39msrc\mcp\token-storage\keychain-token-storage.ts:165:29[90m)[39m
[90m    at processTicksAndRejections (node:internal/process/task_queues:105:5)[39m
    at [90mE:\claude-code\pipedream\modelcontextprotocol\agentrpc\gemini-cli\packages\core\[39msrc\mcp\token-storage\keychain-token-storage.test.ts:306:24
    at file:///E:/claude-code/pipedream/modelcontextprotocol/agentrpc/gemini-cli/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:752:20
Failed to parse credentials for invalid-server: TypeError: Cannot read properties of undefined (reading &apos;expiresAt&apos;)
    at KeychainTokenStorage.isTokenExpired [90m(E:\claude-code\pipedream\modelcontextprotocol\agentrpc\gemini-cli\packages\core\[39msrc\mcp\token-storage\base-token-storage.ts:39:28[90m)[39m
    at KeychainTokenStorage.getAllCredentials [90m(E:\claude-code\pipedream\modelcontextprotocol\agentrpc\gemini-cli\packages\core\[39msrc\mcp\token-storage\keychain-token-storage.ts:166:21[90m)[39m
[90m    at processTicksAndRejections (node:internal/process/task_queues:105:5)[39m
    at [90mE:\claude-code\pipedream\modelcontextprotocol\agentrpc\gemini-cli\packages\core\[39msrc\mcp\token-storage\keychain-token-storage.test.ts:306:24
    at file:///E:/claude-code/pipedream/modelcontextprotocol/agentrpc/gemini-cli/node_modules/[4m@vitest[24m/runner/dist/chunk-hooks.js:752:20

            </system-err>
        </testcase>
        <testcase classname="src/mcp/token-storage/keychain-token-storage.test.ts" name="KeychainTokenStorage &gt; with keychain available &gt; clearAll &gt; should delete all credentials for the service" time="0.0026128">
        </testcase>
        <testcase classname="src/mcp/token-storage/keychain-token-storage.test.ts" name="KeychainTokenStorage &gt; with keychain available &gt; clearAll &gt; should throw an aggregated error if deletions fail" time="0.0020856">
        </testcase>
    </testsuite>
    <testsuite name="src/routing/strategies/classifierStrategy.test.ts" timestamp="2025-09-23T13:26:52.275Z" hostname="WIN-33AANMPCPKN" tests="8" failures="0" errors="0" skipped="0" time="0.0137036">
        <testcase classname="src/routing/strategies/classifierStrategy.test.ts" name="ClassifierStrategy &gt; should call generateJson with the correct parameters" time="0.006931">
        </testcase>
        <testcase classname="src/routing/strategies/classifierStrategy.test.ts" name="ClassifierStrategy &gt; should route to FLASH model for a simple task" time="0.0010021">
        </testcase>
        <testcase classname="src/routing/strategies/classifierStrategy.test.ts" name="ClassifierStrategy &gt; should route to PRO model for a complex task" time="0.0005253">
        </testcase>
        <testcase classname="src/routing/strategies/classifierStrategy.test.ts" name="ClassifierStrategy &gt; should return null if the classifier API call fails" time="0.0005418">
        </testcase>
        <testcase classname="src/routing/strategies/classifierStrategy.test.ts" name="ClassifierStrategy &gt; should return null if the classifier returns a malformed JSON object" time="0.0009836">
        </testcase>
        <testcase classname="src/routing/strategies/classifierStrategy.test.ts" name="ClassifierStrategy &gt; should filter out tool-related history before sending to classifier" time="0.0004602">
        </testcase>
        <testcase classname="src/routing/strategies/classifierStrategy.test.ts" name="ClassifierStrategy &gt; should respect HISTORY_SEARCH_WINDOW and HISTORY_TURNS_FOR_CONTEXT" time="0.0010619">
        </testcase>
        <testcase classname="src/routing/strategies/classifierStrategy.test.ts" name="ClassifierStrategy &gt; should use a fallback promptId if not found in context" time="0.0006731">
        </testcase>
    </testsuite>
    <testsuite name="src/routing/strategies/compositeStrategy.test.ts" timestamp="2025-09-23T13:26:52.275Z" hostname="WIN-33AANMPCPKN" tests="6" failures="0" errors="0" skipped="0" time="0.0112786">
        <testcase classname="src/routing/strategies/compositeStrategy.test.ts" name="CompositeStrategy &gt; should try strategies in order and return the first successful decision" time="0.005452">
        </testcase>
        <testcase classname="src/routing/strategies/compositeStrategy.test.ts" name="CompositeStrategy &gt; should fall back to the terminal strategy if no other strategy provides a decision" time="0.0004952">
        </testcase>
        <testcase classname="src/routing/strategies/compositeStrategy.test.ts" name="CompositeStrategy &gt; should handle errors in non-terminal strategies and continue" time="0.0019133">
        </testcase>
        <testcase classname="src/routing/strategies/compositeStrategy.test.ts" name="CompositeStrategy &gt; should re-throw an error from the terminal strategy" time="0.0012805">
        </testcase>
        <testcase classname="src/routing/strategies/compositeStrategy.test.ts" name="CompositeStrategy &gt; should correctly finalize the decision metadata" time="0.0003679">
        </testcase>
        <testcase classname="src/routing/strategies/compositeStrategy.test.ts" name="CompositeStrategy &gt; should calculate total latency if child latency is not provided" time="0.0002929">
        </testcase>
    </testsuite>
    <testsuite name="src/routing/strategies/defaultStrategy.test.ts" timestamp="2025-09-23T13:26:52.276Z" hostname="WIN-33AANMPCPKN" tests="1" failures="0" errors="0" skipped="0" time="0.0032984">
        <testcase classname="src/routing/strategies/defaultStrategy.test.ts" name="DefaultStrategy &gt; should always route to the default Gemini model" time="0.0020317">
        </testcase>
    </testsuite>
    <testsuite name="src/routing/strategies/fallbackStrategy.test.ts" timestamp="2025-09-23T13:26:52.276Z" hostname="WIN-33AANMPCPKN" tests="4" failures="0" errors="0" skipped="0" time="0.0048227">
        <testcase classname="src/routing/strategies/fallbackStrategy.test.ts" name="FallbackStrategy &gt; should return null when not in fallback mode" time="0.0018769">
        </testcase>
        <testcase classname="src/routing/strategies/fallbackStrategy.test.ts" name="FallbackStrategy &gt; when in fallback mode &gt; should downgrade a pro model to the flash model" time="0.00065">
        </testcase>
        <testcase classname="src/routing/strategies/fallbackStrategy.test.ts" name="FallbackStrategy &gt; when in fallback mode &gt; should honor a lite model request" time="0.0002284">
        </testcase>
        <testcase classname="src/routing/strategies/fallbackStrategy.test.ts" name="FallbackStrategy &gt; when in fallback mode &gt; should use the flash model if flash is requested" time="0.0001822">
        </testcase>
    </testsuite>
    <testsuite name="src/routing/strategies/overrideStrategy.test.ts" timestamp="2025-09-23T13:26:52.277Z" hostname="WIN-33AANMPCPKN" tests="3" failures="0" errors="0" skipped="0" time="0.0027819">
        <testcase classname="src/routing/strategies/overrideStrategy.test.ts" name="OverrideStrategy &gt; should return null when the override model is auto" time="0.0011654">
        </testcase>
        <testcase classname="src/routing/strategies/overrideStrategy.test.ts" name="OverrideStrategy &gt; should return a decision with the override model when one is specified" time="0.0004433">
        </testcase>
        <testcase classname="src/routing/strategies/overrideStrategy.test.ts" name="OverrideStrategy &gt; should handle different override model names" time="0.0001242">
        </testcase>
    </testsuite>
    <testsuite name="src/telemetry/clearcut-logger/clearcut-logger.test.ts" timestamp="2025-09-23T13:26:52.277Z" hostname="WIN-33AANMPCPKN" tests="26" failures="0" errors="0" skipped="0" time="0.2775403">
        <testcase classname="src/telemetry/clearcut-logger/clearcut-logger.test.ts" name="ClearcutLogger &gt; getInstance &gt; returns an instance if usage statistics are enabled" time="0.0161513">
        </testcase>
        <testcase classname="src/telemetry/clearcut-logger/clearcut-logger.test.ts" name="ClearcutLogger &gt; getInstance &gt; returns an instance if usage statistics are enabled" time="0.0014299">
        </testcase>
        <testcase classname="src/telemetry/clearcut-logger/clearcut-logger.test.ts" name="ClearcutLogger &gt; getInstance &gt; is a singleton" time="0.0014896">
        </testcase>
        <testcase classname="src/telemetry/clearcut-logger/clearcut-logger.test.ts" name="ClearcutLogger &gt; createLogEvent &gt; logs the total number of google accounts" time="0.0018583">
        </testcase>
        <testcase classname="src/telemetry/clearcut-logger/clearcut-logger.test.ts" name="ClearcutLogger &gt; createLogEvent &gt; logs the current surface from a github action" time="0.0010341">
        </testcase>
        <testcase classname="src/telemetry/clearcut-logger/clearcut-logger.test.ts" name="ClearcutLogger &gt; createLogEvent &gt; logs default metadata" time="0.0026438">
        </testcase>
        <testcase classname="src/telemetry/clearcut-logger/clearcut-logger.test.ts" name="ClearcutLogger &gt; createLogEvent &gt; logs the current nodejs version" time="0.0009684">
        </testcase>
        <testcase classname="src/telemetry/clearcut-logger/clearcut-logger.test.ts" name="ClearcutLogger &gt; createLogEvent &gt; logs the current surface" time="0.0012908">
        </testcase>
        <testcase classname="src/telemetry/clearcut-logger/clearcut-logger.test.ts" name="ClearcutLogger &gt; createLogEvent &gt; logs the value of config.useSmartEdit and config.useModelRouter" time="0.0010393">
        </testcase>
        <testcase classname="src/telemetry/clearcut-logger/clearcut-logger.test.ts" name="ClearcutLogger &gt; createLogEvent &gt; logs the current surface as &apos;cursor&apos;, preempting vscode detection" time="0.0010169">
        </testcase>
        <testcase classname="src/telemetry/clearcut-logger/clearcut-logger.test.ts" name="ClearcutLogger &gt; createLogEvent &gt; logs the current surface as &apos;vscode&apos;, preempting vscode detection" time="0.0008594">
        </testcase>
        <testcase classname="src/telemetry/clearcut-logger/clearcut-logger.test.ts" name="ClearcutLogger &gt; createLogEvent &gt; logs the current surface as &apos;firebasestudio&apos;, preempting vscode detection" time="0.0008214">
        </testcase>
        <testcase classname="src/telemetry/clearcut-logger/clearcut-logger.test.ts" name="ClearcutLogger &gt; createLogEvent &gt; logs the current surface as &apos;devin&apos;, preempting vscode detection" time="0.0009538">
        </testcase>
        <testcase classname="src/telemetry/clearcut-logger/clearcut-logger.test.ts" name="ClearcutLogger &gt; createLogEvent &gt; logs the current surface as &apos;cloudshell&apos;, preempting vscode detection" time="0.0009628">
        </testcase>
        <testcase classname="src/telemetry/clearcut-logger/clearcut-logger.test.ts" name="ClearcutLogger &gt; logChatCompressionEvent &gt; logs an event with proper fields" time="0.0013608">
        </testcase>
        <testcase classname="src/telemetry/clearcut-logger/clearcut-logger.test.ts" name="ClearcutLogger &gt; logRipgrepFallbackEvent &gt; logs an event with the proper name" time="0.0011554">
        </testcase>
        <testcase classname="src/telemetry/clearcut-logger/clearcut-logger.test.ts" name="ClearcutLogger &gt; enqueueLogEvent &gt; should add events to the queue" time="0.000853">
        </testcase>
        <testcase classname="src/telemetry/clearcut-logger/clearcut-logger.test.ts" name="ClearcutLogger &gt; enqueueLogEvent &gt; should evict the oldest event when the queue is full" time="0.0921073">
        </testcase>
        <testcase classname="src/telemetry/clearcut-logger/clearcut-logger.test.ts" name="ClearcutLogger &gt; flushToClearcut &gt; allows for usage with a configured proxy agent" time="0.0708635">
        </testcase>
        <testcase classname="src/telemetry/clearcut-logger/clearcut-logger.test.ts" name="ClearcutLogger &gt; flushToClearcut &gt; should clear events on successful flush" time="0.0200028">
        </testcase>
        <testcase classname="src/telemetry/clearcut-logger/clearcut-logger.test.ts" name="ClearcutLogger &gt; flushToClearcut &gt; should handle a network error and requeue events" time="0.0042666">
        </testcase>
        <testcase classname="src/telemetry/clearcut-logger/clearcut-logger.test.ts" name="ClearcutLogger &gt; flushToClearcut &gt; should handle an HTTP error and requeue events" time="0.0020266">
        </testcase>
        <testcase classname="src/telemetry/clearcut-logger/clearcut-logger.test.ts" name="ClearcutLogger &gt; requeueFailedEvents logic &gt; should limit the number of requeued events to max_retry_events" time="0.0030845">
        </testcase>
        <testcase classname="src/telemetry/clearcut-logger/clearcut-logger.test.ts" name="ClearcutLogger &gt; requeueFailedEvents logic &gt; should not requeue more events than available space in the queue" time="0.0343682">
        </testcase>
        <testcase classname="src/telemetry/clearcut-logger/clearcut-logger.test.ts" name="ClearcutLogger &gt; logModelRoutingEvent &gt; logs a successful routing event" time="0.0026749">
        </testcase>
        <testcase classname="src/telemetry/clearcut-logger/clearcut-logger.test.ts" name="ClearcutLogger &gt; logModelRoutingEvent &gt; logs a failed routing event with a reason" time="0.0073819">
        </testcase>
    </testsuite>
    <testsuite name="src/utils/filesearch/crawlCache.test.ts" timestamp="2025-09-23T13:26:52.281Z" hostname="WIN-33AANMPCPKN" tests="9" failures="0" errors="0" skipped="0" time="0.0107031">
        <testcase classname="src/utils/filesearch/crawlCache.test.ts" name="CrawlCache &gt; getCacheKey &gt; should generate a consistent hash" time="0.0020959">
        </testcase>
        <testcase classname="src/utils/filesearch/crawlCache.test.ts" name="CrawlCache &gt; getCacheKey &gt; should generate a different hash for different directories" time="0.00094">
        </testcase>
        <testcase classname="src/utils/filesearch/crawlCache.test.ts" name="CrawlCache &gt; getCacheKey &gt; should generate a different hash for different ignore content" time="0.0001624">
        </testcase>
        <testcase classname="src/utils/filesearch/crawlCache.test.ts" name="CrawlCache &gt; getCacheKey &gt; should generate a different hash for different maxDepth values" time="0.0002598">
        </testcase>
        <testcase classname="src/utils/filesearch/crawlCache.test.ts" name="CrawlCache &gt; in-memory cache operations &gt; should write and read data from the cache" time="0.0010094">
        </testcase>
        <testcase classname="src/utils/filesearch/crawlCache.test.ts" name="CrawlCache &gt; in-memory cache operations &gt; should return undefined for a nonexistent key" time="0.0001712">
        </testcase>
        <testcase classname="src/utils/filesearch/crawlCache.test.ts" name="CrawlCache &gt; in-memory cache operations &gt; should clear the cache" time="0.0001403">
        </testcase>
        <testcase classname="src/utils/filesearch/crawlCache.test.ts" name="CrawlCache &gt; in-memory cache operations &gt; should automatically evict a cache entry after its TTL expires" time="0.0035723">
        </testcase>
        <testcase classname="src/utils/filesearch/crawlCache.test.ts" name="CrawlCache &gt; in-memory cache operations &gt; should reset the timer when an entry is updated" time="0.0007191">
        </testcase>
    </testsuite>
    <testsuite name="src/utils/filesearch/crawler.test.ts" timestamp="2025-09-23T13:26:52.282Z" hostname="WIN-33AANMPCPKN" tests="18" failures="0" errors="0" skipped="0" time="0.1860856">
        <testcase classname="src/utils/filesearch/crawler.test.ts" name="crawler &gt; should use .geminiignore rules" time="0.0346794">
        </testcase>
        <testcase classname="src/utils/filesearch/crawler.test.ts" name="crawler &gt; should combine .gitignore and .geminiignore rules" time="0.0111107">
        </testcase>
        <testcase classname="src/utils/filesearch/crawler.test.ts" name="crawler &gt; should use ignoreDirs option" time="0.0039326">
        </testcase>
        <testcase classname="src/utils/filesearch/crawler.test.ts" name="crawler &gt; should handle negated directories" time="0.0067333">
        </testcase>
        <testcase classname="src/utils/filesearch/crawler.test.ts" name="crawler &gt; should handle root-level file negation" time="0.0040406">
        </testcase>
        <testcase classname="src/utils/filesearch/crawler.test.ts" name="crawler &gt; should handle directory negation with glob" time="0.0055455">
        </testcase>
        <testcase classname="src/utils/filesearch/crawler.test.ts" name="crawler &gt; should correctly handle negated patterns in .gitignore" time="0.0036754">
        </testcase>
        <testcase classname="src/utils/filesearch/crawler.test.ts" name="crawler &gt; should initialize correctly when ignore files are missing" time="0.0153361">
        </testcase>
        <testcase classname="src/utils/filesearch/crawler.test.ts" name="crawler &gt; should handle empty or commented-only ignore files" time="0.0039143">
        </testcase>
        <testcase classname="src/utils/filesearch/crawler.test.ts" name="crawler &gt; should always ignore the .git directory" time="0.0031531">
        </testcase>
        <testcase classname="src/utils/filesearch/crawler.test.ts" name="crawler &gt; with in-memory cache &gt; should hit the cache for subsequent crawls" time="0.0379314">
        </testcase>
        <testcase classname="src/utils/filesearch/crawler.test.ts" name="crawler &gt; with in-memory cache &gt; should miss the cache when ignore rules change" time="0.0204922">
        </testcase>
        <testcase classname="src/utils/filesearch/crawler.test.ts" name="crawler &gt; with in-memory cache &gt; should miss the cache after TTL expires" time="0.0093288">
        </testcase>
        <testcase classname="src/utils/filesearch/crawler.test.ts" name="crawler &gt; with in-memory cache &gt; should miss the cache when maxDepth changes" time="0.0029022">
        </testcase>
        <testcase classname="src/utils/filesearch/crawler.test.ts" name="crawler &gt; with maxDepth &gt; should only crawl top-level files when maxDepth is 0" time="0.0060053">
        </testcase>
        <testcase classname="src/utils/filesearch/crawler.test.ts" name="crawler &gt; with maxDepth &gt; should crawl one level deep when maxDepth is 1" time="0.006378">
        </testcase>
        <testcase classname="src/utils/filesearch/crawler.test.ts" name="crawler &gt; with maxDepth &gt; should crawl two levels deep when maxDepth is 2" time="0.004907">
        </testcase>
        <testcase classname="src/utils/filesearch/crawler.test.ts" name="crawler &gt; with maxDepth &gt; should perform a full recursive crawl when maxDepth is undefined" time="0.0044174">
        </testcase>
    </testsuite>
    <testsuite name="src/utils/filesearch/fileSearch.test.ts" timestamp="2025-09-23T13:26:52.284Z" hostname="WIN-33AANMPCPKN" tests="27" failures="0" errors="0" skipped="0" time="1.0354848">
        <testcase classname="src/utils/filesearch/fileSearch.test.ts" name="FileSearch &gt; should use .geminiignore rules" time="0.0150278">
        </testcase>
        <testcase classname="src/utils/filesearch/fileSearch.test.ts" name="FileSearch &gt; should combine .gitignore and .geminiignore rules" time="0.0132102">
        </testcase>
        <testcase classname="src/utils/filesearch/fileSearch.test.ts" name="FileSearch &gt; should use ignoreDirs option" time="0.0275211">
        </testcase>
        <testcase classname="src/utils/filesearch/fileSearch.test.ts" name="FileSearch &gt; should handle negated directories" time="0.007414">
        </testcase>
        <testcase classname="src/utils/filesearch/fileSearch.test.ts" name="FileSearch &gt; should filter results with a search pattern" time="0.0046108">
        </testcase>
        <testcase classname="src/utils/filesearch/fileSearch.test.ts" name="FileSearch &gt; should handle root-level file negation" time="0.0029584">
        </testcase>
        <testcase classname="src/utils/filesearch/fileSearch.test.ts" name="FileSearch &gt; should handle directory negation with glob" time="0.0129465">
        </testcase>
        <testcase classname="src/utils/filesearch/fileSearch.test.ts" name="FileSearch &gt; should correctly handle negated patterns in .gitignore" time="0.009028">
        </testcase>
        <testcase classname="src/utils/filesearch/fileSearch.test.ts" name="FileSearch &gt; should initialize correctly when ignore files are missing" time="0.0039646">
        </testcase>
        <testcase classname="src/utils/filesearch/fileSearch.test.ts" name="FileSearch &gt; should respect maxResults option in search" time="0.0040387">
        </testcase>
        <testcase classname="src/utils/filesearch/fileSearch.test.ts" name="FileSearch &gt; should use fzf for fuzzy matching when pattern does not contain wildcards" time="0.0052218">
        </testcase>
        <testcase classname="src/utils/filesearch/fileSearch.test.ts" name="FileSearch &gt; should not use fzf for fuzzy matching when disableFuzzySearch is true" time="0.0105837">
        </testcase>
        <testcase classname="src/utils/filesearch/fileSearch.test.ts" name="FileSearch &gt; should use fzf for fuzzy matching when disableFuzzySearch is false" time="0.0047231">
        </testcase>
        <testcase classname="src/utils/filesearch/fileSearch.test.ts" name="FileSearch &gt; should return empty array when no matches are found" time="0.0032335">
        </testcase>
        <testcase classname="src/utils/filesearch/fileSearch.test.ts" name="FileSearch &gt; should throw AbortError when filter is aborted" time="0.0033165">
        </testcase>
        <testcase classname="src/utils/filesearch/fileSearch.test.ts" name="FileSearch &gt; should throw an error if search is called before initialization" time="0.0015455">
        </testcase>
        <testcase classname="src/utils/filesearch/fileSearch.test.ts" name="FileSearch &gt; should handle empty or commented-only ignore files" time="0.00281">
        </testcase>
        <testcase classname="src/utils/filesearch/fileSearch.test.ts" name="FileSearch &gt; should always ignore the .git directory" time="0.016048">
        </testcase>
        <testcase classname="src/utils/filesearch/fileSearch.test.ts" name="FileSearch &gt; should be cancellable via AbortSignal" time="0.1119954">
        </testcase>
        <testcase classname="src/utils/filesearch/fileSearch.test.ts" name="FileSearch &gt; should leverage ResultCache for bestBaseQuery optimization" time="0.3868046">
        </testcase>
        <testcase classname="src/utils/filesearch/fileSearch.test.ts" name="FileSearch &gt; should be case-insensitive by default" time="0.3631511">
        </testcase>
        <testcase classname="src/utils/filesearch/fileSearch.test.ts" name="FileSearch &gt; should respect maxResults even when the cache returns an exact match" time="0.0049266">
        </testcase>
        <testcase classname="src/utils/filesearch/fileSearch.test.ts" name="FileSearch &gt; should handle file paths with special characters that need escaping" time="0.004661">
        </testcase>
        <testcase classname="src/utils/filesearch/fileSearch.test.ts" name="FileSearch &gt; DirectoryFileSearch &gt; should search for files in the current directory" time="0.004179">
        </testcase>
        <testcase classname="src/utils/filesearch/fileSearch.test.ts" name="FileSearch &gt; DirectoryFileSearch &gt; should search for files in a subdirectory" time="0.0036398">
        </testcase>
        <testcase classname="src/utils/filesearch/fileSearch.test.ts" name="FileSearch &gt; DirectoryFileSearch &gt; should list all files in a directory" time="0.0033284">
        </testcase>
        <testcase classname="src/utils/filesearch/fileSearch.test.ts" name="FileSearch &gt; DirectoryFileSearch &gt; should respect ignore rules" time="0.0028363">
        </testcase>
    </testsuite>
    <testsuite name="src/utils/filesearch/ignore.test.ts" timestamp="2025-09-23T13:26:52.287Z" hostname="WIN-33AANMPCPKN" tests="12" failures="0" errors="0" skipped="0" time="0.0259707">
        <testcase classname="src/utils/filesearch/ignore.test.ts" name="Ignore &gt; getDirectoryFilter &gt; should ignore directories matching directory patterns" time="0.004237">
        </testcase>
        <testcase classname="src/utils/filesearch/ignore.test.ts" name="Ignore &gt; getDirectoryFilter &gt; should not ignore directories with file patterns" time="0.0005152">
        </testcase>
        <testcase classname="src/utils/filesearch/ignore.test.ts" name="Ignore &gt; getFileFilter &gt; should not ignore files with directory patterns" time="0.0001903">
        </testcase>
        <testcase classname="src/utils/filesearch/ignore.test.ts" name="Ignore &gt; getFileFilter &gt; should ignore files matching file patterns" time="0.0003673">
        </testcase>
        <testcase classname="src/utils/filesearch/ignore.test.ts" name="Ignore &gt; should accumulate patterns across multiple add() calls" time="0.0002951">
        </testcase>
        <testcase classname="src/utils/filesearch/ignore.test.ts" name="Ignore &gt; should return a stable and consistent fingerprint" time="0.0009725">
        </testcase>
        <testcase classname="src/utils/filesearch/ignore.test.ts" name="loadIgnoreRules &gt; should load rules from .gitignore" time="0.0090547">
        </testcase>
        <testcase classname="src/utils/filesearch/ignore.test.ts" name="loadIgnoreRules &gt; should load rules from .geminiignore" time="0.0030325">
        </testcase>
        <testcase classname="src/utils/filesearch/ignore.test.ts" name="loadIgnoreRules &gt; should combine rules from .gitignore and .geminiignore" time="0.0031535">
        </testcase>
        <testcase classname="src/utils/filesearch/ignore.test.ts" name="loadIgnoreRules &gt; should add ignoreDirs" time="0.0010051">
        </testcase>
        <testcase classname="src/utils/filesearch/ignore.test.ts" name="loadIgnoreRules &gt; should handle missing ignore files gracefully" time="0.0008129">
        </testcase>
        <testcase classname="src/utils/filesearch/ignore.test.ts" name="loadIgnoreRules &gt; should always add .git to the ignore list" time="0.0007202">
        </testcase>
    </testsuite>
    <testsuite name="src/utils/filesearch/result-cache.test.ts" timestamp="2025-09-23T13:26:52.288Z" hostname="WIN-33AANMPCPKN" tests="3" failures="0" errors="0" skipped="0" time="0.0032339">
        <testcase classname="src/utils/filesearch/result-cache.test.ts" name="ResultCache basic usage" time="0.0017729">
        </testcase>
        <testcase classname="src/utils/filesearch/result-cache.test.ts" name="ResultCache cache hit/miss" time="0.0003162">
        </testcase>
        <testcase classname="src/utils/filesearch/result-cache.test.ts" name="ResultCache best base query" time="0.0001232">
        </testcase>
    </testsuite>
</testsuites>
